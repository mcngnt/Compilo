.ORIG x3000
LD R6 CST181 ; Init R6 value to the start of the stack
BR IGNORE_CST181
CST181 .FILL #65023
IGNORE_CST181
ADD R5 R6 #0
LD R4 CST182 ; R4 <- address of label STATIC_VAR
BR IGNORE_CST182
CST182 .FILL #14656
IGNORE_CST182
ADD R4 R4 #1
LD R3 CST183 ; R3 <- address of label FUN_USER_main
BR IGNORE_CST183
CST183 .FILL #12596
IGNORE_CST183
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_clear
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST184 ; R0 <- address of label STRING1
BR IGNORE_CST184
CST184 .FILL #13956
IGNORE_CST184
PUTS
LD R0 CST1 ; R0 <- cst 0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
FUN_USER_getwidth
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable n to the stack 
LD R0 CST20 ; R0 <- cst 1
BR IGNORE_CST20
CST20 .FILL #1
IGNORE_CST20
LD R1 CST21
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST21
CST21 .FILL #0
IGNORE_CST21
STARTWHILE3
LD R0 CST5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST5
CST5 .FILL #-3
IGNORE_CST5
LD R1 CST6
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST6
CST6 .FILL #-3
IGNORE_CST6
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
ADD R0 R0 #0
BRnp IGNORE_JMP15
LD R3 CST185 ; R3 <- address of label EIF_ELSE15
BR IGNORE_CST185
CST185 .FILL #12493
IGNORE_CST185
JMP R3
IGNORE_JMP15
LD R0 CST9
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST9
CST9 .FILL #-3
IGNORE_CST9
LD R1 CST10
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST10
CST10 .FILL #-3
IGNORE_CST10
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST8 ; R0 <- cst 10
BR IGNORE_CST8
CST8 .FILL #10
IGNORE_CST8
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP7
LD R3 CST186 ; R3 <- address of label CMP_ELSE7
BR IGNORE_CST186
CST186 .FILL #12472
IGNORE_CST186
JMP R3
IGNORE_JMP7
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST187 ; R3 <- address of label CMP_ENDELSE7
BR IGNORE_CST187
CST187 .FILL #12473
IGNORE_CST187
JMP R3
CMP_ELSE7
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE7
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP13
LD R3 CST188 ; R3 <- address of label EIF_ELSE13
BR IGNORE_CST188
CST188 .FILL #12486
IGNORE_CST188
JMP R3
IGNORE_JMP13
LD R0 CST11 ; R0 <- cst 0
BR IGNORE_CST11
CST11 .FILL #0
IGNORE_CST11
LD R3 CST189 ; R3 <- address of label EIF_ENDELSE13
BR IGNORE_CST189
CST189 .FILL #12489
IGNORE_CST189
JMP R3
EIF_ELSE13
LD R0 CST12 ; R0 <- cst 1
BR IGNORE_CST12
CST12 .FILL #1
IGNORE_CST12
EIF_ENDELSE13
LD R3 CST190 ; R3 <- address of label EIF_ENDELSE15
BR IGNORE_CST190
CST190 .FILL #12496
IGNORE_CST190
JMP R3
EIF_ELSE15
LD R0 CST14 ; R0 <- cst 0
BR IGNORE_CST14
CST14 .FILL #0
IGNORE_CST14
EIF_ENDELSE15
ADD R0 R0 #0
BRnp IGNORE_JMP3
LD R3 CST191 ; R3 <- address of label ENDWHILE3
BR IGNORE_CST191
CST191 .FILL #12546
IGNORE_CST191
JMP R3
IGNORE_JMP3
LD R0 CST16
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST16
CST16 .FILL #0
IGNORE_CST16
LD R1 CST17
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST17
CST17 .FILL #0
IGNORE_CST17
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R0 CST18
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST18
CST18 .FILL #-3
IGNORE_CST18
LD R1 CST19
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST19
CST19 .FILL #-3
IGNORE_CST19
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST192 ; R3 <- address of label STARTWHILE3
BR IGNORE_CST192
CST192 .FILL #12410
IGNORE_CST192
JMP R3
ENDWHILE3
LD R0 CST2
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST2
CST2 .FILL #0
IGNORE_CST2
LD R1 CST3
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST3
CST3 .FILL #0
IGNORE_CST3
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
FUN_USER_printmaze
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST23
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST23
CST23 .FILL #-3
IGNORE_CST23
LD R1 CST24
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST24
CST24 .FILL #-3
IGNORE_CST24
PUTS
LD R0 CST193 ; R0 <- address of label STRING2
BR IGNORE_CST193
CST193 .FILL #14015
IGNORE_CST193
PUTS
LD R0 CST22 ; R0 <- cst 0
BR IGNORE_CST22
CST22 .FILL #0
IGNORE_CST22
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
FUN_USER_main
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable maze to the stack 
ADD R6 R6 #-1 ; Add variable pos to the stack 
ADD R6 R6 #-1 ; Add variable width to the stack 
ADD R6 R6 #-1 ; Add variable y to the stack 
ADD R6 R6 #-1 ; Add variable x to the stack 
ADD R6 R6 #-1 ; Add variable ch to the stack 
LD R0 CST194 ; R0 <- address of label STRING4
BR IGNORE_CST194
CST194 .FILL #14043
IGNORE_CST194
LD R1 CST180
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST180
CST180 .FILL #0
IGNORE_CST180
LD R3 CST195 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST195
CST195 .FILL #12377
IGNORE_CST195
JSRR R3
LD R1 CST179
ADD R6 R6 R1
BR IGNORE_CST179
CST179 .FILL #0
IGNORE_CST179
LD R0 CST177 ; R0 <- cst 1
BR IGNORE_CST177
CST177 .FILL #1
IGNORE_CST177
LD R1 CST178
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST178
CST178 .FILL #4
IGNORE_CST178
LD R0 CST175 ; R0 <- cst 1
BR IGNORE_CST175
CST175 .FILL #1
IGNORE_CST175
LD R1 CST176
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST176
CST176 .FILL #3
IGNORE_CST176
LD R0 CST171
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST171
CST171 .FILL #0
IGNORE_CST171
LD R1 CST172
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST172
CST172 .FILL #0
IGNORE_CST172
ADD R6 R6 #-1
STR R0 R6 #0
LD R3 CST196 ; R3 <- address of label FUN_USER_getwidth
BR IGNORE_CST196
CST196 .FILL #12393
IGNORE_CST196
JSRR R3
LD R1 CST173
ADD R6 R6 R1
BR IGNORE_CST173
CST173 .FILL #1
IGNORE_CST173
LD R1 CST174
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST174
CST174 .FILL #2
IGNORE_CST174
LD R0 CST168
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST168
CST168 .FILL #2
IGNORE_CST168
LD R1 CST169
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST169
CST169 .FILL #2
IGNORE_CST169
LD R1 CST170
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST170
CST170 .FILL #0
IGNORE_CST170
LD R0 CST165
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST165
CST165 .FILL #0
IGNORE_CST165
LD R1 CST166
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST166
CST166 .FILL #0
IGNORE_CST166
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST163
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST163
CST163 .FILL #3
IGNORE_CST163
LD R1 CST164
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST164
CST164 .FILL #3
IGNORE_CST164
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST161
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST161
CST161 .FILL #2
IGNORE_CST161
LD R1 CST162
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST162
CST162 .FILL #2
IGNORE_CST162
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST197 ; R3 <- address of label FUN_MULT
BR IGNORE_CST197
CST197 .FILL #12300
IGNORE_CST197
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST159
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST159
CST159 .FILL #4
IGNORE_CST159
LD R1 CST160
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST160
CST160 .FILL #4
IGNORE_CST160
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST167
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST167
CST167 .FILL #1
IGNORE_CST167
LD R0 CST157 ; R0 <- cst 79
BR IGNORE_CST157
CST157 .FILL #79
IGNORE_CST157
LD R1 CST158
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST158
CST158 .FILL #1
IGNORE_CST158

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST154
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST154
CST154 .FILL #0
IGNORE_CST154
LD R1 CST155
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST155
CST155 .FILL #0
IGNORE_CST155
ADD R6 R6 #-1
STR R0 R6 #0
LD R3 CST198 ; R3 <- address of label FUN_USER_printmaze
BR IGNORE_CST198
CST198 .FILL #12564
IGNORE_CST198
JSRR R3
LD R1 CST156
ADD R6 R6 R1
BR IGNORE_CST156
CST156 .FILL #1
IGNORE_CST156
LD R0 CST152 ; R0 <- cst 46
BR IGNORE_CST152
CST152 .FILL #46
IGNORE_CST152
LD R1 CST153
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST153
CST153 .FILL #1
IGNORE_CST153

STR R0 R1 #0 ; R0 <- M[R1]
STARTWHILE25
GETC
LD R1 CST29
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST29
CST29 .FILL #5
IGNORE_CST29
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST28 ; R0 <- cst 101
BR IGNORE_CST28
CST28 .FILL #101
IGNORE_CST28
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP27
LD R3 CST199 ; R3 <- address of label CMP_ELSE27
BR IGNORE_CST199
CST199 .FILL #12860
IGNORE_CST199
JMP R3
IGNORE_JMP27
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST200 ; R3 <- address of label CMP_ENDELSE27
BR IGNORE_CST200
CST200 .FILL #12861
IGNORE_CST200
JMP R3
CMP_ELSE27
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE27
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP32
LD R3 CST201 ; R3 <- address of label EIF_ELSE32
BR IGNORE_CST201
CST201 .FILL #12874
IGNORE_CST201
JMP R3
IGNORE_JMP32
LD R0 CST30 ; R0 <- cst 0
BR IGNORE_CST30
CST30 .FILL #0
IGNORE_CST30
LD R3 CST202 ; R3 <- address of label EIF_ENDELSE32
BR IGNORE_CST202
CST202 .FILL #12877
IGNORE_CST202
JMP R3
EIF_ELSE32
LD R0 CST31 ; R0 <- cst 1
BR IGNORE_CST31
CST31 .FILL #1
IGNORE_CST31
EIF_ENDELSE32
ADD R0 R0 #0
BRnp IGNORE_JMP25
LD R3 CST203 ; R3 <- address of label ENDWHILE25
BR IGNORE_CST203
CST203 .FILL #13950
IGNORE_CST203
JMP R3
IGNORE_JMP25
LD R3 CST204 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST204
CST204 .FILL #12377
IGNORE_CST204
JSRR R3
LD R1 CST151
ADD R6 R6 R1
BR IGNORE_CST151
CST151 .FILL #0
IGNORE_CST151
LD R0 CST130
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST130
CST130 .FILL #5
IGNORE_CST130
LD R1 CST131
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST131
CST131 .FILL #5
IGNORE_CST131
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST129 ; R0 <- cst 122
BR IGNORE_CST129
CST129 .FILL #122
IGNORE_CST129
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP128
LD R3 CST205 ; R3 <- address of label CMP_ELSE128
BR IGNORE_CST205
CST205 .FILL #12928
IGNORE_CST205
JMP R3
IGNORE_JMP128
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST206 ; R3 <- address of label CMP_ENDELSE128
BR IGNORE_CST206
CST206 .FILL #12929
IGNORE_CST206
JMP R3
CMP_ELSE128
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE128
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP147
LD R3 CST207 ; R3 <- address of label EIF_ELSE147
BR IGNORE_CST207
CST207 .FILL #13068
IGNORE_CST207
JMP R3
IGNORE_JMP147
LD R0 CST141
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST141
CST141 .FILL #0
IGNORE_CST141
LD R1 CST142
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST142
CST142 .FILL #0
IGNORE_CST142
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST139
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST139
CST139 .FILL #3
IGNORE_CST139
LD R1 CST140
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST140
CST140 .FILL #3
IGNORE_CST140
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST138 ; R0 <- cst 1
BR IGNORE_CST138
CST138 .FILL #1
IGNORE_CST138
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST136
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST136
CST136 .FILL #2
IGNORE_CST136
LD R1 CST137
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST137
CST137 .FILL #2
IGNORE_CST137
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST208 ; R3 <- address of label FUN_MULT
BR IGNORE_CST208
CST208 .FILL #12300
IGNORE_CST208
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST134
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST134
CST134 .FILL #4
IGNORE_CST134
LD R1 CST135
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST135
CST135 .FILL #4
IGNORE_CST135
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST133 ; R0 <- cst 42
BR IGNORE_CST133
CST133 .FILL #42
IGNORE_CST133
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP132
LD R3 CST209 ; R3 <- address of label CMP_ELSE132
BR IGNORE_CST209
CST209 .FILL #13047
IGNORE_CST209
JMP R3
IGNORE_JMP132
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST210 ; R3 <- address of label CMP_ENDELSE132
BR IGNORE_CST210
CST210 .FILL #13048
IGNORE_CST210
JMP R3
CMP_ELSE132
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE132
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP145
LD R3 CST211 ; R3 <- address of label EIF_ELSE145
BR IGNORE_CST211
CST211 .FILL #13061
IGNORE_CST211
JMP R3
IGNORE_JMP145
LD R0 CST143 ; R0 <- cst 0
BR IGNORE_CST143
CST143 .FILL #0
IGNORE_CST143
LD R3 CST212 ; R3 <- address of label EIF_ENDELSE145
BR IGNORE_CST212
CST212 .FILL #13064
IGNORE_CST212
JMP R3
EIF_ELSE145
LD R0 CST144 ; R0 <- cst 1
BR IGNORE_CST144
CST144 .FILL #1
IGNORE_CST144
EIF_ENDELSE145
LD R3 CST213 ; R3 <- address of label EIF_ENDELSE147
BR IGNORE_CST213
CST213 .FILL #13071
IGNORE_CST213
JMP R3
EIF_ELSE147
LD R0 CST146 ; R0 <- cst 0
BR IGNORE_CST146
CST146 .FILL #0
IGNORE_CST146
EIF_ENDELSE147
ADD R0 R0 #0
BRnp IGNORE_JMP150
LD R3 CST214 ; R3 <- address of label IF_ELSE150
BR IGNORE_CST214
CST214 .FILL #13101
IGNORE_CST214
JMP R3
IGNORE_JMP150
LD R0 CST148
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST148
CST148 .FILL #3
IGNORE_CST148
LD R1 CST149
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST149
CST149 .FILL #3
IGNORE_CST149
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0
ADD R0 R0 #1 ; (lvalue)--
LD R3 CST215 ; R3 <- address of label IF_ENDELSE150
BR IGNORE_CST215
CST215 .FILL #13101
IGNORE_CST215
JMP R3
IF_ELSE150
IF_ENDELSE150
LD R0 CST107
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST107
CST107 .FILL #5
IGNORE_CST107
LD R1 CST108
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST108
CST108 .FILL #5
IGNORE_CST108
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST106 ; R0 <- cst 115
BR IGNORE_CST106
CST106 .FILL #115
IGNORE_CST106
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP105
LD R3 CST216 ; R3 <- address of label CMP_ELSE105
BR IGNORE_CST216
CST216 .FILL #13138
IGNORE_CST216
JMP R3
IGNORE_JMP105
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST217 ; R3 <- address of label CMP_ENDELSE105
BR IGNORE_CST217
CST217 .FILL #13139
IGNORE_CST217
JMP R3
CMP_ELSE105
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE105
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP124
LD R3 CST218 ; R3 <- address of label EIF_ELSE124
BR IGNORE_CST218
CST218 .FILL #13276
IGNORE_CST218
JMP R3
IGNORE_JMP124
LD R0 CST118
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST118
CST118 .FILL #0
IGNORE_CST118
LD R1 CST119
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST119
CST119 .FILL #0
IGNORE_CST119
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST116
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST116
CST116 .FILL #3
IGNORE_CST116
LD R1 CST117
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST117
CST117 .FILL #3
IGNORE_CST117
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST115 ; R0 <- cst 1
BR IGNORE_CST115
CST115 .FILL #1
IGNORE_CST115
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST113
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST113
CST113 .FILL #2
IGNORE_CST113
LD R1 CST114
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST114
CST114 .FILL #2
IGNORE_CST114
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST219 ; R3 <- address of label FUN_MULT
BR IGNORE_CST219
CST219 .FILL #12300
IGNORE_CST219
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST111
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST111
CST111 .FILL #4
IGNORE_CST111
LD R1 CST112
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST112
CST112 .FILL #4
IGNORE_CST112
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST110 ; R0 <- cst 42
BR IGNORE_CST110
CST110 .FILL #42
IGNORE_CST110
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP109
LD R3 CST220 ; R3 <- address of label CMP_ELSE109
BR IGNORE_CST220
CST220 .FILL #13255
IGNORE_CST220
JMP R3
IGNORE_JMP109
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST221 ; R3 <- address of label CMP_ENDELSE109
BR IGNORE_CST221
CST221 .FILL #13256
IGNORE_CST221
JMP R3
CMP_ELSE109
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE109
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP122
LD R3 CST222 ; R3 <- address of label EIF_ELSE122
BR IGNORE_CST222
CST222 .FILL #13269
IGNORE_CST222
JMP R3
IGNORE_JMP122
LD R0 CST120 ; R0 <- cst 0
BR IGNORE_CST120
CST120 .FILL #0
IGNORE_CST120
LD R3 CST223 ; R3 <- address of label EIF_ENDELSE122
BR IGNORE_CST223
CST223 .FILL #13272
IGNORE_CST223
JMP R3
EIF_ELSE122
LD R0 CST121 ; R0 <- cst 1
BR IGNORE_CST121
CST121 .FILL #1
IGNORE_CST121
EIF_ENDELSE122
LD R3 CST224 ; R3 <- address of label EIF_ENDELSE124
BR IGNORE_CST224
CST224 .FILL #13279
IGNORE_CST224
JMP R3
EIF_ELSE124
LD R0 CST123 ; R0 <- cst 0
BR IGNORE_CST123
CST123 .FILL #0
IGNORE_CST123
EIF_ENDELSE124
ADD R0 R0 #0
BRnp IGNORE_JMP127
LD R3 CST225 ; R3 <- address of label IF_ELSE127
BR IGNORE_CST225
CST225 .FILL #13309
IGNORE_CST225
JMP R3
IGNORE_JMP127
LD R0 CST125
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST125
CST125 .FILL #3
IGNORE_CST125
LD R1 CST126
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST126
CST126 .FILL #3
IGNORE_CST126
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST226 ; R3 <- address of label IF_ENDELSE127
BR IGNORE_CST226
CST226 .FILL #13309
IGNORE_CST226
JMP R3
IF_ELSE127
IF_ENDELSE127
LD R0 CST84
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST84
CST84 .FILL #5
IGNORE_CST84
LD R1 CST85
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST85
CST85 .FILL #5
IGNORE_CST85
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST83 ; R0 <- cst 113
BR IGNORE_CST83
CST83 .FILL #113
IGNORE_CST83
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP82
LD R3 CST227 ; R3 <- address of label CMP_ELSE82
BR IGNORE_CST227
CST227 .FILL #13346
IGNORE_CST227
JMP R3
IGNORE_JMP82
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST228 ; R3 <- address of label CMP_ENDELSE82
BR IGNORE_CST228
CST228 .FILL #13347
IGNORE_CST228
JMP R3
CMP_ELSE82
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE82
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP101
LD R3 CST229 ; R3 <- address of label EIF_ELSE101
BR IGNORE_CST229
CST229 .FILL #13486
IGNORE_CST229
JMP R3
IGNORE_JMP101
LD R0 CST95
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST95
CST95 .FILL #0
IGNORE_CST95
LD R1 CST96
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST96
CST96 .FILL #0
IGNORE_CST96
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST93
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST93
CST93 .FILL #3
IGNORE_CST93
LD R1 CST94
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST94
CST94 .FILL #3
IGNORE_CST94
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST91
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST91
CST91 .FILL #2
IGNORE_CST91
LD R1 CST92
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST92
CST92 .FILL #2
IGNORE_CST92
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST230 ; R3 <- address of label FUN_MULT
BR IGNORE_CST230
CST230 .FILL #12300
IGNORE_CST230
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST89
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST89
CST89 .FILL #4
IGNORE_CST89
LD R1 CST90
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST90
CST90 .FILL #4
IGNORE_CST90
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST88 ; R0 <- cst 1
BR IGNORE_CST88
CST88 .FILL #1
IGNORE_CST88
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST87 ; R0 <- cst 42
BR IGNORE_CST87
CST87 .FILL #42
IGNORE_CST87
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP86
LD R3 CST231 ; R3 <- address of label CMP_ELSE86
BR IGNORE_CST231
CST231 .FILL #13465
IGNORE_CST231
JMP R3
IGNORE_JMP86
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST232 ; R3 <- address of label CMP_ENDELSE86
BR IGNORE_CST232
CST232 .FILL #13466
IGNORE_CST232
JMP R3
CMP_ELSE86
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE86
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP99
LD R3 CST233 ; R3 <- address of label EIF_ELSE99
BR IGNORE_CST233
CST233 .FILL #13479
IGNORE_CST233
JMP R3
IGNORE_JMP99
LD R0 CST97 ; R0 <- cst 0
BR IGNORE_CST97
CST97 .FILL #0
IGNORE_CST97
LD R3 CST234 ; R3 <- address of label EIF_ENDELSE99
BR IGNORE_CST234
CST234 .FILL #13482
IGNORE_CST234
JMP R3
EIF_ELSE99
LD R0 CST98 ; R0 <- cst 1
BR IGNORE_CST98
CST98 .FILL #1
IGNORE_CST98
EIF_ENDELSE99
LD R3 CST235 ; R3 <- address of label EIF_ENDELSE101
BR IGNORE_CST235
CST235 .FILL #13489
IGNORE_CST235
JMP R3
EIF_ELSE101
LD R0 CST100 ; R0 <- cst 0
BR IGNORE_CST100
CST100 .FILL #0
IGNORE_CST100
EIF_ENDELSE101
ADD R0 R0 #0
BRnp IGNORE_JMP104
LD R3 CST236 ; R3 <- address of label IF_ELSE104
BR IGNORE_CST236
CST236 .FILL #13519
IGNORE_CST236
JMP R3
IGNORE_JMP104
LD R0 CST102
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST102
CST102 .FILL #4
IGNORE_CST102
LD R1 CST103
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST103
CST103 .FILL #4
IGNORE_CST103
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0
ADD R0 R0 #1 ; (lvalue)--
LD R3 CST237 ; R3 <- address of label IF_ENDELSE104
BR IGNORE_CST237
CST237 .FILL #13519
IGNORE_CST237
JMP R3
IF_ELSE104
IF_ENDELSE104
LD R0 CST61
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST61
CST61 .FILL #5
IGNORE_CST61
LD R1 CST62
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST62
CST62 .FILL #5
IGNORE_CST62
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST60 ; R0 <- cst 100
BR IGNORE_CST60
CST60 .FILL #100
IGNORE_CST60
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP59
LD R3 CST238 ; R3 <- address of label CMP_ELSE59
BR IGNORE_CST238
CST238 .FILL #13556
IGNORE_CST238
JMP R3
IGNORE_JMP59
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST239 ; R3 <- address of label CMP_ENDELSE59
BR IGNORE_CST239
CST239 .FILL #13557
IGNORE_CST239
JMP R3
CMP_ELSE59
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE59
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP78
LD R3 CST240 ; R3 <- address of label EIF_ELSE78
BR IGNORE_CST240
CST240 .FILL #13694
IGNORE_CST240
JMP R3
IGNORE_JMP78
LD R0 CST72
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST72
CST72 .FILL #0
IGNORE_CST72
LD R1 CST73
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST73
CST73 .FILL #0
IGNORE_CST73
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST70
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST70
CST70 .FILL #3
IGNORE_CST70
LD R1 CST71
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST71
CST71 .FILL #3
IGNORE_CST71
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST68
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST68
CST68 .FILL #2
IGNORE_CST68
LD R1 CST69
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST69
CST69 .FILL #2
IGNORE_CST69
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST241 ; R3 <- address of label FUN_MULT
BR IGNORE_CST241
CST241 .FILL #12300
IGNORE_CST241
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST66
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST66
CST66 .FILL #4
IGNORE_CST66
LD R1 CST67
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST67
CST67 .FILL #4
IGNORE_CST67
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST65 ; R0 <- cst 1
BR IGNORE_CST65
CST65 .FILL #1
IGNORE_CST65
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST64 ; R0 <- cst 42
BR IGNORE_CST64
CST64 .FILL #42
IGNORE_CST64
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP63
LD R3 CST242 ; R3 <- address of label CMP_ELSE63
BR IGNORE_CST242
CST242 .FILL #13673
IGNORE_CST242
JMP R3
IGNORE_JMP63
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST243 ; R3 <- address of label CMP_ENDELSE63
BR IGNORE_CST243
CST243 .FILL #13674
IGNORE_CST243
JMP R3
CMP_ELSE63
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE63
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP76
LD R3 CST244 ; R3 <- address of label EIF_ELSE76
BR IGNORE_CST244
CST244 .FILL #13687
IGNORE_CST244
JMP R3
IGNORE_JMP76
LD R0 CST74 ; R0 <- cst 0
BR IGNORE_CST74
CST74 .FILL #0
IGNORE_CST74
LD R3 CST245 ; R3 <- address of label EIF_ENDELSE76
BR IGNORE_CST245
CST245 .FILL #13690
IGNORE_CST245
JMP R3
EIF_ELSE76
LD R0 CST75 ; R0 <- cst 1
BR IGNORE_CST75
CST75 .FILL #1
IGNORE_CST75
EIF_ENDELSE76
LD R3 CST246 ; R3 <- address of label EIF_ENDELSE78
BR IGNORE_CST246
CST246 .FILL #13697
IGNORE_CST246
JMP R3
EIF_ELSE78
LD R0 CST77 ; R0 <- cst 0
BR IGNORE_CST77
CST77 .FILL #0
IGNORE_CST77
EIF_ENDELSE78
ADD R0 R0 #0
BRnp IGNORE_JMP81
LD R3 CST247 ; R3 <- address of label IF_ELSE81
BR IGNORE_CST247
CST247 .FILL #13727
IGNORE_CST247
JMP R3
IGNORE_JMP81
LD R0 CST79
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST79
CST79 .FILL #4
IGNORE_CST79
LD R1 CST80
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST80
CST80 .FILL #4
IGNORE_CST80
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST248 ; R3 <- address of label IF_ENDELSE81
BR IGNORE_CST248
CST248 .FILL #13727
IGNORE_CST248
JMP R3
IF_ELSE81
IF_ENDELSE81
LD R0 CST56
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST56
CST56 .FILL #0
IGNORE_CST56
LD R1 CST57
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST57
CST57 .FILL #0
IGNORE_CST57
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST54
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST54
CST54 .FILL #3
IGNORE_CST54
LD R1 CST55
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST55
CST55 .FILL #3
IGNORE_CST55
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST52
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST52
CST52 .FILL #2
IGNORE_CST52
LD R1 CST53
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST53
CST53 .FILL #2
IGNORE_CST53
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST249 ; R3 <- address of label FUN_MULT
BR IGNORE_CST249
CST249 .FILL #12300
IGNORE_CST249
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST50
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST50
CST50 .FILL #4
IGNORE_CST50
LD R1 CST51
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST51
CST51 .FILL #4
IGNORE_CST51
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST58
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST58
CST58 .FILL #1
IGNORE_CST58
LD R0 CST42
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST42
CST42 .FILL #1
IGNORE_CST42
LD R1 CST43
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST43
CST43 .FILL #1
IGNORE_CST43
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST41 ; R0 <- cst 45
BR IGNORE_CST41
CST41 .FILL #45
IGNORE_CST41
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP40
LD R3 CST250 ; R3 <- address of label CMP_ELSE40
BR IGNORE_CST250
CST250 .FILL #13851
IGNORE_CST250
JMP R3
IGNORE_JMP40
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST251 ; R3 <- address of label CMP_ENDELSE40
BR IGNORE_CST251
CST251 .FILL #13852
IGNORE_CST251
JMP R3
CMP_ELSE40
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE40
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP49
LD R3 CST252 ; R3 <- address of label IF_ELSE49
BR IGNORE_CST252
CST252 .FILL #13899
IGNORE_CST252
JMP R3
IGNORE_JMP49
LD R0 CST47 ; R0 <- cst 79
BR IGNORE_CST47
CST47 .FILL #79
IGNORE_CST47
LD R1 CST48
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST48
CST48 .FILL #1
IGNORE_CST48

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST45
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST45
CST45 .FILL #0
IGNORE_CST45
LD R1 CST46
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST46
CST46 .FILL #0
IGNORE_CST46
PUTS
LD R0 CST253 ; R0 <- address of label STRING3
BR IGNORE_CST253
CST253 .FILL #14032
IGNORE_CST253
PUTS
LD R0 CST44 ; R0 <- cst 0
BR IGNORE_CST44
CST44 .FILL #0
IGNORE_CST44
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
LD R3 CST254 ; R3 <- address of label IF_ENDELSE49
BR IGNORE_CST254
CST254 .FILL #13899
IGNORE_CST254
JMP R3
IF_ELSE49
IF_ENDELSE49
LD R0 CST38 ; R0 <- cst 79
BR IGNORE_CST38
CST38 .FILL #79
IGNORE_CST38
LD R1 CST39
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST39
CST39 .FILL #1
IGNORE_CST39

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST35
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST35
CST35 .FILL #0
IGNORE_CST35
LD R1 CST36
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST36
CST36 .FILL #0
IGNORE_CST36
ADD R6 R6 #-1
STR R0 R6 #0
LD R3 CST255 ; R3 <- address of label FUN_USER_printmaze
BR IGNORE_CST255
CST255 .FILL #12564
IGNORE_CST255
JSRR R3
LD R1 CST37
ADD R6 R6 R1
BR IGNORE_CST37
CST37 .FILL #1
IGNORE_CST37
LD R0 CST33 ; R0 <- cst 46
BR IGNORE_CST33
CST33 .FILL #46
IGNORE_CST33
LD R1 CST34
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST34
CST34 .FILL #1
IGNORE_CST34

STR R0 R1 #0 ; R0 <- M[R1]
LD R3 CST256 ; R3 <- address of label STARTWHILE25
BR IGNORE_CST256
CST256 .FILL #12830
IGNORE_CST256
JMP R3
ENDWHILE25
LD R0 CST25 ; R0 <- cst 0
BR IGNORE_CST25
CST25 .FILL #0
IGNORE_CST25
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
STRINGS
STRING1 .STRINGZ "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" ; 58
STRING2 .STRINGZ "Press e to exit\n" ; 16
STRING3 .STRINGZ "You won !\n" ; 10
STRING4 .STRINGZ "**************************************************\n*.**...*....**............********....************\n*.**.*...**.**.****.*****..........**..*.....*****\n*....******....****..*****************.*.***.***-*\n*.*****.....**********.........*.*..**.*.***.*.*.*\n*.*****.*******....***.*******.*.**.**.*.***...*.*\n*.*****.*******.**.....***...*.*.**.**...*******.*\n*.*****.****....**********.*.***.**.********.....*\n*.*****......*************.*.....**..*******.*****\n*.*************.....****...*****.***.*******.*****\n*...............***......*******.............*****\n**************************************************\n" ; 612
STATIC_VAR
LVALUE_ADDR .BLKW #1
V_res .BLKW #1

.END
; mem 14656 14657
