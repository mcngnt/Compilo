.ORIG x3000
LD R6 CST184 ; Init R6 value to the start of the stack
BR IGNORE_CST184
CST184 .FILL #65023
IGNORE_CST184
ADD R5 R6 #0
LD R4 CST185 ; R4 <- address of label STATIC_VAR
BR IGNORE_CST185
CST185 .FILL #14677
IGNORE_CST185
ADD R4 R4 #1
LD R3 CST186 ; R3 <- address of label FUN_USER_main
BR IGNORE_CST186
CST186 .FILL #12595
IGNORE_CST186
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_clear
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST187 ; R0 <- address of label STRING1
BR IGNORE_CST187
CST187 .FILL #13977
IGNORE_CST187
PUTS
LD R0 CST1 ; R0 <- cst 0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
FUN_USER_getwidth
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable n to the stack 
LD R0 CST20 ; R0 <- cst 1
BR IGNORE_CST20
CST20 .FILL #1
IGNORE_CST20
LD R1 CST21
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST21
CST21 .FILL #0
IGNORE_CST21
STARTWHILE3
LD R0 CST9
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST9
CST9 .FILL #-3
IGNORE_CST9
LD R1 CST10
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST10
CST10 .FILL #-3
IGNORE_CST10
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
ADD R0 R0 #0
BRnp IGNORE_JMP19
LD R3 CST188 ; R3 <- address of label EIF_ELSE19
BR IGNORE_CST188
CST188 .FILL #12493
IGNORE_CST188
JMP R3
IGNORE_JMP19
LD R0 CST13
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST13
CST13 .FILL #-3
IGNORE_CST13
LD R1 CST14
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST14
CST14 .FILL #-3
IGNORE_CST14
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST12 ; R0 <- cst 10
BR IGNORE_CST12
CST12 .FILL #10
IGNORE_CST12
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP11
LD R3 CST189 ; R3 <- address of label CMP_ELSE11
BR IGNORE_CST189
CST189 .FILL #12472
IGNORE_CST189
JMP R3
IGNORE_JMP11
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST190 ; R3 <- address of label CMP_ENDELSE11
BR IGNORE_CST190
CST190 .FILL #12473
IGNORE_CST190
JMP R3
CMP_ELSE11
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE11
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP17
LD R3 CST191 ; R3 <- address of label EIF_ELSE17
BR IGNORE_CST191
CST191 .FILL #12486
IGNORE_CST191
JMP R3
IGNORE_JMP17
LD R0 CST15 ; R0 <- cst 0
BR IGNORE_CST15
CST15 .FILL #0
IGNORE_CST15
LD R3 CST192 ; R3 <- address of label EIF_ENDELSE17
BR IGNORE_CST192
CST192 .FILL #12489
IGNORE_CST192
JMP R3
EIF_ELSE17
LD R0 CST16 ; R0 <- cst 1
BR IGNORE_CST16
CST16 .FILL #1
IGNORE_CST16
EIF_ENDELSE17
LD R3 CST193 ; R3 <- address of label EIF_ENDELSE19
BR IGNORE_CST193
CST193 .FILL #12496
IGNORE_CST193
JMP R3
EIF_ELSE19
LD R0 CST18 ; R0 <- cst 0
BR IGNORE_CST18
CST18 .FILL #0
IGNORE_CST18
EIF_ENDELSE19
BRnp IGNORE_JMP3
LD R3 CST194 ; R3 <- address of label ENDWHILE3
BR IGNORE_CST194
CST194 .FILL #12545
IGNORE_CST194
JMP R3
IGNORE_JMP3
LD R0 CST5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST5
CST5 .FILL #0
IGNORE_CST5
LD R1 CST6
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST6
CST6 .FILL #0
IGNORE_CST6
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R0 CST7
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST7
CST7 .FILL #-3
IGNORE_CST7
LD R1 CST8
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST8
CST8 .FILL #-3
IGNORE_CST8
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST195 ; R3 <- address of label STARTWHILE3
BR IGNORE_CST195
CST195 .FILL #12410
IGNORE_CST195
JMP R3
ENDWHILE3
LD R0 CST2
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST2
CST2 .FILL #0
IGNORE_CST2
LD R1 CST3
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST3
CST3 .FILL #0
IGNORE_CST3
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
FUN_USER_printmaze
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST23
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST23
CST23 .FILL #-3
IGNORE_CST23
LD R1 CST24
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST24
CST24 .FILL #-3
IGNORE_CST24
PUTS
LD R0 CST196 ; R0 <- address of label STRING2
BR IGNORE_CST196
CST196 .FILL #14036
IGNORE_CST196
PUTS
LD R0 CST22 ; R0 <- cst 0
BR IGNORE_CST22
CST22 .FILL #0
IGNORE_CST22
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
FUN_USER_main
ADD R6 R6 #-1
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable maze to the stack 
ADD R6 R6 #-1 ; Add variable pos to the stack 
ADD R6 R6 #-1 ; Add variable width to the stack 
ADD R6 R6 #-1 ; Add variable y to the stack 
ADD R6 R6 #-1 ; Add variable x to the stack 
ADD R6 R6 #-1 ; Add variable ch to the stack 
LD R0 CST197 ; R0 <- address of label STRING4
BR IGNORE_CST197
CST197 .FILL #14064
IGNORE_CST197
LD R1 CST183
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST183
CST183 .FILL #0
IGNORE_CST183
LD R3 CST198 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST198
CST198 .FILL #12377
IGNORE_CST198
JSRR R3
LD R1 CST182
ADD R6 R6 R1
BR IGNORE_CST182
CST182 .FILL #0
IGNORE_CST182
LD R0 CST180 ; R0 <- cst 1
BR IGNORE_CST180
CST180 .FILL #1
IGNORE_CST180
LD R1 CST181
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST181
CST181 .FILL #4
IGNORE_CST181
LD R0 CST178 ; R0 <- cst 1
BR IGNORE_CST178
CST178 .FILL #1
IGNORE_CST178
LD R1 CST179
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST179
CST179 .FILL #3
IGNORE_CST179
LD R0 CST174
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST174
CST174 .FILL #0
IGNORE_CST174
LD R1 CST175
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST175
CST175 .FILL #0
IGNORE_CST175
ADD R6 R6 #-1
STR R0 R6 #0
LD R3 CST199 ; R3 <- address of label FUN_USER_getwidth
BR IGNORE_CST199
CST199 .FILL #12393
IGNORE_CST199
JSRR R3
LD R1 CST176
ADD R6 R6 R1
BR IGNORE_CST176
CST176 .FILL #1
IGNORE_CST176
LD R1 CST177
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST177
CST177 .FILL #2
IGNORE_CST177
LD R0 CST171
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST171
CST171 .FILL #2
IGNORE_CST171
LD R1 CST172
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST172
CST172 .FILL #2
IGNORE_CST172
LD R1 CST173
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST173
CST173 .FILL #0
IGNORE_CST173
LD R0 CST168
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST168
CST168 .FILL #0
IGNORE_CST168
LD R1 CST169
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST169
CST169 .FILL #0
IGNORE_CST169
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST166
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST166
CST166 .FILL #3
IGNORE_CST166
LD R1 CST167
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST167
CST167 .FILL #3
IGNORE_CST167
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST164
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST164
CST164 .FILL #2
IGNORE_CST164
LD R1 CST165
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST165
CST165 .FILL #2
IGNORE_CST165
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST200 ; R3 <- address of label FUN_MULT
BR IGNORE_CST200
CST200 .FILL #12300
IGNORE_CST200
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST162
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST162
CST162 .FILL #4
IGNORE_CST162
LD R1 CST163
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST163
CST163 .FILL #4
IGNORE_CST163
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST170
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST170
CST170 .FILL #1
IGNORE_CST170
LD R0 CST160 ; R0 <- cst 79
BR IGNORE_CST160
CST160 .FILL #79
IGNORE_CST160
LD R1 CST161
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST161
CST161 .FILL #1
IGNORE_CST161

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST157
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST157
CST157 .FILL #0
IGNORE_CST157
LD R1 CST158
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST158
CST158 .FILL #0
IGNORE_CST158
ADD R6 R6 #-1
STR R0 R6 #0
LD R3 CST201 ; R3 <- address of label FUN_USER_printmaze
BR IGNORE_CST201
CST201 .FILL #12563
IGNORE_CST201
JSRR R3
LD R1 CST159
ADD R6 R6 R1
BR IGNORE_CST159
CST159 .FILL #1
IGNORE_CST159
LD R0 CST155 ; R0 <- cst 46
BR IGNORE_CST155
CST155 .FILL #46
IGNORE_CST155
LD R1 CST156
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST156
CST156 .FILL #1
IGNORE_CST156

STR R0 R1 #0 ; R0 <- M[R1]
GETC
LD R1 CST154
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST154
CST154 .FILL #5
IGNORE_CST154
STARTWHILE25
LD R0 CST149
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST149
CST149 .FILL #5
IGNORE_CST149
LD R1 CST150
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST150
CST150 .FILL #5
IGNORE_CST150
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST148 ; R0 <- cst 101
BR IGNORE_CST148
CST148 .FILL #101
IGNORE_CST148
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP147
LD R3 CST202 ; R3 <- address of label CMP_ELSE147
BR IGNORE_CST202
CST202 .FILL #12874
IGNORE_CST202
JMP R3
IGNORE_JMP147
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST203 ; R3 <- address of label CMP_ENDELSE147
BR IGNORE_CST203
CST203 .FILL #12875
IGNORE_CST203
JMP R3
CMP_ELSE147
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE147
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP153
LD R3 CST204 ; R3 <- address of label EIF_ELSE153
BR IGNORE_CST204
CST204 .FILL #12888
IGNORE_CST204
JMP R3
IGNORE_JMP153
LD R0 CST151 ; R0 <- cst 0
BR IGNORE_CST151
CST151 .FILL #0
IGNORE_CST151
LD R3 CST205 ; R3 <- address of label EIF_ENDELSE153
BR IGNORE_CST205
CST205 .FILL #12891
IGNORE_CST205
JMP R3
EIF_ELSE153
LD R0 CST152 ; R0 <- cst 1
BR IGNORE_CST152
CST152 .FILL #1
IGNORE_CST152
EIF_ENDELSE153
BRnp IGNORE_JMP25
LD R3 CST206 ; R3 <- address of label ENDWHILE25
BR IGNORE_CST206
CST206 .FILL #13971
IGNORE_CST206
JMP R3
IGNORE_JMP25
LD R3 CST207 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST207
CST207 .FILL #12377
IGNORE_CST207
JSRR R3
LD R1 CST146
ADD R6 R6 R1
BR IGNORE_CST146
CST146 .FILL #0
IGNORE_CST146
LD R0 CST125
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST125
CST125 .FILL #5
IGNORE_CST125
LD R1 CST126
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST126
CST126 .FILL #5
IGNORE_CST126
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST124 ; R0 <- cst 122
BR IGNORE_CST124
CST124 .FILL #122
IGNORE_CST124
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP123
LD R3 CST208 ; R3 <- address of label CMP_ELSE123
BR IGNORE_CST208
CST208 .FILL #12941
IGNORE_CST208
JMP R3
IGNORE_JMP123
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST209 ; R3 <- address of label CMP_ENDELSE123
BR IGNORE_CST209
CST209 .FILL #12942
IGNORE_CST209
JMP R3
CMP_ELSE123
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE123
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP142
LD R3 CST210 ; R3 <- address of label EIF_ELSE142
BR IGNORE_CST210
CST210 .FILL #13081
IGNORE_CST210
JMP R3
IGNORE_JMP142
LD R0 CST136
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST136
CST136 .FILL #0
IGNORE_CST136
LD R1 CST137
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST137
CST137 .FILL #0
IGNORE_CST137
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST134
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST134
CST134 .FILL #3
IGNORE_CST134
LD R1 CST135
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST135
CST135 .FILL #3
IGNORE_CST135
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST133 ; R0 <- cst 1
BR IGNORE_CST133
CST133 .FILL #1
IGNORE_CST133
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST131
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST131
CST131 .FILL #2
IGNORE_CST131
LD R1 CST132
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST132
CST132 .FILL #2
IGNORE_CST132
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST211 ; R3 <- address of label FUN_MULT
BR IGNORE_CST211
CST211 .FILL #12300
IGNORE_CST211
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST129
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST129
CST129 .FILL #4
IGNORE_CST129
LD R1 CST130
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST130
CST130 .FILL #4
IGNORE_CST130
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST128 ; R0 <- cst 42
BR IGNORE_CST128
CST128 .FILL #42
IGNORE_CST128
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP127
LD R3 CST212 ; R3 <- address of label CMP_ELSE127
BR IGNORE_CST212
CST212 .FILL #13060
IGNORE_CST212
JMP R3
IGNORE_JMP127
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST213 ; R3 <- address of label CMP_ENDELSE127
BR IGNORE_CST213
CST213 .FILL #13061
IGNORE_CST213
JMP R3
CMP_ELSE127
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE127
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP140
LD R3 CST214 ; R3 <- address of label EIF_ELSE140
BR IGNORE_CST214
CST214 .FILL #13074
IGNORE_CST214
JMP R3
IGNORE_JMP140
LD R0 CST138 ; R0 <- cst 0
BR IGNORE_CST138
CST138 .FILL #0
IGNORE_CST138
LD R3 CST215 ; R3 <- address of label EIF_ENDELSE140
BR IGNORE_CST215
CST215 .FILL #13077
IGNORE_CST215
JMP R3
EIF_ELSE140
LD R0 CST139 ; R0 <- cst 1
BR IGNORE_CST139
CST139 .FILL #1
IGNORE_CST139
EIF_ENDELSE140
LD R3 CST216 ; R3 <- address of label EIF_ENDELSE142
BR IGNORE_CST216
CST216 .FILL #13084
IGNORE_CST216
JMP R3
EIF_ELSE142
LD R0 CST141 ; R0 <- cst 0
BR IGNORE_CST141
CST141 .FILL #0
IGNORE_CST141
EIF_ENDELSE142
ADD R0 R0 #0
BRnp IGNORE_JMP145
LD R3 CST217 ; R3 <- address of label IF_ELSE145
BR IGNORE_CST217
CST217 .FILL #13114
IGNORE_CST217
JMP R3
IGNORE_JMP145
LD R0 CST143
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST143
CST143 .FILL #3
IGNORE_CST143
LD R1 CST144
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST144
CST144 .FILL #3
IGNORE_CST144
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0
ADD R0 R0 #1 ; (lvalue)--
LD R3 CST218 ; R3 <- address of label IF_ENDELSE145
BR IGNORE_CST218
CST218 .FILL #13114
IGNORE_CST218
JMP R3
IF_ELSE145
IF_ENDELSE145
LD R0 CST102
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST102
CST102 .FILL #5
IGNORE_CST102
LD R1 CST103
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST103
CST103 .FILL #5
IGNORE_CST103
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST101 ; R0 <- cst 115
BR IGNORE_CST101
CST101 .FILL #115
IGNORE_CST101
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP100
LD R3 CST219 ; R3 <- address of label CMP_ELSE100
BR IGNORE_CST219
CST219 .FILL #13151
IGNORE_CST219
JMP R3
IGNORE_JMP100
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST220 ; R3 <- address of label CMP_ENDELSE100
BR IGNORE_CST220
CST220 .FILL #13152
IGNORE_CST220
JMP R3
CMP_ELSE100
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE100
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP119
LD R3 CST221 ; R3 <- address of label EIF_ELSE119
BR IGNORE_CST221
CST221 .FILL #13289
IGNORE_CST221
JMP R3
IGNORE_JMP119
LD R0 CST113
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST113
CST113 .FILL #0
IGNORE_CST113
LD R1 CST114
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST114
CST114 .FILL #0
IGNORE_CST114
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST111
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST111
CST111 .FILL #3
IGNORE_CST111
LD R1 CST112
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST112
CST112 .FILL #3
IGNORE_CST112
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST110 ; R0 <- cst 1
BR IGNORE_CST110
CST110 .FILL #1
IGNORE_CST110
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST108
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST108
CST108 .FILL #2
IGNORE_CST108
LD R1 CST109
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST109
CST109 .FILL #2
IGNORE_CST109
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST222 ; R3 <- address of label FUN_MULT
BR IGNORE_CST222
CST222 .FILL #12300
IGNORE_CST222
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST106
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST106
CST106 .FILL #4
IGNORE_CST106
LD R1 CST107
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST107
CST107 .FILL #4
IGNORE_CST107
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST105 ; R0 <- cst 42
BR IGNORE_CST105
CST105 .FILL #42
IGNORE_CST105
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP104
LD R3 CST223 ; R3 <- address of label CMP_ELSE104
BR IGNORE_CST223
CST223 .FILL #13268
IGNORE_CST223
JMP R3
IGNORE_JMP104
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST224 ; R3 <- address of label CMP_ENDELSE104
BR IGNORE_CST224
CST224 .FILL #13269
IGNORE_CST224
JMP R3
CMP_ELSE104
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE104
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP117
LD R3 CST225 ; R3 <- address of label EIF_ELSE117
BR IGNORE_CST225
CST225 .FILL #13282
IGNORE_CST225
JMP R3
IGNORE_JMP117
LD R0 CST115 ; R0 <- cst 0
BR IGNORE_CST115
CST115 .FILL #0
IGNORE_CST115
LD R3 CST226 ; R3 <- address of label EIF_ENDELSE117
BR IGNORE_CST226
CST226 .FILL #13285
IGNORE_CST226
JMP R3
EIF_ELSE117
LD R0 CST116 ; R0 <- cst 1
BR IGNORE_CST116
CST116 .FILL #1
IGNORE_CST116
EIF_ENDELSE117
LD R3 CST227 ; R3 <- address of label EIF_ENDELSE119
BR IGNORE_CST227
CST227 .FILL #13292
IGNORE_CST227
JMP R3
EIF_ELSE119
LD R0 CST118 ; R0 <- cst 0
BR IGNORE_CST118
CST118 .FILL #0
IGNORE_CST118
EIF_ENDELSE119
ADD R0 R0 #0
BRnp IGNORE_JMP122
LD R3 CST228 ; R3 <- address of label IF_ELSE122
BR IGNORE_CST228
CST228 .FILL #13322
IGNORE_CST228
JMP R3
IGNORE_JMP122
LD R0 CST120
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST120
CST120 .FILL #3
IGNORE_CST120
LD R1 CST121
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST121
CST121 .FILL #3
IGNORE_CST121
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST229 ; R3 <- address of label IF_ENDELSE122
BR IGNORE_CST229
CST229 .FILL #13322
IGNORE_CST229
JMP R3
IF_ELSE122
IF_ENDELSE122
LD R0 CST79
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST79
CST79 .FILL #5
IGNORE_CST79
LD R1 CST80
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST80
CST80 .FILL #5
IGNORE_CST80
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST78 ; R0 <- cst 113
BR IGNORE_CST78
CST78 .FILL #113
IGNORE_CST78
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP77
LD R3 CST230 ; R3 <- address of label CMP_ELSE77
BR IGNORE_CST230
CST230 .FILL #13359
IGNORE_CST230
JMP R3
IGNORE_JMP77
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST231 ; R3 <- address of label CMP_ENDELSE77
BR IGNORE_CST231
CST231 .FILL #13360
IGNORE_CST231
JMP R3
CMP_ELSE77
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE77
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP96
LD R3 CST232 ; R3 <- address of label EIF_ELSE96
BR IGNORE_CST232
CST232 .FILL #13499
IGNORE_CST232
JMP R3
IGNORE_JMP96
LD R0 CST90
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST90
CST90 .FILL #0
IGNORE_CST90
LD R1 CST91
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST91
CST91 .FILL #0
IGNORE_CST91
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST88
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST88
CST88 .FILL #3
IGNORE_CST88
LD R1 CST89
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST89
CST89 .FILL #3
IGNORE_CST89
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST86
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST86
CST86 .FILL #2
IGNORE_CST86
LD R1 CST87
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST87
CST87 .FILL #2
IGNORE_CST87
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST233 ; R3 <- address of label FUN_MULT
BR IGNORE_CST233
CST233 .FILL #12300
IGNORE_CST233
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST84
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST84
CST84 .FILL #4
IGNORE_CST84
LD R1 CST85
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST85
CST85 .FILL #4
IGNORE_CST85
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST83 ; R0 <- cst 1
BR IGNORE_CST83
CST83 .FILL #1
IGNORE_CST83
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST82 ; R0 <- cst 42
BR IGNORE_CST82
CST82 .FILL #42
IGNORE_CST82
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP81
LD R3 CST234 ; R3 <- address of label CMP_ELSE81
BR IGNORE_CST234
CST234 .FILL #13478
IGNORE_CST234
JMP R3
IGNORE_JMP81
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST235 ; R3 <- address of label CMP_ENDELSE81
BR IGNORE_CST235
CST235 .FILL #13479
IGNORE_CST235
JMP R3
CMP_ELSE81
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE81
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP94
LD R3 CST236 ; R3 <- address of label EIF_ELSE94
BR IGNORE_CST236
CST236 .FILL #13492
IGNORE_CST236
JMP R3
IGNORE_JMP94
LD R0 CST92 ; R0 <- cst 0
BR IGNORE_CST92
CST92 .FILL #0
IGNORE_CST92
LD R3 CST237 ; R3 <- address of label EIF_ENDELSE94
BR IGNORE_CST237
CST237 .FILL #13495
IGNORE_CST237
JMP R3
EIF_ELSE94
LD R0 CST93 ; R0 <- cst 1
BR IGNORE_CST93
CST93 .FILL #1
IGNORE_CST93
EIF_ENDELSE94
LD R3 CST238 ; R3 <- address of label EIF_ENDELSE96
BR IGNORE_CST238
CST238 .FILL #13502
IGNORE_CST238
JMP R3
EIF_ELSE96
LD R0 CST95 ; R0 <- cst 0
BR IGNORE_CST95
CST95 .FILL #0
IGNORE_CST95
EIF_ENDELSE96
ADD R0 R0 #0
BRnp IGNORE_JMP99
LD R3 CST239 ; R3 <- address of label IF_ELSE99
BR IGNORE_CST239
CST239 .FILL #13532
IGNORE_CST239
JMP R3
IGNORE_JMP99
LD R0 CST97
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST97
CST97 .FILL #4
IGNORE_CST97
LD R1 CST98
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST98
CST98 .FILL #4
IGNORE_CST98
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0
ADD R0 R0 #1 ; (lvalue)--
LD R3 CST240 ; R3 <- address of label IF_ENDELSE99
BR IGNORE_CST240
CST240 .FILL #13532
IGNORE_CST240
JMP R3
IF_ELSE99
IF_ENDELSE99
LD R0 CST56
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST56
CST56 .FILL #5
IGNORE_CST56
LD R1 CST57
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST57
CST57 .FILL #5
IGNORE_CST57
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST55 ; R0 <- cst 100
BR IGNORE_CST55
CST55 .FILL #100
IGNORE_CST55
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP54
LD R3 CST241 ; R3 <- address of label CMP_ELSE54
BR IGNORE_CST241
CST241 .FILL #13569
IGNORE_CST241
JMP R3
IGNORE_JMP54
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST242 ; R3 <- address of label CMP_ENDELSE54
BR IGNORE_CST242
CST242 .FILL #13570
IGNORE_CST242
JMP R3
CMP_ELSE54
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE54
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP73
LD R3 CST243 ; R3 <- address of label EIF_ELSE73
BR IGNORE_CST243
CST243 .FILL #13707
IGNORE_CST243
JMP R3
IGNORE_JMP73
LD R0 CST67
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST67
CST67 .FILL #0
IGNORE_CST67
LD R1 CST68
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST68
CST68 .FILL #0
IGNORE_CST68
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST65
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST65
CST65 .FILL #3
IGNORE_CST65
LD R1 CST66
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST66
CST66 .FILL #3
IGNORE_CST66
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST63
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST63
CST63 .FILL #2
IGNORE_CST63
LD R1 CST64
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST64
CST64 .FILL #2
IGNORE_CST64
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST244 ; R3 <- address of label FUN_MULT
BR IGNORE_CST244
CST244 .FILL #12300
IGNORE_CST244
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST61
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST61
CST61 .FILL #4
IGNORE_CST61
LD R1 CST62
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST62
CST62 .FILL #4
IGNORE_CST62
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST60 ; R0 <- cst 1
BR IGNORE_CST60
CST60 .FILL #1
IGNORE_CST60
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST59 ; R0 <- cst 42
BR IGNORE_CST59
CST59 .FILL #42
IGNORE_CST59
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP58
LD R3 CST245 ; R3 <- address of label CMP_ELSE58
BR IGNORE_CST245
CST245 .FILL #13686
IGNORE_CST245
JMP R3
IGNORE_JMP58
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST246 ; R3 <- address of label CMP_ENDELSE58
BR IGNORE_CST246
CST246 .FILL #13687
IGNORE_CST246
JMP R3
CMP_ELSE58
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE58
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP71
LD R3 CST247 ; R3 <- address of label EIF_ELSE71
BR IGNORE_CST247
CST247 .FILL #13700
IGNORE_CST247
JMP R3
IGNORE_JMP71
LD R0 CST69 ; R0 <- cst 0
BR IGNORE_CST69
CST69 .FILL #0
IGNORE_CST69
LD R3 CST248 ; R3 <- address of label EIF_ENDELSE71
BR IGNORE_CST248
CST248 .FILL #13703
IGNORE_CST248
JMP R3
EIF_ELSE71
LD R0 CST70 ; R0 <- cst 1
BR IGNORE_CST70
CST70 .FILL #1
IGNORE_CST70
EIF_ENDELSE71
LD R3 CST249 ; R3 <- address of label EIF_ENDELSE73
BR IGNORE_CST249
CST249 .FILL #13710
IGNORE_CST249
JMP R3
EIF_ELSE73
LD R0 CST72 ; R0 <- cst 0
BR IGNORE_CST72
CST72 .FILL #0
IGNORE_CST72
EIF_ENDELSE73
ADD R0 R0 #0
BRnp IGNORE_JMP76
LD R3 CST250 ; R3 <- address of label IF_ELSE76
BR IGNORE_CST250
CST250 .FILL #13740
IGNORE_CST250
JMP R3
IGNORE_JMP76
LD R0 CST74
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST74
CST74 .FILL #4
IGNORE_CST74
LD R1 CST75
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST75
CST75 .FILL #4
IGNORE_CST75
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST251 ; R3 <- address of label IF_ENDELSE76
BR IGNORE_CST251
CST251 .FILL #13740
IGNORE_CST251
JMP R3
IF_ELSE76
IF_ENDELSE76
LD R0 CST51
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST51
CST51 .FILL #0
IGNORE_CST51
LD R1 CST52
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST52
CST52 .FILL #0
IGNORE_CST52
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST49
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST49
CST49 .FILL #3
IGNORE_CST49
LD R1 CST50
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST50
CST50 .FILL #3
IGNORE_CST50
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST47
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST47
CST47 .FILL #2
IGNORE_CST47
LD R1 CST48
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST48
CST48 .FILL #2
IGNORE_CST48
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST252 ; R3 <- address of label FUN_MULT
BR IGNORE_CST252
CST252 .FILL #12300
IGNORE_CST252
JSRR R3 ; Multiply R0 and R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST45
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST45
CST45 .FILL #4
IGNORE_CST45
LD R1 CST46
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST46
CST46 .FILL #4
IGNORE_CST46
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST53
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST53
CST53 .FILL #1
IGNORE_CST53
LD R0 CST37
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST37
CST37 .FILL #1
IGNORE_CST37
LD R1 CST38
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST38
CST38 .FILL #1
IGNORE_CST38
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST36 ; R0 <- cst 45
BR IGNORE_CST36
CST36 .FILL #45
IGNORE_CST36
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP35
LD R3 CST253 ; R3 <- address of label CMP_ELSE35
BR IGNORE_CST253
CST253 .FILL #13864
IGNORE_CST253
JMP R3
IGNORE_JMP35
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST254 ; R3 <- address of label CMP_ENDELSE35
BR IGNORE_CST254
CST254 .FILL #13865
IGNORE_CST254
JMP R3
CMP_ELSE35
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE35
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP44
LD R3 CST255 ; R3 <- address of label IF_ELSE44
BR IGNORE_CST255
CST255 .FILL #13912
IGNORE_CST255
JMP R3
IGNORE_JMP44
LD R0 CST42 ; R0 <- cst 79
BR IGNORE_CST42
CST42 .FILL #79
IGNORE_CST42
LD R1 CST43
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST43
CST43 .FILL #1
IGNORE_CST43

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST40
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST40
CST40 .FILL #0
IGNORE_CST40
LD R1 CST41
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST41
CST41 .FILL #0
IGNORE_CST41
PUTS
LD R0 CST256 ; R0 <- address of label STRING3
BR IGNORE_CST256
CST256 .FILL #14053
IGNORE_CST256
PUTS
LD R0 CST39 ; R0 <- cst 0
BR IGNORE_CST39
CST39 .FILL #0
IGNORE_CST39
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
LD R3 CST257 ; R3 <- address of label IF_ENDELSE44
BR IGNORE_CST257
CST257 .FILL #13912
IGNORE_CST257
JMP R3
IF_ELSE44
IF_ENDELSE44
LD R0 CST33 ; R0 <- cst 79
BR IGNORE_CST33
CST33 .FILL #79
IGNORE_CST33
LD R1 CST34
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST34
CST34 .FILL #1
IGNORE_CST34

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST30
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST30
CST30 .FILL #0
IGNORE_CST30
LD R1 CST31
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST31
CST31 .FILL #0
IGNORE_CST31
ADD R6 R6 #-1
STR R0 R6 #0
LD R3 CST258 ; R3 <- address of label FUN_USER_printmaze
BR IGNORE_CST258
CST258 .FILL #12563
IGNORE_CST258
JSRR R3
LD R1 CST32
ADD R6 R6 R1
BR IGNORE_CST32
CST32 .FILL #1
IGNORE_CST32
LD R0 CST28 ; R0 <- cst 46
BR IGNORE_CST28
CST28 .FILL #46
IGNORE_CST28
LD R1 CST29
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST29
CST29 .FILL #1
IGNORE_CST29

STR R0 R1 #0 ; R0 <- M[R1]
GETC
LD R1 CST27
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST27
CST27 .FILL #5
IGNORE_CST27
LD R3 CST259 ; R3 <- address of label STARTWHILE25
BR IGNORE_CST259
CST259 .FILL #12837
IGNORE_CST259
JMP R3
ENDWHILE25
LD R0 CST25 ; R0 <- cst 0
BR IGNORE_CST25
CST25 .FILL #0
IGNORE_CST25
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
STRINGS
STRING1 .STRINGZ "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" ; 58
STRING2 .STRINGZ "Press e to exit\n" ; 16
STRING3 .STRINGZ "You won !\n" ; 10
STRING4 .STRINGZ "**************************************************\n*.**...*....**............********....************\n*.**.*...**.**.****.*****..........**..*.....*****\n*....******....****..*****************.*.***.***-*\n*.*****.....**********.........*.*..**.*.***.*.*.*\n*.*****.*******....***.*******.*.**.**.*.***...*.*\n*.*****.*******.**.....***...*.*.**.**...*******.*\n*.*****.****....**********.*.***.**.********.....*\n*.*****......*************.*.....**..*******.*****\n*.*************.....****...*****.***.*******.*****\n*...............***......*******.............*****\n**************************************************\n" ; 612
STATIC_VAR
LVALUE_ADDR .BLKW #1
V_res .BLKW #1

.END
; mem 14677 14678
