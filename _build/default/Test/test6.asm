.ORIG x3000
LD R6 CST33 ; Init R6 value to the start of the stack
BR IGNORE_CST33
CST33 .FILL #65023
IGNORE_CST33
ADD R5 R6 #0
LD R4 CST34 ; R4 <- address of label STATIC_VAR
BR IGNORE_CST34
CST34 .FILL #12681
IGNORE_CST34
ADD R4 R4 #1
LD R3 CST35 ; R3 <- address of label FUN_USER_main
BR IGNORE_CST35
CST35 .FILL #12635
IGNORE_CST35
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_f
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST20
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST20
CST20 .FILL #-5
IGNORE_CST20
LD R1 CST21
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST21
CST21 .FILL #-5
IGNORE_CST21
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST22 ; R0 <- cst 1
BR IGNORE_CST22
CST22 .FILL #1
IGNORE_CST22
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP23
LD R3 CST36 ; R3 <- address of label CMP_ELSE23
BR IGNORE_CST36
CST36 .FILL #12422
IGNORE_CST36
JMP R3
IGNORE_JMP23
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST37 ; R3 <- address of label CMP_ENDELSE23
BR IGNORE_CST37
CST37 .FILL #12423
IGNORE_CST37
JMP R3
CMP_ELSE23
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE23
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP26
LD R3 CST38 ; R3 <- address of label IF_ELSE26
BR IGNORE_CST38
CST38 .FILL #12452
IGNORE_CST38
JMP R3
IGNORE_JMP26
LD R0 CST24
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST24
CST24 .FILL #-4
IGNORE_CST24
LD R1 CST25
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST25
CST25 .FILL #-4
IGNORE_CST25
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
LD R3 CST39 ; R3 <- address of label IF_ENDELSE26
BR IGNORE_CST39
CST39 .FILL #12452
IGNORE_CST39
JMP R3
IF_ELSE26
IF_ENDELSE26
LD R0 CST13
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST13
CST13 .FILL #-4
IGNORE_CST13
LD R1 CST14
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST14
CST14 .FILL #-4
IGNORE_CST14
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST15 ; R0 <- cst 1
BR IGNORE_CST15
CST15 .FILL #1
IGNORE_CST15
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP16
LD R3 CST40 ; R3 <- address of label CMP_ELSE16
BR IGNORE_CST40
CST40 .FILL #12489
IGNORE_CST40
JMP R3
IGNORE_JMP16
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST41 ; R3 <- address of label CMP_ENDELSE16
BR IGNORE_CST41
CST41 .FILL #12490
IGNORE_CST41
JMP R3
CMP_ELSE16
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE16
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP19
LD R3 CST42 ; R3 <- address of label IF_ELSE19
BR IGNORE_CST42
CST42 .FILL #12519
IGNORE_CST42
JMP R3
IGNORE_JMP19
LD R0 CST17
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST17
CST17 .FILL #-5
IGNORE_CST17
LD R1 CST18
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST18
CST18 .FILL #-5
IGNORE_CST18
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
LD R3 CST43 ; R3 <- address of label IF_ENDELSE19
BR IGNORE_CST43
CST43 .FILL #12519
IGNORE_CST43
JMP R3
IF_ELSE19
IF_ENDELSE19
; e1
; e1
; e1
LD R0 CST1
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST1
CST1 .FILL #-5
IGNORE_CST1
LD R1 CST2
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST2
CST2 .FILL #-5
IGNORE_CST2
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST3
CST3 .FILL #-4
IGNORE_CST3
LD R1 CST4
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST4
CST4 .FILL #-4
IGNORE_CST4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST5 ; R0 <- cst 1
BR IGNORE_CST5
CST5 .FILL #1
IGNORE_CST5
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; Call function f
; e1
LD R0 CST6
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST6
CST6 .FILL #-5
IGNORE_CST6
LD R1 CST7
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST7
CST7 .FILL #-5
IGNORE_CST7
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST8 ; R0 <- cst 1
BR IGNORE_CST8
CST8 .FILL #1
IGNORE_CST8
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Adding arg on the stack to call f
ADD R6 R6 #-1
; e1
LD R0 CST9
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST9
CST9 .FILL #-4
IGNORE_CST9
LD R1 CST10
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST10
CST10 .FILL #-4
IGNORE_CST10
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST11 ; R0 <- cst 1
BR IGNORE_CST11
CST11 .FILL #1
IGNORE_CST11
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Adding arg on the stack to call f
ADD R6 R6 #-1
LD R3 CST44 ; R3 <- address of label FUN_USER_f
BR IGNORE_CST44
CST44 .FILL #12377
IGNORE_CST44
JSRR R3
LD R1 CST12
ADD R6 R6 R1 ; Remove f's args from the stack
BR IGNORE_CST12
CST12 .FILL #2
IGNORE_CST12
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_main
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
; Call function f
LD R0 CST29 ; R0 <- cst 2
BR IGNORE_CST29
CST29 .FILL #2
IGNORE_CST29
STR R0 R6 #0 ; Adding arg on the stack to call f
ADD R6 R6 #-1
LD R0 CST30 ; R0 <- cst 500
BR IGNORE_CST30
CST30 .FILL #500
IGNORE_CST30
STR R0 R6 #0 ; Adding arg on the stack to call f
ADD R6 R6 #-1
LD R3 CST45 ; R3 <- address of label FUN_USER_f
BR IGNORE_CST45
CST45 .FILL #12377
IGNORE_CST45
JSRR R3
LD R1 CST31
ADD R6 R6 R1 ; Remove f's args from the stack
BR IGNORE_CST31
CST31 .FILL #2
IGNORE_CST31
LD R1 CST32
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST32
CST32 .FILL #0
IGNORE_CST32
LD R0 CST27
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST27
CST27 .FILL #0
IGNORE_CST27
LD R1 CST28
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST28
CST28 .FILL #0
IGNORE_CST28
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
STRINGS
STATIC_VAR
LVALUE_ADDR .BLKW #1
V_res .BLKW #1

.END
; mem 12681 12682
