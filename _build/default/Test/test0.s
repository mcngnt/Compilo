.ORIG x3000
LD R6 CST42
BR IGNORE_CST42
CST42 .FILL #65023
IGNORE_CST42
ADD R5 R6 #0
LD R4 CST43
BR IGNORE_CST43
CST43 .FILL #12714
IGNORE_CST43
ADD R4 R4 #2
LD R3 CST44
BR IGNORE_CST44
CST44 .FILL #12377
IGNORE_CST44
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_main
ADD R6 R6 #-1
LDR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
LDR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable p to the stack 
AND R0 R0 #0
STR R0 R5 #-0
LD R0 CST41 ; R0 <- cst 0
BR IGNORE_CST41
CST41 .FILL #0
IGNORE_CST41
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST40 ; R0 <- cst 5
BR IGNORE_CST40
CST40 .FILL #5
IGNORE_CST40
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R4 #0
ADD R6 R6 #-1 ; Add variable w to the stack 
LD R0 CST39 ; R0 <- cst 7
BR IGNORE_CST39
CST39 .FILL #7
IGNORE_CST39
STR R0 R5 #-1
LD R0 CST35 ; R0 <- cst 0
BR IGNORE_CST35
CST35 .FILL #0
IGNORE_CST35
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST33
STR R0 R4 #-1
BR IGNORE_CST33
CST33 .FILL #0
IGNORE_CST33
LD R0 CST34
STR R0 R4 #-2
BR IGNORE_CST34
CST34 .FILL #1
IGNORE_CST34
LDR R0 R4 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_JMP32
LD R3 CST45
BR IGNORE_CST45
CST45 .FILL #12437
IGNORE_CST45
JMP R3
IGNORE_JMP32
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST46
BR IGNORE_CST46
CST46 .FILL #12438
IGNORE_CST46
JMP R3
CMP_ELSE32
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE32
; R0 <-  e1 > e2
BRnp IGNORE_JMP38
LD R3 CST47
BR IGNORE_CST47
CST47 .FILL #12450
IGNORE_CST47
JMP R3
IGNORE_JMP38
LD R0 CST36 ; R0 <- cst 3
BR IGNORE_CST36
CST36 .FILL #3
IGNORE_CST36
LD R3 CST48
BR IGNORE_CST48
CST48 .FILL #12466
IGNORE_CST48
JMP R3
IF_ELSE38
LD R0 CST38 ; R0 <- cst 100
BR IGNORE_CST38
CST38 .FILL #100
IGNORE_CST38
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST37 ; R0 <- cst 2
BR IGNORE_CST37
CST37 .FILL #2
IGNORE_CST37
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST49
BR IGNORE_CST49
CST49 .FILL #12315
IGNORE_CST49
JSRR R3
IF_ENDELSE38
STR R0 R4 #1
LD R0 CST29
STR R0 R4 #-1
BR IGNORE_CST29
CST29 .FILL #0
IGNORE_CST29
LD R0 CST30
STR R0 R4 #-2
BR IGNORE_CST30
CST30 .FILL #1
IGNORE_CST30
LDR R0 R4 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST27
STR R0 R4 #-1
BR IGNORE_CST27
CST27 .FILL #1
IGNORE_CST27
LD R0 CST28
STR R0 R4 #-2
BR IGNORE_CST28
CST28 .FILL #1
IGNORE_CST28
LDR R0 R4 #1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST50
BR IGNORE_CST50
CST50 .FILL #12300
IGNORE_CST50
JSRR R3
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST26 ; R0 <- cst 9
BR IGNORE_CST26
CST26 .FILL #9
IGNORE_CST26
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST51
BR IGNORE_CST51
CST51 .FILL #12358
IGNORE_CST51
JSRR R3
STR R0 R4 #2
LD R0 CST6
STR R0 R4 #-1
BR IGNORE_CST6
CST6 .FILL #2
IGNORE_CST6
LD R0 CST7
STR R0 R4 #-2
BR IGNORE_CST7
CST7 .FILL #1
IGNORE_CST7
LDR R0 R4 #2
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST4
STR R0 R4 #-1
BR IGNORE_CST4
CST4 .FILL #1
IGNORE_CST4
LD R0 CST5
STR R0 R4 #-2
BR IGNORE_CST5
CST5 .FILL #1
IGNORE_CST5
LDR R0 R4 #1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_JMP3
LD R3 CST52
BR IGNORE_CST52
CST52 .FILL #12541
IGNORE_CST52
JMP R3
IGNORE_JMP3
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST53
BR IGNORE_CST53
CST53 .FILL #12542
IGNORE_CST53
JMP R3
CMP_ELSE3
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE3
; R0 <-  e1 > e2
BRnp IGNORE_JMP25
LD R3 CST54
BR IGNORE_CST54
CST54 .FILL #12619
IGNORE_CST54
JMP R3
IGNORE_JMP25
STARTWHILE7
LD R0 CST15
STR R0 R4 #-1
BR IGNORE_CST15
CST15 .FILL #1
IGNORE_CST15
LD R0 CST16
STR R0 R4 #-2
BR IGNORE_CST16
CST16 .FILL #1
IGNORE_CST16
LDR R0 R4 #1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST13
STR R0 R4 #-1
BR IGNORE_CST13
CST13 .FILL #2
IGNORE_CST13
LD R0 CST14
STR R0 R4 #-2
BR IGNORE_CST14
CST14 .FILL #1
IGNORE_CST14
LDR R0 R4 #2
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_JMP12
LD R3 CST55
BR IGNORE_CST55
CST55 .FILL #12583
IGNORE_CST55
JMP R3
IGNORE_JMP12
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST56
BR IGNORE_CST56
CST56 .FILL #12584
IGNORE_CST56
JMP R3
CMP_ELSE12
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE12
; R0 <-  e1 > e2
BRz ENDWHILE7
LD R0 CST9
STR R0 R4 #-1
BR IGNORE_CST9
CST9 .FILL #2
IGNORE_CST9
LD R0 CST10
STR R0 R4 #-2
BR IGNORE_CST10
CST10 .FILL #1
IGNORE_CST10
LDR R0 R4 #2
LDR R0 R4 #-2
BRnp IGNORE_JMP11
LD R3 CST57
BR IGNORE_CST57
CST57 .FILL #12607
IGNORE_CST57
JMP R3
IGNORE_JMP11
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST58
BR IGNORE_CST58
CST58 .FILL #12612
IGNORE_CST58
JMP R3
DEREF_ELSE11
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE11
ADD R0 R0 #-1
STR R0 R1 #0
BR STARTWHILE7
ENDWHILE7
LD R3 CST59
BR IGNORE_CST59
CST59 .FILL #12708
IGNORE_CST59
JMP R3
IF_ELSE25
LD R0 CST24
STR R0 R4 #-1
BR IGNORE_CST24
CST24 .FILL #1
IGNORE_CST24
LD R0 CST25
STR R0 R4 #-2
BR IGNORE_CST25
CST25 .FILL #1
IGNORE_CST25
LDR R0 R4 #1
LDR R0 R4 #-1
STR R0 R5 #-0
LD R0 CST21
STR R0 R4 #-1
BR IGNORE_CST21
CST21 .FILL #0
IGNORE_CST21
LD R0 CST22
STR R0 R4 #-2
BR IGNORE_CST22
CST22 .FILL #0
IGNORE_CST22
LDR R0 R5 #-0
LDR R0 R4 #-2
BRnp IGNORE_JMP23
LD R3 CST60
BR IGNORE_CST60
CST60 .FILL #12652
IGNORE_CST60
JMP R3
IGNORE_JMP23
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST61
BR IGNORE_CST61
CST61 .FILL #12657
IGNORE_CST61
JMP R3
DEREF_ELSE23
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE23
ADD R0 R0 #1
STR R0 R1 #0
LD R0 CST17
STR R0 R4 #-1
BR IGNORE_CST17
CST17 .FILL #0
IGNORE_CST17
LD R0 CST18
STR R0 R4 #-2
BR IGNORE_CST18
CST18 .FILL #0
IGNORE_CST18
LDR R0 R5 #-0
STR R0 R4 #-1
LDR R0 R4 #-2
BRnp IGNORE_JMP19
LD R3 CST62
BR IGNORE_CST62
CST62 .FILL #12682
IGNORE_CST62
JMP R3
IGNORE_JMP19
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST63
BR IGNORE_CST63
CST63 .FILL #12687
IGNORE_CST63
JMP R3
DEREF_ELSE19
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE19
LDR R0 R4 #-2
BRnp IGNORE_JMP20
LD R3 CST64
BR IGNORE_CST64
CST64 .FILL #12700
IGNORE_CST64
JMP R3
IGNORE_JMP20
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST65
BR IGNORE_CST65
CST65 .FILL #12705
IGNORE_CST65
JMP R3
DEREF_ELSE20
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE20
ADD R0 R0 #-1
STR R0 R1 #0
STR R0 R4 #0
IF_ENDELSE25
LD R0 CST1 ; R0 <- cst 0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
STATIC_VAR
LVALUE_ISGLOBAL .BLKW #1
LVALUE_ADDR .BLKW #1
V_x .BLKW #1
V_y .BLKW #1
V_z .BLKW #1
STRINGS
.END
; IGNORE_CST42 x3003
; FUN_MULT x300c
; MULT_CHANGE_SIGN x300f
; MULT_INIT x3013
; MULT_LOOP x3016
; MULT_STOP x301a
; FUN_DIV x301b
; DIV_A_NEG x3020
; DIV_A_POS x3025
; DIV_AN_BN x3028
; DIV_AN_BP x302b
; DIV_AP_BN x302c
; DIV_AP_BP x302f
; DIV_NEG x3030
; DIV_POS x3033
; DIV_ENDSIGN x3034
; DIV_LOOP x3034
; DIV_END_LOOP x303f
; DIV_END x3044
; FUN_MOD x3046
; MOD_A_NEG x304a
; MOD_ENDSIGN x304c
; MOD_LOOP x304c
; MOD_END_LOOP x3057
; MOD_END x3058
; FUN_USER_main x3059
; IGNORE_CST41 x3065
; IGNORE_CST40 x306a
; IGNORE_CST39 x3076
; IGNORE_CST35 x307a
; IGNORE_CST33 x3080
; IGNORE_CST34 x3084
; IGNORE_JMP32 x308f
; CMP_ELSE32 x3095
; CMP_ENDELSE32 x3096
; IGNORE_JMP38 x309b
; IGNORE_CST36 x309e
; IF_ELSE38 x30a2
; IGNORE_CST38 x30a5
; IGNORE_CST37 x30ac
; IF_ENDELSE38 x30b2
; IGNORE_CST29 x30b7
; IGNORE_CST30 x30bb
; IGNORE_CST27 x30c2
; IGNORE_CST28 x30c6
; IGNORE_CST26 x30d2
; IGNORE_CST6 x30dd
; IGNORE_CST7 x30e1
; IGNORE_CST4 x30e8
; IGNORE_CST5 x30ec
; IGNORE_JMP3 x30f7
; CMP_ELSE3 x30fd
; CMP_ENDELSE3 x30fe
; IGNORE_JMP25 x3103
; STARTWHILE7 x3103
; IGNORE_CST15 x3107
; IGNORE_CST16 x310b
; IGNORE_CST13 x3112
; IGNORE_CST14 x3116
; IGNORE_JMP12 x3121
; CMP_ELSE12 x3127
; CMP_ENDELSE12 x3128
; IGNORE_CST9 x312d
; IGNORE_CST10 x3131
; IGNORE_JMP11 x3138
; DEREF_ELSE11 x313f
; DEREF_ENDELSE11 x3144
; ENDWHILE7 x3147
; IF_ELSE25 x314b
; IGNORE_CST24 x314f
; IGNORE_CST25 x3153
; IGNORE_CST21 x315a
; IGNORE_CST22 x315e
; IGNORE_JMP23 x3165
; DEREF_ELSE23 x316c
; DEREF_ENDELSE23 x3171
; IGNORE_CST17 x3177
; IGNORE_CST18 x317b
; IGNORE_JMP19 x3183
; DEREF_ELSE19 x318a
; DEREF_ENDELSE19 x318f
; IGNORE_JMP20 x3195
; DEREF_ELSE20 x319c
; DEREF_ENDELSE20 x31a1
; IF_ENDELSE25 x31a4
; IGNORE_CST1 x31a7
; STATIC_VAR x31aa
; STRINGS x31af
; .END x31af
; --DEBUG---

