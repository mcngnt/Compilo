.ORIG x3000
LD R6 CST37
BR IGNORE_CST37
CST37 .FILL #65023
IGNORE_CST37
AND R5 R5 #0
ADD R5 R5 R6
LD R4 CST38
BR IGNORE_CST38
CST38 .FILL #12637
IGNORE_CST38
ADD R4 R4 #2
LD R3 CST39
JMP R3 ; Jump to label FUN_USER_main
BR IGNORE_CST39
CST39 .FILL #12378
IGNORE_CST39
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_main
ADD R6 R6 #-1
LDR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
LDR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
AND R5 R5 #0
ADD R5 R5 R6 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable p to the stack 
AND R0 R0 #0
STR R0 R5 #0
LD R0 CST36 ; R0 <- cst 0
BR IGNORE_CST36
CST36 .FILL #0
IGNORE_CST36
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST35 ; R0 <- cst 5
BR IGNORE_CST35
CST35 .FILL #5
IGNORE_CST35
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R4 #0
ADD R6 R6 #-1 ; Add variable w to the stack 
LD R0 CST34 ; R0 <- cst 7
BR IGNORE_CST34
CST34 .FILL #7
IGNORE_CST34
STR R0 R5 #-1
LD R0 CST31 ; R0 <- cst 0
BR IGNORE_CST31
CST31 .FILL #0
IGNORE_CST31
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST29
STR R0 R4 #-1
BR IGNORE_CST29
CST29 .FILL #0
IGNORE_CST29
LD R0 CST30
STR R0 R4 #-2
BR IGNORE_CST30
CST30 .FILL #1
IGNORE_CST30
LDR R0 R4 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_GOTO41
LD R3 CST40
JMP R3 ; Jump to label CMP_ELSE28
BR IGNORE_CST40
CST40 .FILL #12437
IGNORE_CST40
IGNORE_GOTO41
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST42
JMP R3 ; Jump to label CMP_ENDELSE28
BR IGNORE_CST42
CST42 .FILL #12438
IGNORE_CST42
CMP_ELSE28
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE28
; R0 <-  e1 > e2
BRnp IGNORE_GOTO44
LD R3 CST43
JMP R3 ; Jump to label IF_ELSE33
BR IGNORE_CST43
CST43 .FILL #12450
IGNORE_CST43
IGNORE_GOTO44
LD R0 CST32 ; R0 <- cst 3
BR IGNORE_CST32
CST32 .FILL #3
IGNORE_CST32
LD R3 CST45
JMP R3 ; Jump to label IF_ENDELSE33
BR IGNORE_CST45
CST45 .FILL #12453
IGNORE_CST45
IF_ELSE33
LD R0 CST33 ; R0 <- cst 3
BR IGNORE_CST33
CST33 .FILL #3
IGNORE_CST33
IF_ENDELSE33
STR R0 R4 #1
LD R0 CST25
STR R0 R4 #-1
BR IGNORE_CST25
CST25 .FILL #0
IGNORE_CST25
LD R0 CST26
STR R0 R4 #-2
BR IGNORE_CST26
CST26 .FILL #1
IGNORE_CST26
LDR R0 R4 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST23
STR R0 R4 #-1
BR IGNORE_CST23
CST23 .FILL #1
IGNORE_CST23
LD R0 CST24
STR R0 R4 #-2
BR IGNORE_CST24
CST24 .FILL #1
IGNORE_CST24
LDR R0 R4 #1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST46
JSRR R3 ; Jump to label FUN_MULT
BR IGNORE_CST46
CST46 .FILL #12301
IGNORE_CST46
STR R0 R4 #2
LD R0 CST3 ; R0 <- cst 1
BR IGNORE_CST3
CST3 .FILL #1
IGNORE_CST3
BRnp IGNORE_GOTO48
LD R3 CST47
JMP R3 ; Jump to label IF_ELSE22
BR IGNORE_CST47
CST47 .FILL #12559
IGNORE_CST47
IGNORE_GOTO48
STARTWHILE3
LD R0 CST11
STR R0 R4 #-1
BR IGNORE_CST11
CST11 .FILL #1
IGNORE_CST11
LD R0 CST12
STR R0 R4 #-2
BR IGNORE_CST12
CST12 .FILL #1
IGNORE_CST12
LDR R0 R4 #1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST9
STR R0 R4 #-1
BR IGNORE_CST9
CST9 .FILL #2
IGNORE_CST9
LD R0 CST10
STR R0 R4 #-2
BR IGNORE_CST10
CST10 .FILL #1
IGNORE_CST10
LDR R0 R4 #2
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_GOTO50
LD R3 CST49
JMP R3 ; Jump to label CMP_ELSE8
BR IGNORE_CST49
CST49 .FILL #12525
IGNORE_CST49
IGNORE_GOTO50
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST51
JMP R3 ; Jump to label CMP_ENDELSE8
BR IGNORE_CST51
CST51 .FILL #12526
IGNORE_CST51
CMP_ELSE8
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE8
; R0 <-  e1 > e2
BRz ENDWHILE3
LD R0 CST5
STR R0 R4 #-1
BR IGNORE_CST5
CST5 .FILL #2
IGNORE_CST5
LD R0 CST6
STR R0 R4 #-2
BR IGNORE_CST6
CST6 .FILL #1
IGNORE_CST6
LDR R0 R4 #2
LDR R0 R4 #-2
BRnp IGNORE_GOTO53
LD R3 CST52
JMP R3 ; Jump to label DEREF_ELSE7
BR IGNORE_CST52
CST52 .FILL #12549
IGNORE_CST52
IGNORE_GOTO53
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST54
JMP R3 ; Jump to label DEREF_ENDELSE7
BR IGNORE_CST54
CST54 .FILL #12552
IGNORE_CST54
DEREF_ELSE7
LDR R0 R4 #-1
ADD R1 R0 R5
LDR R0 R1 #0
DEREF_ENDELSE7
ADD R0 R0 #-1
STR R0 R1 #0
BR STARTWHILE3
ENDWHILE3
LD R3 CST55
JMP R3 ; Jump to label IF_ENDELSE22
BR IGNORE_CST55
CST55 .FILL #12632
IGNORE_CST55
IF_ELSE22
LD R0 CST21
STR R0 R4 #-1
BR IGNORE_CST21
CST21 .FILL #1
IGNORE_CST21
LD R0 CST22
STR R0 R4 #-2
BR IGNORE_CST22
CST22 .FILL #1
IGNORE_CST22
LDR R0 R4 #1
LDR R0 R4 #-1
STR R0 R5 #0
LD R0 CST18
STR R0 R4 #-1
BR IGNORE_CST18
CST18 .FILL #0
IGNORE_CST18
LD R0 CST19
STR R0 R4 #-2
BR IGNORE_CST19
CST19 .FILL #0
IGNORE_CST19
LDR R0 R5 #0
LDR R0 R4 #-2
BRnp IGNORE_GOTO57
LD R3 CST56
JMP R3 ; Jump to label DEREF_ELSE20
BR IGNORE_CST56
CST56 .FILL #12592
IGNORE_CST56
IGNORE_GOTO57
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST58
JMP R3 ; Jump to label DEREF_ENDELSE20
BR IGNORE_CST58
CST58 .FILL #12595
IGNORE_CST58
DEREF_ELSE20
LDR R0 R4 #-1
ADD R1 R0 R5
LDR R0 R1 #0
DEREF_ENDELSE20
ADD R0 R0 #1
STR R0 R1 #0
LD R0 CST15
STR R0 R4 #-1
BR IGNORE_CST15
CST15 .FILL #0
IGNORE_CST15
LD R0 CST16
STR R0 R4 #-2
BR IGNORE_CST16
CST16 .FILL #0
IGNORE_CST16
LDR R0 R5 #0
STR R0 R4 #-1
LDR R0 R4 #-2
BRnp IGNORE_GOTO60
LD R3 CST59
JMP R3 ; Jump to label DEREF_ELSE17
BR IGNORE_CST59
CST59 .FILL #12620
IGNORE_CST59
IGNORE_GOTO60
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST61
JMP R3 ; Jump to label DEREF_ENDELSE17
BR IGNORE_CST61
CST61 .FILL #12623
IGNORE_CST61
DEREF_ELSE17
LDR R0 R4 #-1
ADD R1 R0 R5
LDR R0 R1 #0
DEREF_ENDELSE17
STR R0 R4 #0
LD R0 CST14 ; R0 <- cst 0
BR IGNORE_CST14
CST14 .FILL #0
IGNORE_CST14
LD R0 CST13 ; R0 <- cst 666
BR IGNORE_CST13
CST13 .FILL #666
IGNORE_CST13
NOT R0 R0
STR R0 R4 #0
IF_ENDELSE22
LD R0 CST1 ; R0 <- cst 0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LDR R7 R5 #-1 ; Restore R7
LDR R5 R5 #-2 ; Restore R5
STATIC_VAR
LVALUE_ISGLOBAL .BLKW #1
LVALUE_ADDR .BLKW #1
V_x .BLKW #1
V_y .BLKW #1
V_z .BLKW #1
.END
; IGNORE_CST37 x3003
; FUN_MULT x300d
; MULT_CHANGE_SIGN x3010
; MULT_INIT x3014
; MULT_LOOP x3017
; MULT_STOP x301b
; FUN_DIV x301c
; DIV_A_NEG x3021
; DIV_A_POS x3026
; DIV_AN_BN x3029
; DIV_AN_BP x302c
; DIV_AP_BN x302d
; DIV_AP_BP x3030
; DIV_NEG x3031
; DIV_POS x3034
; DIV_ENDSIGN x3035
; DIV_LOOP x3035
; DIV_END_LOOP x3040
; DIV_END x3045
; FUN_MOD x3047
; MOD_A_NEG x304b
; MOD_ENDSIGN x304d
; MOD_LOOP x304d
; MOD_END_LOOP x3058
; MOD_END x3059
; FUN_USER_main x305a
; IGNORE_CST36 x3067
; IGNORE_CST35 x306c
; IGNORE_CST34 x3076
; IGNORE_CST31 x307a
; IGNORE_CST29 x3080
; IGNORE_CST30 x3084
; CMP_ELSE28 x3095
; CMP_ENDELSE28 x3096
; IGNORE_CST32 x309e
; IF_ELSE33 x30a2
; IGNORE_CST33 x30a5
; IF_ENDELSE33 x30a5
; IGNORE_CST25 x30aa
; IGNORE_CST26 x30ae
; IGNORE_CST23 x30b5
; IGNORE_CST24 x30b9
; IGNORE_CST3 x30c4
; STARTWHILE3 x30c9
; IGNORE_CST11 x30cd
; IGNORE_CST12 x30d1
; IGNORE_CST9 x30d8
; IGNORE_CST10 x30dc
; CMP_ELSE8 x30ed
; CMP_ENDELSE8 x30ee
; IGNORE_CST5 x30f3
; IGNORE_CST6 x30f7
; DEREF_ELSE7 x3105
; DEREF_ENDELSE7 x3108
; ENDWHILE3 x310b
; IF_ELSE22 x310f
; IGNORE_CST21 x3113
; IGNORE_CST22 x3117
; IGNORE_CST18 x311e
; IGNORE_CST19 x3122
; DEREF_ELSE20 x3130
; DEREF_ENDELSE20 x3133
; IGNORE_CST15 x3139
; IGNORE_CST16 x313d
; DEREF_ELSE17 x314c
; DEREF_ENDELSE17 x314f
; IGNORE_CST14 x3153
; IGNORE_CST13 x3156
; IF_ENDELSE22 x3158
; IGNORE_CST1 x315b
; STATIC_VAR x315d
; .END x3162
; --DEBUG---

