.ORIG x3000
LD R6 CST267 ; Init R6 value to the start of the stack
BR IGNORE_CST267
CST267 .FILL #65023
IGNORE_CST267
ADD R5 R6 #0
LD R4 CST268 ; R4 <- address of label STATIC_VAR
BR IGNORE_CST268
CST268 .FILL #14805
IGNORE_CST268
ADD R4 R4 #1
LD R3 CST269 ; R3 <- address of label FUN_USER_main
BR IGNORE_CST269
CST269 .FILL #14215
IGNORE_CST269
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_gen_rnd
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
; e1
; e1
; e1
LD R0 CST1
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LD R1 CST2
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST2
CST2 .FILL #0
IGNORE_CST2
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST3 ; R0 <- cst 9769
BR IGNORE_CST3
CST3 .FILL #9769
IGNORE_CST3
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST270 ; R3 <- address of label FUN_MULT
BR IGNORE_CST270
CST270 .FILL #12300
IGNORE_CST270
JSRR R3 ; Multiply R0 and R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST4 ; R0 <- cst 431
BR IGNORE_CST4
CST4 .FILL #431
IGNORE_CST4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST5 ; R0 <- cst 32000
BR IGNORE_CST5
CST5 .FILL #32000
IGNORE_CST5
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST271 ; R3 <- address of label FUN_MOD
BR IGNORE_CST271
CST271 .FILL #12358
IGNORE_CST271
JSRR R3 ; Compute R1 % R0
LD R1 CST6
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST6
CST6 .FILL #0
IGNORE_CST6
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_clear
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST272 ; R0 <- address of label STRING1
BR IGNORE_CST272
CST272 .FILL #14747
IGNORE_CST272
PUTS
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_copy_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable p to the stack 
ADD R6 R6 #-1 ; Add variable i to the stack 
LD R0 CST23
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST23
CST23 .FILL #1
IGNORE_CST23
LD R1 CST24
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST24
CST24 .FILL #1
IGNORE_CST24
LD R1 CST25
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST25
CST25 .FILL #0
IGNORE_CST25
LD R0 CST21 ; R0 <- cst 0
BR IGNORE_CST21
CST21 .FILL #0
IGNORE_CST21
LD R1 CST22
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST22
CST22 .FILL #1
IGNORE_CST22
STARTWHILE6
LD R0 CST8
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST8
CST8 .FILL #1
IGNORE_CST8
LD R1 CST9
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST9
CST9 .FILL #1
IGNORE_CST9
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST10 ; R0 <- cst 16
BR IGNORE_CST10
CST10 .FILL #16
IGNORE_CST10
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP11
LD R3 CST273 ; R3 <- address of label CMP_ELSE11
BR IGNORE_CST273
CST273 .FILL #12528
IGNORE_CST273
JMP R3
IGNORE_JMP11
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST274 ; R3 <- address of label CMP_ENDELSE11
BR IGNORE_CST274
CST274 .FILL #12529
IGNORE_CST274
JMP R3
CMP_ELSE11
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE11
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP6
LD R3 CST275 ; R3 <- address of label ENDWHILE6
BR IGNORE_CST275
CST275 .FILL #12618
IGNORE_CST275
JMP R3
IGNORE_JMP6
; e1
LD R0 CST16
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST16
CST16 .FILL #2
IGNORE_CST16
LD R1 CST17
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST17
CST17 .FILL #2
IGNORE_CST17
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST18
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST18
CST18 .FILL #1
IGNORE_CST18
LD R1 CST19
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST19
CST19 .FILL #1
IGNORE_CST19
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
LD R1 CST20
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST20
CST20 .FILL #0
IGNORE_CST20

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST14
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST14
CST14 .FILL #1
IGNORE_CST14
LD R1 CST15
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST15
CST15 .FILL #1
IGNORE_CST15
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0 ; ++(lvalue)
LD R0 CST12
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST12
CST12 .FILL #0
IGNORE_CST12
LD R1 CST13
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST13
CST13 .FILL #0
IGNORE_CST13
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0 ; ++(lvalue)
LD R3 CST276 ; R3 <- address of label STARTWHILE6
BR IGNORE_CST276
CST276 .FILL #12491
IGNORE_CST276
JMP R3
ENDWHILE6
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_print_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
STARTWHILE26
LD R0 CST28
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST28
CST28 .FILL #-4
IGNORE_CST28
LD R1 CST29
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST29
CST29 .FILL #-4
IGNORE_CST29
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
LD R0 CST30
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST30
CST30 .FILL #1
IGNORE_CST30
LD R1 CST31
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST31
CST31 .FILL #1
IGNORE_CST31
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST32 ; R0 <- cst 16
BR IGNORE_CST32
CST32 .FILL #16
IGNORE_CST32
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP33
LD R3 CST277 ; R3 <- address of label CMP_ELSE33
BR IGNORE_CST277
CST277 .FILL #12684
IGNORE_CST277
JMP R3
IGNORE_JMP33
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST278 ; R3 <- address of label CMP_ENDELSE33
BR IGNORE_CST278
CST278 .FILL #12685
IGNORE_CST278
JMP R3
CMP_ELSE33
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE33
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP26
LD R3 CST279 ; R3 <- address of label ENDWHILE26
BR IGNORE_CST279
CST279 .FILL #12962
IGNORE_CST279
JMP R3
IGNORE_JMP26
; e1
; e1
LD R0 CST55
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST55
CST55 .FILL #-4
IGNORE_CST55
LD R1 CST56
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST56
CST56 .FILL #-4
IGNORE_CST56
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST57
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST57
CST57 .FILL #1
IGNORE_CST57
LD R1 CST58
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST58
CST58 .FILL #1
IGNORE_CST58
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST59 ; R0 <- cst 4
BR IGNORE_CST59
CST59 .FILL #4
IGNORE_CST59
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST280 ; R3 <- address of label FUN_MOD
BR IGNORE_CST280
CST280 .FILL #12358
IGNORE_CST280
JSRR R3 ; Compute R1 % R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST60 ; R0 <- cst 0
BR IGNORE_CST60
CST60 .FILL #0
IGNORE_CST60
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP61
LD R3 CST281 ; R3 <- address of label CMP_ELSE61
BR IGNORE_CST281
CST281 .FILL #12757
IGNORE_CST281
JMP R3
IGNORE_JMP61
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST282 ; R3 <- address of label CMP_ENDELSE61
BR IGNORE_CST282
CST282 .FILL #12758
IGNORE_CST282
JMP R3
CMP_ELSE61
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE61
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP63
LD R3 CST283 ; R3 <- address of label IF_ELSE63
BR IGNORE_CST283
CST283 .FILL #12772
IGNORE_CST283
JMP R3
IGNORE_JMP63
LD R0 CST62 ; R0 <- cst 10
BR IGNORE_CST62
CST62 .FILL #10
IGNORE_CST62
OUT
LD R3 CST284 ; R3 <- address of label IF_ENDELSE63
BR IGNORE_CST284
CST284 .FILL #12772
IGNORE_CST284
JMP R3
IF_ELSE63
IF_ENDELSE63
LD R0 CST36
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST36
CST36 .FILL #-4
IGNORE_CST36
LD R1 CST37
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST37
CST37 .FILL #-4
IGNORE_CST37
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST38 ; R0 <- cst 0
BR IGNORE_CST38
CST38 .FILL #0
IGNORE_CST38
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP39
LD R3 CST285 ; R3 <- address of label CMP_ELSE39
BR IGNORE_CST285
CST285 .FILL #12811
IGNORE_CST285
JMP R3
IGNORE_JMP39
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST286 ; R3 <- address of label CMP_ENDELSE39
BR IGNORE_CST286
CST286 .FILL #12812
IGNORE_CST286
JMP R3
CMP_ELSE39
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE39
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP54
LD R3 CST287 ; R3 <- address of label IF_ELSE54
BR IGNORE_CST287
CST287 .FILL #12826
IGNORE_CST287
JMP R3
IGNORE_JMP54
LD R0 CST40 ; R0 <- cst 111
BR IGNORE_CST40
CST40 .FILL #111
IGNORE_CST40
OUT
LD R3 CST288 ; R3 <- address of label IF_ENDELSE54
BR IGNORE_CST288
CST288 .FILL #12938
IGNORE_CST288
JMP R3
IF_ELSE54
LD R0 CST41
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST41
CST41 .FILL #-4
IGNORE_CST41
LD R1 CST42
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST42
CST42 .FILL #-4
IGNORE_CST42
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST43 ; R0 <- cst 2
BR IGNORE_CST43
CST43 .FILL #2
IGNORE_CST43
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP44
LD R3 CST289 ; R3 <- address of label CMP_ELSE44
BR IGNORE_CST289
CST289 .FILL #12865
IGNORE_CST289
JMP R3
IGNORE_JMP44
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST290 ; R3 <- address of label CMP_ENDELSE44
BR IGNORE_CST290
CST290 .FILL #12866
IGNORE_CST290
JMP R3
CMP_ELSE44
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE44
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP53
LD R3 CST291 ; R3 <- address of label IF_ELSE53
BR IGNORE_CST291
CST291 .FILL #12880
IGNORE_CST291
JMP R3
IGNORE_JMP53
LD R0 CST45 ; R0 <- cst 50
BR IGNORE_CST45
CST45 .FILL #50
IGNORE_CST45
OUT
LD R3 CST292 ; R3 <- address of label IF_ENDELSE53
BR IGNORE_CST292
CST292 .FILL #12938
IGNORE_CST292
JMP R3
IF_ELSE53
LD R0 CST46
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST46
CST46 .FILL #-4
IGNORE_CST46
LD R1 CST47
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST47
CST47 .FILL #-4
IGNORE_CST47
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST48 ; R0 <- cst 4
BR IGNORE_CST48
CST48 .FILL #4
IGNORE_CST48
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP49
LD R3 CST293 ; R3 <- address of label CMP_ELSE49
BR IGNORE_CST293
CST293 .FILL #12919
IGNORE_CST293
JMP R3
IGNORE_JMP49
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST294 ; R3 <- address of label CMP_ENDELSE49
BR IGNORE_CST294
CST294 .FILL #12920
IGNORE_CST294
JMP R3
CMP_ELSE49
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE49
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP52
LD R3 CST295 ; R3 <- address of label IF_ELSE52
BR IGNORE_CST295
CST295 .FILL #12934
IGNORE_CST295
JMP R3
IGNORE_JMP52
LD R0 CST50 ; R0 <- cst 52
BR IGNORE_CST50
CST50 .FILL #52
IGNORE_CST50
OUT
LD R3 CST296 ; R3 <- address of label IF_ENDELSE52
BR IGNORE_CST296
CST296 .FILL #12938
IGNORE_CST296
JMP R3
IF_ELSE52
LD R0 CST51 ; R0 <- cst 56
BR IGNORE_CST51
CST51 .FILL #56
IGNORE_CST51
OUT
IF_ENDELSE52
IF_ENDELSE53
IF_ENDELSE54
LD R0 CST34
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST34
CST34 .FILL #-4
IGNORE_CST34
LD R1 CST35
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST35
CST35 .FILL #-4
IGNORE_CST35
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST297 ; R3 <- address of label STARTWHILE26
BR IGNORE_CST297
CST297 .FILL #12631
IGNORE_CST297
JMP R3
ENDWHILE26
LD R0 CST26 ; R0 <- cst 10
BR IGNORE_CST26
CST26 .FILL #10
IGNORE_CST26
OUT
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_init_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable i to the stack 
LD R0 CST75 ; R0 <- cst 0
BR IGNORE_CST75
CST75 .FILL #0
IGNORE_CST75
LD R1 CST76
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST76
CST76 .FILL #0
IGNORE_CST76
STARTWHILE63
LD R0 CST65
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST65
CST65 .FILL #0
IGNORE_CST65
LD R1 CST66
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST66
CST66 .FILL #0
IGNORE_CST66
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST67 ; R0 <- cst 16
BR IGNORE_CST67
CST67 .FILL #16
IGNORE_CST67
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP68
LD R3 CST298 ; R3 <- address of label CMP_ELSE68
BR IGNORE_CST298
CST298 .FILL #13027
IGNORE_CST298
JMP R3
IGNORE_JMP68
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST299 ; R3 <- address of label CMP_ENDELSE68
BR IGNORE_CST299
CST299 .FILL #13028
IGNORE_CST299
JMP R3
CMP_ELSE68
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE68
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP63
LD R3 CST300 ; R3 <- address of label ENDWHILE63
BR IGNORE_CST300
CST300 .FILL #13089
IGNORE_CST300
JMP R3
IGNORE_JMP63
LD R0 CST73 ; R0 <- cst 0
BR IGNORE_CST73
CST73 .FILL #0
IGNORE_CST73
LD R1 CST74
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST74
CST74 .FILL #-4
IGNORE_CST74

STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST71
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST71
CST71 .FILL #-4
IGNORE_CST71
LD R1 CST72
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST72
CST72 .FILL #-4
IGNORE_CST72
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R0 CST69
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST69
CST69 .FILL #0
IGNORE_CST69
LD R1 CST70
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST70
CST70 .FILL #0
IGNORE_CST70
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST301 ; R3 <- address of label STARTWHILE63
BR IGNORE_CST301
CST301 .FILL #12990
IGNORE_CST301
JMP R3
ENDWHILE63
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_put_sq
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST77 ; R0 <- cst 2
BR IGNORE_CST77
CST77 .FILL #2
IGNORE_CST77
LD R1 CST78
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST78
CST78 .FILL #-4
IGNORE_CST78

STR R0 R1 #0 ; R0 <- M[R1]
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_spawn_sq
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
; e1
LD R0 CST83
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST83
CST83 .FILL #-4
IGNORE_CST83
LD R1 CST84
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST84
CST84 .FILL #-4
IGNORE_CST84
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; e1
LD R0 CST85
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST85
CST85 .FILL #0
IGNORE_CST85
LD R1 CST86
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST86
CST86 .FILL #0
IGNORE_CST86
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST87 ; R0 <- cst 16
BR IGNORE_CST87
CST87 .FILL #16
IGNORE_CST87
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST302 ; R3 <- address of label FUN_MOD
BR IGNORE_CST302
CST302 .FILL #12358
IGNORE_CST302
JSRR R3 ; Compute R1 % R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST88
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST88
CST88 .FILL #-4
IGNORE_CST88
; Call function put_sq
LD R0 CST80
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST80
CST80 .FILL #-4
IGNORE_CST80
LD R1 CST81
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST81
CST81 .FILL #-4
IGNORE_CST81
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
LD R3 CST303 ; R3 <- address of label FUN_USER_put_sq
BR IGNORE_CST303
CST303 .FILL #13094
IGNORE_CST303
JSRR R3
LD R1 CST82
ADD R6 R6 R1 ; Remove put_sq's args from the stack
BR IGNORE_CST82
CST82 .FILL #1
IGNORE_CST82
; Call function gen_rnd
LD R3 CST304 ; R3 <- address of label FUN_USER_gen_rnd
BR IGNORE_CST304
CST304 .FILL #12377
IGNORE_CST304
JSRR R3
LD R1 CST79
ADD R6 R6 R1 ; Remove gen_rnd's args from the stack
BR IGNORE_CST79
CST79 .FILL #0
IGNORE_CST79
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_move_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable p to the stack 
ADD R6 R6 #-1 ; Add variable i to the stack 
ADD R6 R6 #-1 ; Add variable a to the stack 
ADD R6 R6 #-1 ; Add variable nb to the stack 
LD R0 CST201 ; R0 <- cst 4
BR IGNORE_CST201
CST201 .FILL #4
IGNORE_CST201
LD R1 CST202
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST202
CST202 .FILL #3
IGNORE_CST202
STARTWHILE89
LD R0 CST91 ; R0 <- cst 0
BR IGNORE_CST91
CST91 .FILL #0
IGNORE_CST91
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST92
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST92
CST92 .FILL #3
IGNORE_CST92
LD R1 CST93
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST93
CST93 .FILL #3
IGNORE_CST93
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP94
LD R3 CST305 ; R3 <- address of label CMP_ELSE94
BR IGNORE_CST305
CST305 .FILL #13272
IGNORE_CST305
JMP R3
IGNORE_JMP94
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST306 ; R3 <- address of label CMP_ENDELSE94
BR IGNORE_CST306
CST306 .FILL #13273
IGNORE_CST306
JMP R3
CMP_ELSE94
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE94
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP89
LD R3 CST307 ; R3 <- address of label ENDWHILE89
BR IGNORE_CST307
CST307 .FILL #14208
IGNORE_CST307
JMP R3
IGNORE_JMP89
; Call function init_grid
LD R0 CST198
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST198
CST198 .FILL #2
IGNORE_CST198
LD R1 CST199
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST199
CST199 .FILL #2
IGNORE_CST199
STR R0 R6 #0 ; Adding arg on the stack to call init_grid
ADD R6 R6 #-1
LD R3 CST308 ; R3 <- address of label FUN_USER_init_grid
BR IGNORE_CST308
CST308 .FILL #12971
IGNORE_CST308
JSRR R3
LD R1 CST200
ADD R6 R6 R1 ; Remove init_grid's args from the stack
BR IGNORE_CST200
CST200 .FILL #1
IGNORE_CST200
LD R0 CST196 ; R0 <- cst 0
BR IGNORE_CST196
CST196 .FILL #0
IGNORE_CST196
LD R1 CST197
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST197
CST197 .FILL #1
IGNORE_CST197
STARTWHILE97
LD R0 CST99
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST99
CST99 .FILL #1
IGNORE_CST99
LD R1 CST100
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST100
CST100 .FILL #1
IGNORE_CST100
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST101 ; R0 <- cst 16
BR IGNORE_CST101
CST101 .FILL #16
IGNORE_CST101
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP102
LD R3 CST309 ; R3 <- address of label CMP_ELSE102
BR IGNORE_CST309
CST309 .FILL #13347
IGNORE_CST309
JMP R3
IGNORE_JMP102
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST310 ; R3 <- address of label CMP_ENDELSE102
BR IGNORE_CST310
CST310 .FILL #13348
IGNORE_CST310
JMP R3
CMP_ELSE102
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE102
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP97
LD R3 CST311 ; R3 <- address of label ENDWHILE97
BR IGNORE_CST311
CST311 .FILL #14176
IGNORE_CST311
JMP R3
IGNORE_JMP97
; e1
LD R0 CST191
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST191
CST191 .FILL #1
IGNORE_CST191
LD R1 CST192
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST192
CST192 .FILL #1
IGNORE_CST192
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST193
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST193
CST193 .FILL #1
IGNORE_CST193
LD R1 CST194
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST194
CST194 .FILL #1
IGNORE_CST194
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
LD R1 CST195
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST195
CST195 .FILL #2
IGNORE_CST195
LD R0 CST113 ; R0 <- cst 0
BR IGNORE_CST113
CST113 .FILL #0
IGNORE_CST113
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST114
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST114
CST114 .FILL #2
IGNORE_CST114
LD R1 CST115
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST115
CST115 .FILL #2
IGNORE_CST115
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP116
LD R3 CST312 ; R3 <- address of label CMP_ELSE116
BR IGNORE_CST312
CST312 .FILL #13431
IGNORE_CST312
JMP R3
IGNORE_JMP116
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST313 ; R3 <- address of label CMP_ENDELSE116
BR IGNORE_CST313
CST313 .FILL #13432
IGNORE_CST313
JMP R3
CMP_ELSE116
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE116
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP124
LD R3 CST314 ; R3 <- address of label EIF_ELSE124
BR IGNORE_CST314
CST314 .FILL #13500
IGNORE_CST314
JMP R3
IGNORE_JMP124
LD R0 CST117 ; R0 <- cst 0
BR IGNORE_CST117
CST117 .FILL #0
IGNORE_CST117
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
LD R0 CST118
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST118
CST118 .FILL #1
IGNORE_CST118
LD R1 CST119
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST119
CST119 .FILL #1
IGNORE_CST119
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST120
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST120
CST120 .FILL #-4
IGNORE_CST120
LD R1 CST121
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST121
CST121 .FILL #-4
IGNORE_CST121
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRnz IGNORE_JMP122
LD R3 CST315 ; R3 <- address of label CMP_ELSE122
BR IGNORE_CST315
CST315 .FILL #13495
IGNORE_CST315
JMP R3
IGNORE_JMP122
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST316 ; R3 <- address of label CMP_ENDELSE122
BR IGNORE_CST316
CST316 .FILL #13496
IGNORE_CST316
JMP R3
CMP_ELSE122
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE122
; R0 <-  e1 < e2
LD R3 CST317 ; R3 <- address of label EIF_ENDELSE124
BR IGNORE_CST317
CST317 .FILL #13503
IGNORE_CST317
JMP R3
EIF_ELSE124
LD R0 CST123 ; R0 <- cst 0
BR IGNORE_CST123
CST123 .FILL #0
IGNORE_CST123
EIF_ENDELSE124
ADD R0 R0 #0
BRnp IGNORE_JMP132
LD R3 CST318 ; R3 <- address of label EIF_ELSE132
BR IGNORE_CST318
CST318 .FILL #13571
IGNORE_CST318
JMP R3
IGNORE_JMP132
; e1
LD R0 CST125
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST125
CST125 .FILL #1
IGNORE_CST125
LD R1 CST126
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST126
CST126 .FILL #1
IGNORE_CST126
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST127
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST127
CST127 .FILL #-4
IGNORE_CST127
LD R1 CST128
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST128
CST128 .FILL #-4
IGNORE_CST128
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST129 ; R0 <- cst 16
BR IGNORE_CST129
CST129 .FILL #16
IGNORE_CST129
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP130
LD R3 CST319 ; R3 <- address of label CMP_ELSE130
BR IGNORE_CST319
CST319 .FILL #13566
IGNORE_CST319
JMP R3
IGNORE_JMP130
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST320 ; R3 <- address of label CMP_ENDELSE130
BR IGNORE_CST320
CST320 .FILL #13567
IGNORE_CST320
JMP R3
CMP_ELSE130
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE130
; R0 <-  e1 > e2
LD R3 CST321 ; R3 <- address of label EIF_ENDELSE132
BR IGNORE_CST321
CST321 .FILL #13574
IGNORE_CST321
JMP R3
EIF_ELSE132
LD R0 CST131 ; R0 <- cst 0
BR IGNORE_CST131
CST131 .FILL #0
IGNORE_CST131
EIF_ENDELSE132
ADD R0 R0 #0
BRnp IGNORE_JMP142
LD R3 CST322 ; R3 <- address of label EIF_ELSE142
BR IGNORE_CST322
CST322 .FILL #13660
IGNORE_CST322
JMP R3
IGNORE_JMP142
; e1
; e1
LD R0 CST133
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST133
CST133 .FILL #1
IGNORE_CST133
LD R1 CST134
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST134
CST134 .FILL #1
IGNORE_CST134
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST135
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST135
CST135 .FILL #1
IGNORE_CST135
LD R1 CST136
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST136
CST136 .FILL #1
IGNORE_CST136
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST137
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST137
CST137 .FILL #-4
IGNORE_CST137
LD R1 CST138
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST138
CST138 .FILL #-4
IGNORE_CST138
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST139 ; R0 <- cst 0
BR IGNORE_CST139
CST139 .FILL #0
IGNORE_CST139
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP140
LD R3 CST323 ; R3 <- address of label CMP_ELSE140
BR IGNORE_CST323
CST323 .FILL #13655
IGNORE_CST323
JMP R3
IGNORE_JMP140
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST324 ; R3 <- address of label CMP_ENDELSE140
BR IGNORE_CST324
CST324 .FILL #13656
IGNORE_CST324
JMP R3
CMP_ELSE140
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE140
; R0 <-  e1 == e2
LD R3 CST325 ; R3 <- address of label EIF_ENDELSE142
BR IGNORE_CST325
CST325 .FILL #13663
IGNORE_CST325
JMP R3
EIF_ELSE142
LD R0 CST141 ; R0 <- cst 0
BR IGNORE_CST141
CST141 .FILL #0
IGNORE_CST141
EIF_ENDELSE142
ADD R0 R0 #0
BRnp IGNORE_JMP177
LD R3 CST326 ; R3 <- address of label EIF_ELSE177
BR IGNORE_CST326
CST326 .FILL #13973
IGNORE_CST326
JMP R3
IGNORE_JMP177
LD R0 CST143
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST143
CST143 .FILL #-4
IGNORE_CST143
LD R1 CST144
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST144
CST144 .FILL #-4
IGNORE_CST144
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST145 ; R0 <- cst 4
BR IGNORE_CST145
CST145 .FILL #4
IGNORE_CST145
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP146
LD R3 CST327 ; R3 <- address of label CMP_ELSE146
BR IGNORE_CST327
CST327 .FILL #13706
IGNORE_CST327
JMP R3
IGNORE_JMP146
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST328 ; R3 <- address of label CMP_ENDELSE146
BR IGNORE_CST328
CST328 .FILL #13707
IGNORE_CST328
JMP R3
CMP_ELSE146
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE146
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP152
LD R3 CST329 ; R3 <- address of label EIF_ELSE152
BR IGNORE_CST329
CST329 .FILL #13720
IGNORE_CST329
JMP R3
IGNORE_JMP152
LD R0 CST147 ; R0 <- cst 1
BR IGNORE_CST147
CST147 .FILL #1
IGNORE_CST147
LD R3 CST330 ; R3 <- address of label EIF_ENDELSE152
BR IGNORE_CST330
CST330 .FILL #13760
IGNORE_CST330
JMP R3
EIF_ELSE152
LD R0 CST148
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST148
CST148 .FILL #-4
IGNORE_CST148
LD R1 CST149
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST149
CST149 .FILL #-4
IGNORE_CST149
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST150 ; R0 <- cst 4
BR IGNORE_CST150
CST150 .FILL #4
IGNORE_CST150
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP151
LD R3 CST331 ; R3 <- address of label CMP_ELSE151
BR IGNORE_CST331
CST331 .FILL #13759
IGNORE_CST331
JMP R3
IGNORE_JMP151
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST332 ; R3 <- address of label CMP_ENDELSE151
BR IGNORE_CST332
CST332 .FILL #13760
IGNORE_CST332
JMP R3
CMP_ELSE151
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE151
; R0 <-  e1 == e2
EIF_ENDELSE152
ADD R0 R0 #0
BRnp IGNORE_JMP175
LD R3 CST333 ; R3 <- address of label EIF_ELSE175
BR IGNORE_CST333
CST333 .FILL #13773
IGNORE_CST333
JMP R3
IGNORE_JMP175
LD R0 CST153 ; R0 <- cst 1
BR IGNORE_CST153
CST153 .FILL #1
IGNORE_CST153
LD R3 CST334 ; R3 <- address of label EIF_ENDELSE175
BR IGNORE_CST334
CST334 .FILL #13969
IGNORE_CST334
JMP R3
EIF_ELSE175
LD R0 CST154
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST154
CST154 .FILL #-4
IGNORE_CST154
LD R1 CST155
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST155
CST155 .FILL #-4
IGNORE_CST155
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST156 ; R0 <- cst 1
BR IGNORE_CST156
CST156 .FILL #1
IGNORE_CST156
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP157
LD R3 CST335 ; R3 <- address of label CMP_ELSE157
BR IGNORE_CST335
CST335 .FILL #13810
IGNORE_CST335
JMP R3
IGNORE_JMP157
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST336 ; R3 <- address of label CMP_ENDELSE157
BR IGNORE_CST336
CST336 .FILL #13811
IGNORE_CST336
JMP R3
CMP_ELSE157
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE157
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP163
LD R3 CST337 ; R3 <- address of label EIF_ELSE163
BR IGNORE_CST337
CST337 .FILL #13824
IGNORE_CST337
JMP R3
IGNORE_JMP163
LD R0 CST158 ; R0 <- cst 1
BR IGNORE_CST158
CST158 .FILL #1
IGNORE_CST158
LD R3 CST338 ; R3 <- address of label EIF_ENDELSE163
BR IGNORE_CST338
CST338 .FILL #13864
IGNORE_CST338
JMP R3
EIF_ELSE163
LD R0 CST159
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST159
CST159 .FILL #-4
IGNORE_CST159
LD R1 CST160
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST160
CST160 .FILL #-4
IGNORE_CST160
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST161 ; R0 <- cst 1
BR IGNORE_CST161
CST161 .FILL #1
IGNORE_CST161
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP162
LD R3 CST339 ; R3 <- address of label CMP_ELSE162
BR IGNORE_CST339
CST339 .FILL #13863
IGNORE_CST339
JMP R3
IGNORE_JMP162
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST340 ; R3 <- address of label CMP_ENDELSE162
BR IGNORE_CST340
CST340 .FILL #13864
IGNORE_CST340
JMP R3
CMP_ELSE162
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE162
; R0 <-  e1 == e2
EIF_ENDELSE163
ADD R0 R0 #0
BRnp IGNORE_JMP174
LD R3 CST341 ; R3 <- address of label EIF_ELSE174
BR IGNORE_CST341
CST341 .FILL #13966
IGNORE_CST341
JMP R3
IGNORE_JMP174
; e1
LD R0 CST164
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST164
CST164 .FILL #1
IGNORE_CST164
LD R1 CST165
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST165
CST165 .FILL #1
IGNORE_CST165
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST166 ; R0 <- cst 4
BR IGNORE_CST166
CST166 .FILL #4
IGNORE_CST166
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST342 ; R3 <- address of label FUN_DIV
BR IGNORE_CST342
CST342 .FILL #12315
IGNORE_CST342
JSRR R3 ; Divide R1 by R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
; e1
LD R0 CST167
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST167
CST167 .FILL #1
IGNORE_CST167
LD R1 CST168
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST168
CST168 .FILL #1
IGNORE_CST168
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST169
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST169
CST169 .FILL #-4
IGNORE_CST169
LD R1 CST170
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST170
CST170 .FILL #-4
IGNORE_CST170
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST171 ; R0 <- cst 4
BR IGNORE_CST171
CST171 .FILL #4
IGNORE_CST171
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST343 ; R3 <- address of label FUN_DIV
BR IGNORE_CST343
CST343 .FILL #12315
IGNORE_CST343
JSRR R3 ; Divide R1 by R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP172
LD R3 CST344 ; R3 <- address of label CMP_ELSE172
BR IGNORE_CST344
CST344 .FILL #13961
IGNORE_CST344
JMP R3
IGNORE_JMP172
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST345 ; R3 <- address of label CMP_ENDELSE172
BR IGNORE_CST345
CST345 .FILL #13962
IGNORE_CST345
JMP R3
CMP_ELSE172
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE172
; R0 <-  e1 == e2
LD R3 CST346 ; R3 <- address of label EIF_ENDELSE174
BR IGNORE_CST346
CST346 .FILL #13969
IGNORE_CST346
JMP R3
EIF_ELSE174
LD R0 CST173 ; R0 <- cst 0
BR IGNORE_CST173
CST173 .FILL #0
IGNORE_CST173
EIF_ENDELSE174
EIF_ENDELSE175
LD R3 CST347 ; R3 <- address of label EIF_ENDELSE177
BR IGNORE_CST347
CST347 .FILL #13976
IGNORE_CST347
JMP R3
EIF_ELSE177
LD R0 CST176 ; R0 <- cst 0
BR IGNORE_CST176
CST176 .FILL #0
IGNORE_CST176
EIF_ENDELSE177
ADD R0 R0 #0
BRnp IGNORE_JMP190
LD R3 CST348 ; R3 <- address of label IF_ELSE190
BR IGNORE_CST348
CST348 .FILL #14044
IGNORE_CST348
JMP R3
IGNORE_JMP190
; e1
; e1
LD R0 CST178
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST178
CST178 .FILL #2
IGNORE_CST178
LD R1 CST179
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST179
CST179 .FILL #2
IGNORE_CST179
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST180
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST180
CST180 .FILL #1
IGNORE_CST180
LD R1 CST181
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST181
CST181 .FILL #1
IGNORE_CST181
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST182
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST182
CST182 .FILL #-4
IGNORE_CST182
LD R1 CST183
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST183
CST183 .FILL #-4
IGNORE_CST183
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST184
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST184
CST184 .FILL #0
IGNORE_CST184
LD R3 CST349 ; R3 <- address of label IF_ENDELSE190
BR IGNORE_CST349
CST349 .FILL #14082
IGNORE_CST349
JMP R3
IF_ELSE190
; e1
LD R0 CST185
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST185
CST185 .FILL #2
IGNORE_CST185
LD R1 CST186
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST186
CST186 .FILL #2
IGNORE_CST186
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST187
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST187
CST187 .FILL #1
IGNORE_CST187
LD R1 CST188
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST188
CST188 .FILL #1
IGNORE_CST188
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST189
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST189
CST189 .FILL #0
IGNORE_CST189
IF_ENDELSE190
LD R0 CST105 ; R0 <- cst 0
BR IGNORE_CST105
CST105 .FILL #0
IGNORE_CST105
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST106
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST106
CST106 .FILL #2
IGNORE_CST106
LD R1 CST107
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST107
CST107 .FILL #2
IGNORE_CST107
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP108
LD R3 CST350 ; R3 <- address of label CMP_ELSE108
BR IGNORE_CST350
CST350 .FILL #14119
IGNORE_CST350
JMP R3
IGNORE_JMP108
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST351 ; R3 <- address of label CMP_ENDELSE108
BR IGNORE_CST351
CST351 .FILL #14120
IGNORE_CST351
JMP R3
CMP_ELSE108
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE108
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP112
LD R3 CST352 ; R3 <- address of label IF_ELSE112
BR IGNORE_CST352
CST352 .FILL #14153
IGNORE_CST352
JMP R3
IGNORE_JMP112
LD R0 CST109
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST109
CST109 .FILL #2
IGNORE_CST109
LD R1 CST110
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST110
CST110 .FILL #2
IGNORE_CST110
LD R1 CST111
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST111
CST111 .FILL #0
IGNORE_CST111

STR R0 R1 #0 ; R0 <- M[R1]
LD R3 CST353 ; R3 <- address of label IF_ENDELSE112
BR IGNORE_CST353
CST353 .FILL #14153
IGNORE_CST353
JMP R3
IF_ELSE112
IF_ENDELSE112
LD R0 CST103
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST103
CST103 .FILL #1
IGNORE_CST103
LD R1 CST104
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST104
CST104 .FILL #1
IGNORE_CST104
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0 ; ++(lvalue)
LD R3 CST354 ; R3 <- address of label STARTWHILE97
BR IGNORE_CST354
CST354 .FILL #13310
IGNORE_CST354
JMP R3
ENDWHILE97
; Call function copy_grid
LD R3 CST355 ; R3 <- address of label FUN_USER_copy_grid
BR IGNORE_CST355
CST355 .FILL #12453
IGNORE_CST355
JSRR R3
LD R1 CST97
ADD R6 R6 R1 ; Remove copy_grid's args from the stack
BR IGNORE_CST97
CST97 .FILL #0
IGNORE_CST97
LD R0 CST95
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST95
CST95 .FILL #3
IGNORE_CST95
LD R1 CST96
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST96
CST96 .FILL #3
IGNORE_CST96
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0
ADD R0 R0 #1 ; (lvalue)--
LD R3 CST356 ; R3 <- address of label STARTWHILE89
BR IGNORE_CST356
CST356 .FILL #13235
IGNORE_CST356
JMP R3
ENDWHILE89
LD R0 CST89 ; R0 <- cst 0
BR IGNORE_CST89
CST89 .FILL #0
IGNORE_CST89
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_main
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable input to the stack 
LD R0 CST357 ; R0 <- address of label STRING4
BR IGNORE_CST357
CST357 .FILL #14788
IGNORE_CST357
LD R1 CST266
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST266
CST266 .FILL #1
IGNORE_CST266
LD R0 CST358 ; R0 <- address of label STRING3
BR IGNORE_CST358
CST358 .FILL #14771
IGNORE_CST358
LD R1 CST265
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST265
CST265 .FILL #2
IGNORE_CST265
; Call function init_grid
LD R0 CST262
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST262
CST262 .FILL #1
IGNORE_CST262
LD R1 CST263
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST263
CST263 .FILL #1
IGNORE_CST263
STR R0 R6 #0 ; Adding arg on the stack to call init_grid
ADD R6 R6 #-1
LD R3 CST359 ; R3 <- address of label FUN_USER_init_grid
BR IGNORE_CST359
CST359 .FILL #12971
IGNORE_CST359
JSRR R3
LD R1 CST264
ADD R6 R6 R1 ; Remove init_grid's args from the stack
BR IGNORE_CST264
CST264 .FILL #1
IGNORE_CST264
; Call function print_grid
LD R0 CST259
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST259
CST259 .FILL #1
IGNORE_CST259
LD R1 CST260
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST260
CST260 .FILL #1
IGNORE_CST260
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST360 ; R3 <- address of label FUN_USER_print_grid
BR IGNORE_CST360
CST360 .FILL #12623
IGNORE_CST360
JSRR R3
LD R1 CST261
ADD R6 R6 R1 ; Remove print_grid's args from the stack
BR IGNORE_CST261
CST261 .FILL #1
IGNORE_CST261
LD R0 CST361 ; R0 <- address of label STRING2
BR IGNORE_CST361
CST361 .FILL #14756
IGNORE_CST361
PUTS
GETC
LD R1 CST258
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST258
CST258 .FILL #0
IGNORE_CST258
; Call function put_sq
; e1
LD R0 CST254
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST254
CST254 .FILL #1
IGNORE_CST254
LD R1 CST255
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST255
CST255 .FILL #1
IGNORE_CST255
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST256 ; R0 <- cst 4
BR IGNORE_CST256
CST256 .FILL #4
IGNORE_CST256
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
LD R3 CST362 ; R3 <- address of label FUN_USER_put_sq
BR IGNORE_CST362
CST362 .FILL #13094
IGNORE_CST362
JSRR R3
LD R1 CST257
ADD R6 R6 R1 ; Remove put_sq's args from the stack
BR IGNORE_CST257
CST257 .FILL #1
IGNORE_CST257
; Call function put_sq
; e1
LD R0 CST250
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST250
CST250 .FILL #1
IGNORE_CST250
LD R1 CST251
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST251
CST251 .FILL #1
IGNORE_CST251
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST252 ; R0 <- cst 8
BR IGNORE_CST252
CST252 .FILL #8
IGNORE_CST252
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
LD R3 CST363 ; R3 <- address of label FUN_USER_put_sq
BR IGNORE_CST363
CST363 .FILL #13094
IGNORE_CST363
JSRR R3
LD R1 CST253
ADD R6 R6 R1 ; Remove put_sq's args from the stack
BR IGNORE_CST253
CST253 .FILL #1
IGNORE_CST253
; Call function put_sq
; e1
LD R0 CST246
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST246
CST246 .FILL #1
IGNORE_CST246
LD R1 CST247
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST247
CST247 .FILL #1
IGNORE_CST247
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST248 ; R0 <- cst 12
BR IGNORE_CST248
CST248 .FILL #12
IGNORE_CST248
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
LD R3 CST364 ; R3 <- address of label FUN_USER_put_sq
BR IGNORE_CST364
CST364 .FILL #13094
IGNORE_CST364
JSRR R3
LD R1 CST249
ADD R6 R6 R1 ; Remove put_sq's args from the stack
BR IGNORE_CST249
CST249 .FILL #1
IGNORE_CST249
; Call function clear
LD R3 CST365 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST365
CST365 .FILL #12436
IGNORE_CST365
JSRR R3
LD R1 CST245
ADD R6 R6 R1 ; Remove clear's args from the stack
BR IGNORE_CST245
CST245 .FILL #0
IGNORE_CST245
; Call function print_grid
LD R0 CST242
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST242
CST242 .FILL #1
IGNORE_CST242
LD R1 CST243
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST243
CST243 .FILL #1
IGNORE_CST243
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST366 ; R3 <- address of label FUN_USER_print_grid
BR IGNORE_CST366
CST366 .FILL #12623
IGNORE_CST366
JSRR R3
LD R1 CST244
ADD R6 R6 R1 ; Remove print_grid's args from the stack
BR IGNORE_CST244
CST244 .FILL #1
IGNORE_CST244
STARTWHILE202
GETC
LD R1 CST204
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST204
CST204 .FILL #0
IGNORE_CST204
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST205 ; R0 <- cst 120
BR IGNORE_CST205
CST205 .FILL #120
IGNORE_CST205
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP206
LD R3 CST367 ; R3 <- address of label CMP_ELSE206
BR IGNORE_CST367
CST367 .FILL #14438
IGNORE_CST367
JMP R3
IGNORE_JMP206
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST368 ; R3 <- address of label CMP_ENDELSE206
BR IGNORE_CST368
CST368 .FILL #14439
IGNORE_CST368
JMP R3
CMP_ELSE206
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE206
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP209
LD R3 CST369 ; R3 <- address of label EIF_ELSE209
BR IGNORE_CST369
CST369 .FILL #14452
IGNORE_CST369
JMP R3
IGNORE_JMP209
LD R0 CST207 ; R0 <- cst 0
BR IGNORE_CST207
CST207 .FILL #0
IGNORE_CST207
LD R3 CST370 ; R3 <- address of label EIF_ENDELSE209
BR IGNORE_CST370
CST370 .FILL #14455
IGNORE_CST370
JMP R3
EIF_ELSE209
LD R0 CST208 ; R0 <- cst 1
BR IGNORE_CST208
CST208 .FILL #1
IGNORE_CST208
EIF_ENDELSE209
ADD R0 R0 #0
BRnp IGNORE_JMP202
LD R3 CST371 ; R3 <- address of label ENDWHILE202
BR IGNORE_CST371
CST371 .FILL #14742
IGNORE_CST371
JMP R3
IGNORE_JMP202
LD R0 CST235
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST235
CST235 .FILL #0
IGNORE_CST235
LD R1 CST236
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST236
CST236 .FILL #0
IGNORE_CST236
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST237 ; R0 <- cst 122
BR IGNORE_CST237
CST237 .FILL #122
IGNORE_CST237
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP238
LD R3 CST372 ; R3 <- address of label CMP_ELSE238
BR IGNORE_CST372
CST372 .FILL #14498
IGNORE_CST372
JMP R3
IGNORE_JMP238
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST373 ; R3 <- address of label CMP_ENDELSE238
BR IGNORE_CST373
CST373 .FILL #14499
IGNORE_CST373
JMP R3
CMP_ELSE238
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE238
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP241
LD R3 CST374 ; R3 <- address of label IF_ELSE241
BR IGNORE_CST374
CST374 .FILL #14524
IGNORE_CST374
JMP R3
IGNORE_JMP241
; Call function move_grid
LD R0 CST239 ; R0 <- cst 4
BR IGNORE_CST239
CST239 .FILL #4
IGNORE_CST239
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST375 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST375
CST375 .FILL #13213
IGNORE_CST375
JSRR R3
LD R1 CST240
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST240
CST240 .FILL #1
IGNORE_CST240
LD R3 CST376 ; R3 <- address of label IF_ENDELSE241
BR IGNORE_CST376
CST376 .FILL #14524
IGNORE_CST376
JMP R3
IF_ELSE241
IF_ENDELSE241
LD R0 CST228
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST228
CST228 .FILL #0
IGNORE_CST228
LD R1 CST229
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST229
CST229 .FILL #0
IGNORE_CST229
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST230 ; R0 <- cst 115
BR IGNORE_CST230
CST230 .FILL #115
IGNORE_CST230
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP231
LD R3 CST377 ; R3 <- address of label CMP_ELSE231
BR IGNORE_CST377
CST377 .FILL #14561
IGNORE_CST377
JMP R3
IGNORE_JMP231
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST378 ; R3 <- address of label CMP_ENDELSE231
BR IGNORE_CST378
CST378 .FILL #14562
IGNORE_CST378
JMP R3
CMP_ELSE231
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE231
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP234
LD R3 CST379 ; R3 <- address of label IF_ELSE234
BR IGNORE_CST379
CST379 .FILL #14585
IGNORE_CST379
JMP R3
IGNORE_JMP234
; Call function move_grid
LD R0 CST232 ; R0 <- cst 4
BR IGNORE_CST232
CST232 .FILL #4
IGNORE_CST232
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST380 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST380
CST380 .FILL #13213
IGNORE_CST380
JSRR R3
LD R1 CST233
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST233
CST233 .FILL #1
IGNORE_CST233
LD R3 CST381 ; R3 <- address of label IF_ENDELSE234
BR IGNORE_CST381
CST381 .FILL #14585
IGNORE_CST381
JMP R3
IF_ELSE234
IF_ENDELSE234
LD R0 CST221
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST221
CST221 .FILL #0
IGNORE_CST221
LD R1 CST222
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST222
CST222 .FILL #0
IGNORE_CST222
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST223 ; R0 <- cst 100
BR IGNORE_CST223
CST223 .FILL #100
IGNORE_CST223
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP224
LD R3 CST382 ; R3 <- address of label CMP_ELSE224
BR IGNORE_CST382
CST382 .FILL #14622
IGNORE_CST382
JMP R3
IGNORE_JMP224
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST383 ; R3 <- address of label CMP_ENDELSE224
BR IGNORE_CST383
CST383 .FILL #14623
IGNORE_CST383
JMP R3
CMP_ELSE224
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE224
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP227
LD R3 CST384 ; R3 <- address of label IF_ELSE227
BR IGNORE_CST384
CST384 .FILL #14646
IGNORE_CST384
JMP R3
IGNORE_JMP227
; Call function move_grid
LD R0 CST225 ; R0 <- cst 1
BR IGNORE_CST225
CST225 .FILL #1
IGNORE_CST225
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST385 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST385
CST385 .FILL #13213
IGNORE_CST385
JSRR R3
LD R1 CST226
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST226
CST226 .FILL #1
IGNORE_CST226
LD R3 CST386 ; R3 <- address of label IF_ENDELSE227
BR IGNORE_CST386
CST386 .FILL #14646
IGNORE_CST386
JMP R3
IF_ELSE227
IF_ENDELSE227
LD R0 CST214
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST214
CST214 .FILL #0
IGNORE_CST214
LD R1 CST215
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST215
CST215 .FILL #0
IGNORE_CST215
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST216 ; R0 <- cst 113
BR IGNORE_CST216
CST216 .FILL #113
IGNORE_CST216
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP217
LD R3 CST387 ; R3 <- address of label CMP_ELSE217
BR IGNORE_CST387
CST387 .FILL #14683
IGNORE_CST387
JMP R3
IGNORE_JMP217
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST388 ; R3 <- address of label CMP_ENDELSE217
BR IGNORE_CST388
CST388 .FILL #14684
IGNORE_CST388
JMP R3
CMP_ELSE217
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE217
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP220
LD R3 CST389 ; R3 <- address of label IF_ELSE220
BR IGNORE_CST389
CST389 .FILL #14709
IGNORE_CST389
JMP R3
IGNORE_JMP220
; Call function move_grid
LD R0 CST218 ; R0 <- cst 1
BR IGNORE_CST218
CST218 .FILL #1
IGNORE_CST218
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST390 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST390
CST390 .FILL #13213
IGNORE_CST390
JSRR R3
LD R1 CST219
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST219
CST219 .FILL #1
IGNORE_CST219
LD R3 CST391 ; R3 <- address of label IF_ENDELSE220
BR IGNORE_CST391
CST391 .FILL #14709
IGNORE_CST391
JMP R3
IF_ELSE220
IF_ENDELSE220
; Call function clear
LD R3 CST392 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST392
CST392 .FILL #12436
IGNORE_CST392
JSRR R3
LD R1 CST213
ADD R6 R6 R1 ; Remove clear's args from the stack
BR IGNORE_CST213
CST213 .FILL #0
IGNORE_CST213
; Call function print_grid
LD R0 CST210
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST210
CST210 .FILL #1
IGNORE_CST210
LD R1 CST211
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST211
CST211 .FILL #1
IGNORE_CST211
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST393 ; R3 <- address of label FUN_USER_print_grid
BR IGNORE_CST393
CST393 .FILL #12623
IGNORE_CST393
JSRR R3
LD R1 CST212
ADD R6 R6 R1 ; Remove print_grid's args from the stack
BR IGNORE_CST212
CST212 .FILL #1
IGNORE_CST212
LD R3 CST394 ; R3 <- address of label STARTWHILE202
BR IGNORE_CST394
CST394 .FILL #14408
IGNORE_CST394
JMP R3
ENDWHILE202
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
STRINGS
STRING1 .STRINGZ "\n\n\n\n\n\n\n\n" ; 8
STRING2 .STRINGZ "Enter seed : \n" ; 14
STRING3 .STRINGZ "xxxxxxxxxxxxxxxx" ; 16
STRING4 .STRINGZ "xxxxxxxxxxxxxxxx" ; 16
STATIC_VAR
LVALUE_ADDR .BLKW #1
V_rnd .BLKW #1
V_grid .BLKW #1
V_altgrid .BLKW #1

.END
; mem 14805 14808
