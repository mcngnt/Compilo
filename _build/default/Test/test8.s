.ORIG x3000
LD R6 CST258 ; Init R6 value to the start of the stack
BR IGNORE_CST258
CST258 .FILL #65023
IGNORE_CST258
ADD R5 R6 #0
LD R4 CST260 ; R0 <- cst 14980
BR IGNORE_CST260
CST260 .FILL #14980
IGNORE_CST260
LD R3 CST262 ; R0 <- cst 14353
BR IGNORE_CST262
CST262 .FILL #14353
IGNORE_CST262
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_gen_rnd
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
; e1
; e1
; e1
AND R0 R0 #0
ADD R0 R0 #0
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST3 ; R0 <- cst 9769
BR IGNORE_CST3
CST3 .FILL #9769
IGNORE_CST3
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST264 ; R0 <- cst 12299
BR IGNORE_CST264
CST264 .FILL #12299
IGNORE_CST264
JSRR R3 ; Multiply R0 and R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST4 ; R0 <- cst 431
BR IGNORE_CST4
CST4 .FILL #431
IGNORE_CST4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST5 ; R0 <- cst 32000
BR IGNORE_CST5
CST5 .FILL #32000
IGNORE_CST5
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST266 ; R0 <- cst 12357
BR IGNORE_CST266
CST266 .FILL #12357
IGNORE_CST266
JSRR R3 ; Compute R1 % R0
AND R1 R1 #0
ADD R1 R1 #0
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_clear
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST268 ; R0 <- cst 14863
BR IGNORE_CST268
CST268 .FILL #14863
IGNORE_CST268
PUTS
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_print_int
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable k to the stack 
AND R0 R0 #0
ADD R0 R0 #-5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #9
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRnz IGNORE_JMP_IF20
LD R3 CST270 ; R0 <- cst 12492
BR IGNORE_CST270
CST270 .FILL #12492
IGNORE_CST270
JMP R3
IGNORE_JMP_IF20
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST272 ; R0 <- cst 12493
BR IGNORE_CST272
CST272 .FILL #12493
IGNORE_CST272
JMP R3
CMP_ELSE20
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE20
; R0 <-  e1 < e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF35
LD R3 CST274 ; R0 <- cst 12638
BR IGNORE_CST274
CST274 .FILL #12638
IGNORE_CST274
JMP R3
IGNORE_JMP_IF35
AND R0 R0 #0
ADD R0 R0 #-5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF25
LD R3 CST276 ; R0 <- cst 12533
BR IGNORE_CST276
CST276 .FILL #12533
IGNORE_CST276
JMP R3
IGNORE_JMP_IF25
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST278 ; R0 <- cst 12534
BR IGNORE_CST278
CST278 .FILL #12534
IGNORE_CST278
JMP R3
CMP_ELSE25
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE25
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF29
LD R3 CST280 ; R0 <- cst 12579
BR IGNORE_CST280
CST280 .FILL #12579
IGNORE_CST280
JMP R3
IGNORE_JMP_IF29
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF28
LD R3 CST282 ; R0 <- cst 12574
BR IGNORE_CST282
CST282 .FILL #12574
IGNORE_CST282
JMP R3
IGNORE_JMP_IF28
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST284 ; R0 <- cst 12575
BR IGNORE_CST284
CST284 .FILL #12575
IGNORE_CST284
JMP R3
CMP_ELSE28
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE28
; R0 <-  e1 == e2
LD R3 CST286 ; R0 <- cst 12581
BR IGNORE_CST286
CST286 .FILL #12581
IGNORE_CST286
JMP R3
EIF_ELSE29
AND R0 R0 #0
ADD R0 R0 #0
EIF_ENDELSE29
ADD R0 R0 #0
BRnp IGNORE_JMP_IF34
LD R3 CST288 ; R0 <- cst 12595
BR IGNORE_CST288
CST288 .FILL #12595
IGNORE_CST288
JMP R3
IGNORE_JMP_IF34
LD R0 CST30 ; R0 <- cst 32
BR IGNORE_CST30
CST30 .FILL #32
IGNORE_CST30
OUT
LD R3 CST290 ; R0 <- cst 12617
BR IGNORE_CST290
CST290 .FILL #12617
IGNORE_CST290
JMP R3
IF_ELSE34
; e1
LD R0 CST31 ; R0 <- cst 48
BR IGNORE_CST31
CST31 .FILL #48
IGNORE_CST31
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #-5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
OUT
IF_ENDELSE34
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
LD R3 CST292 ; R0 <- cst 12638
BR IGNORE_CST292
CST292 .FILL #12638
IGNORE_CST292
JMP R3
IF_ELSE35
IF_ENDELSE35
; Call function print_int
; e1
AND R0 R0 #0
ADD R0 R0 #-5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #10
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST294 ; R0 <- cst 12314
BR IGNORE_CST294
CST294 .FILL #12314
IGNORE_CST294
JSRR R3 ; Divide R1 by R0
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
; e1
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
LD R3 CST296 ; R0 <- cst 12449
BR IGNORE_CST296
CST296 .FILL #12449
IGNORE_CST296
JSRR R3
AND R1 R1 #0
ADD R1 R1 #2

ADD R6 R6 R1 ; Remove print_int's args from the stack
AND R1 R1 #0
ADD R1 R1 #0
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
; e1
LD R0 CST9 ; R0 <- cst 48
BR IGNORE_CST9
CST9 .FILL #48
IGNORE_CST9
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; e1
AND R0 R0 #0
ADD R0 R0 #-5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #10
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST298 ; R0 <- cst 12357
BR IGNORE_CST298
CST298 .FILL #12357
IGNORE_CST298
JSRR R3 ; Compute R1 % R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
OUT
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_print_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable k to the stack 
LD R0 CST300 ; R0 <- cst 14923
BR IGNORE_CST300
CST300 .FILL #14923
IGNORE_CST300
PUTS
STARTWHILE35
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST41 ; R0 <- cst 16
BR IGNORE_CST41
CST41 .FILL #16
IGNORE_CST41
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF42
LD R3 CST302 ; R0 <- cst 12809
BR IGNORE_CST302
CST302 .FILL #12809
IGNORE_CST302
JMP R3
IGNORE_JMP_IF42
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST304 ; R0 <- cst 12810
BR IGNORE_CST304
CST304 .FILL #12810
IGNORE_CST304
JMP R3
CMP_ELSE42
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE42
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE35
LD R3 CST306 ; R0 <- cst 13101
BR IGNORE_CST306
CST306 .FILL #13101
IGNORE_CST306
JMP R3
IGNORE_JMP_WHILE35
AND R0 R0 #0
ADD R0 R0 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF61
LD R3 CST308 ; R0 <- cst 12866
BR IGNORE_CST308
CST308 .FILL #12866
IGNORE_CST308
JMP R3
IGNORE_JMP_IF61
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST310 ; R0 <- cst 12867
BR IGNORE_CST310
CST310 .FILL #12867
IGNORE_CST310
JMP R3
CMP_ELSE61
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE61
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF67
LD R3 CST312 ; R0 <- cst 12938
BR IGNORE_CST312
CST312 .FILL #12938
IGNORE_CST312
JMP R3
IGNORE_JMP_IF67
; e1
; e1
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST314 ; R0 <- cst 12357
BR IGNORE_CST314
CST314 .FILL #12357
IGNORE_CST314
JSRR R3 ; Compute R1 % R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF66
LD R3 CST316 ; R0 <- cst 12933
BR IGNORE_CST316
CST316 .FILL #12933
IGNORE_CST316
JMP R3
IGNORE_JMP_IF66
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST318 ; R0 <- cst 12934
BR IGNORE_CST318
CST318 .FILL #12934
IGNORE_CST318
JMP R3
CMP_ELSE66
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE66
; R0 <-  e1 == e2
LD R3 CST320 ; R0 <- cst 12940
BR IGNORE_CST320
CST320 .FILL #12940
IGNORE_CST320
JMP R3
EIF_ELSE67
AND R0 R0 #0
ADD R0 R0 #0
EIF_ENDELSE67
ADD R0 R0 #0
BRnp IGNORE_JMP_IF70
LD R3 CST322 ; R0 <- cst 12965
BR IGNORE_CST322
CST322 .FILL #12965
IGNORE_CST322
JMP R3
IGNORE_JMP_IF70
LD R0 CST69 ; R0 <- cst 124
BR IGNORE_CST69
CST69 .FILL #124
IGNORE_CST69
OUT
AND R0 R0 #0
ADD R0 R0 #10
OUT
LD R0 CST324 ; R0 <- cst 14899
BR IGNORE_CST324
CST324 .FILL #14899
IGNORE_CST324
PUTS
LD R0 CST68 ; R0 <- cst 124
BR IGNORE_CST68
CST68 .FILL #124
IGNORE_CST68
OUT
LD R3 CST326 ; R0 <- cst 12965
BR IGNORE_CST326
CST326 .FILL #12965
IGNORE_CST326
JMP R3
IF_ELSE70
IF_ENDELSE70
LD R0 CST56 ; R0 <- cst 32
BR IGNORE_CST56
CST56 .FILL #32
IGNORE_CST56
OUT
; Call function print_int
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
AND R0 R0 #0
ADD R0 R0 #0
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
LD R3 CST328 ; R0 <- cst 12449
BR IGNORE_CST328
CST328 .FILL #12449
IGNORE_CST328
JSRR R3
AND R1 R1 #0
ADD R1 R1 #2

ADD R6 R6 R1 ; Remove print_int's args from the stack
AND R1 R1 #0
ADD R1 R1 #0
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
STARTWHILE44
AND R0 R0 #0
ADD R0 R0 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
AND R0 R0 #0
ADD R0 R0 #3
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF48
LD R3 CST330 ; R0 <- cst 13046
BR IGNORE_CST330
CST330 .FILL #13046
IGNORE_CST330
JMP R3
IGNORE_JMP_IF48
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST332 ; R0 <- cst 13047
BR IGNORE_CST332
CST332 .FILL #13047
IGNORE_CST332
JMP R3
CMP_ELSE48
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE48
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE44
LD R3 CST334 ; R0 <- cst 13079
BR IGNORE_CST334
CST334 .FILL #13079
IGNORE_CST334
JMP R3
IGNORE_JMP_WHILE44
LD R0 CST51 ; R0 <- cst 32
BR IGNORE_CST51
CST51 .FILL #32
IGNORE_CST51
OUT
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST336 ; R0 <- cst 13003
BR IGNORE_CST336
CST336 .FILL #13003
IGNORE_CST336
JMP R3
ENDWHILE44
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST338 ; R0 <- cst 12760
BR IGNORE_CST338
CST338 .FILL #12760
IGNORE_CST338
JMP R3
ENDWHILE35
LD R0 CST340 ; R0 <- cst 14896
BR IGNORE_CST340
CST340 .FILL #14896
IGNORE_CST340
PUTS
LD R0 CST342 ; R0 <- cst 14872
BR IGNORE_CST342
CST342 .FILL #14872
IGNORE_CST342
PUTS
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_init_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable i to the stack 
AND R0 R0 #0
ADD R0 R0 #0
AND R1 R1 #0
ADD R1 R1 #0
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
STARTWHILE70
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST74 ; R0 <- cst 16
BR IGNORE_CST74
CST74 .FILL #16
IGNORE_CST74
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF75
LD R3 CST344 ; R0 <- cst 13166
BR IGNORE_CST344
CST344 .FILL #13166
IGNORE_CST344
JMP R3
IGNORE_JMP_IF75
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST346 ; R0 <- cst 13167
BR IGNORE_CST346
CST346 .FILL #13167
IGNORE_CST346
JMP R3
CMP_ELSE75
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE75
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE70
LD R3 CST348 ; R0 <- cst 13222
BR IGNORE_CST348
CST348 .FILL #13222
IGNORE_CST348
JMP R3
IGNORE_JMP_WHILE70
AND R0 R0 #0
ADD R0 R0 #0
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
STR R0 R1 #0 ; R0 <- M[R1]
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST350 ; R0 <- cst 13131
BR IGNORE_CST350
CST350 .FILL #13131
IGNORE_CST350
JMP R3
ENDWHILE70
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_put_sq
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
AND R1 R1 #0
ADD R1 R1 #-5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
STR R0 R1 #0 ; R0 <- M[R1]
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_spawn_sq
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable q to the stack 
; e1
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; e1
AND R0 R0 #0
ADD R0 R0 #0
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST104 ; R0 <- cst 16
BR IGNORE_CST104
CST104 .FILL #16
IGNORE_CST104
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST352 ; R0 <- cst 12357
BR IGNORE_CST352
CST352 .FILL #12357
IGNORE_CST352
JSRR R3 ; Compute R1 % R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
AND R1 R1 #0
ADD R1 R1 #0
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
STARTWHILE88
AND R0 R0 #0
ADD R0 R0 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF92
LD R3 CST354 ; R0 <- cst 13349
BR IGNORE_CST354
CST354 .FILL #13349
IGNORE_CST354
JMP R3
IGNORE_JMP_IF92
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST356 ; R0 <- cst 13350
BR IGNORE_CST356
CST356 .FILL #13350
IGNORE_CST356
JMP R3
CMP_ELSE92
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE92
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE88
LD R3 CST358 ; R0 <- cst 13411
BR IGNORE_CST358
CST358 .FILL #13411
IGNORE_CST358
JMP R3
IGNORE_JMP_WHILE88
; Call function gen_rnd
LD R3 CST360 ; R0 <- cst 12376
BR IGNORE_CST360
CST360 .FILL #12376
IGNORE_CST360
JSRR R3
AND R1 R1 #0
ADD R1 R1 #0

ADD R6 R6 R1 ; Remove gen_rnd's args from the stack
; e1
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; e1
AND R0 R0 #0
ADD R0 R0 #0
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST97 ; R0 <- cst 16
BR IGNORE_CST97
CST97 .FILL #16
IGNORE_CST97
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST362 ; R0 <- cst 12357
BR IGNORE_CST362
CST362 .FILL #12357
IGNORE_CST362
JSRR R3 ; Compute R1 % R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
AND R1 R1 #0
ADD R1 R1 #0
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
LD R3 CST364 ; R0 <- cst 13313
BR IGNORE_CST364
CST364 .FILL #13313
IGNORE_CST364
JMP R3
ENDWHILE88
; Call function put_sq
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
AND R0 R0 #0
ADD R0 R0 #2
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
LD R3 CST366 ; R0 <- cst 13227
BR IGNORE_CST366
CST366 .FILL #13227
IGNORE_CST366
JSRR R3
AND R1 R1 #0
ADD R1 R1 #2

ADD R6 R6 R1 ; Remove put_sq's args from the stack
; Call function gen_rnd
LD R3 CST368 ; R0 <- cst 12376
BR IGNORE_CST368
CST368 .FILL #12376
IGNORE_CST368
JSRR R3
AND R1 R1 #0
ADD R1 R1 #0

ADD R6 R6 R1 ; Remove gen_rnd's args from the stack
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_move_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable b to the stack 
ADD R6 R6 #-1 ; Add variable q to the stack 
ADD R6 R6 #-1 ; Add variable p to the stack 
ADD R6 R6 #-1 ; Add variable i to the stack 
ADD R6 R6 #-1 ; Add variable a to the stack 
ADD R6 R6 #-1 ; Add variable nb to the stack 
AND R0 R0 #0
ADD R0 R0 #12
AND R1 R1 #0
ADD R1 R1 #5
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
STARTWHILE105
AND R0 R0 #0
ADD R0 R0 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF109
LD R3 CST370 ; R0 <- cst 13505
BR IGNORE_CST370
CST370 .FILL #13505
IGNORE_CST370
JMP R3
IGNORE_JMP_IF109
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST372 ; R0 <- cst 13506
BR IGNORE_CST372
CST372 .FILL #13506
IGNORE_CST372
JMP R3
CMP_ELSE109
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE109
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE105
LD R3 CST374 ; R0 <- cst 14347
BR IGNORE_CST374
CST374 .FILL #14347
IGNORE_CST374
JMP R3
IGNORE_JMP_WHILE105
AND R0 R0 #0
ADD R0 R0 #0
AND R1 R1 #0
ADD R1 R1 #3
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
STARTWHILE111
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST115 ; R0 <- cst 16
BR IGNORE_CST115
CST115 .FILL #16
IGNORE_CST115
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF116
LD R3 CST376 ; R0 <- cst 13555
BR IGNORE_CST376
CST376 .FILL #13555
IGNORE_CST376
JMP R3
IGNORE_JMP_IF116
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST378 ; R0 <- cst 13556
BR IGNORE_CST378
CST378 .FILL #13556
IGNORE_CST378
JMP R3
CMP_ELSE116
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE116
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE111
LD R3 CST380 ; R0 <- cst 14325
BR IGNORE_CST380
CST380 .FILL #14325
IGNORE_CST380
JMP R3
IGNORE_JMP_WHILE111
; e1
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
AND R1 R1 #0
ADD R1 R1 #1
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
; e1
; e1
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
AND R1 R1 #0
ADD R1 R1 #2
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
AND R0 R0 #0
ADD R0 R0 #1
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
AND R1 R1 #0
ADD R1 R1 #4
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
AND R0 R0 #0
ADD R0 R0 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF121
LD R3 CST382 ; R0 <- cst 13701
BR IGNORE_CST382
CST382 .FILL #13701
IGNORE_CST382
JMP R3
IGNORE_JMP_IF121
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST384 ; R0 <- cst 13702
BR IGNORE_CST384
CST384 .FILL #13702
IGNORE_CST384
JMP R3
CMP_ELSE121
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE121
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF127
LD R3 CST386 ; R0 <- cst 13765
BR IGNORE_CST386
CST386 .FILL #13765
IGNORE_CST386
JMP R3
IGNORE_JMP_IF127
AND R0 R0 #0
ADD R0 R0 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRnz IGNORE_JMP_IF126
LD R3 CST388 ; R0 <- cst 13760
BR IGNORE_CST388
CST388 .FILL #13760
IGNORE_CST388
JMP R3
IGNORE_JMP_IF126
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST390 ; R0 <- cst 13761
BR IGNORE_CST390
CST390 .FILL #13761
IGNORE_CST390
JMP R3
CMP_ELSE126
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE126
; R0 <-  e1 < e2
LD R3 CST392 ; R0 <- cst 13767
BR IGNORE_CST392
CST392 .FILL #13767
IGNORE_CST392
JMP R3
EIF_ELSE127
AND R0 R0 #0
ADD R0 R0 #0
EIF_ENDELSE127
ADD R0 R0 #0
BRnp IGNORE_JMP_IF134
LD R3 CST394 ; R0 <- cst 13831
BR IGNORE_CST394
CST394 .FILL #13831
IGNORE_CST394
JMP R3
IGNORE_JMP_IF134
; e1
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST132 ; R0 <- cst 16
BR IGNORE_CST132
CST132 .FILL #16
IGNORE_CST132
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF133
LD R3 CST396 ; R0 <- cst 13826
BR IGNORE_CST396
CST396 .FILL #13826
IGNORE_CST396
JMP R3
IGNORE_JMP_IF133
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST398 ; R0 <- cst 13827
BR IGNORE_CST398
CST398 .FILL #13827
IGNORE_CST398
JMP R3
CMP_ELSE133
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE133
; R0 <-  e1 > e2
LD R3 CST400 ; R0 <- cst 13833
BR IGNORE_CST400
CST400 .FILL #13833
IGNORE_CST400
JMP R3
EIF_ELSE134
AND R0 R0 #0
ADD R0 R0 #0
EIF_ENDELSE134
ADD R0 R0 #0
BRnp IGNORE_JMP_IF158
LD R3 CST402 ; R0 <- cst 14119
BR IGNORE_CST402
CST402 .FILL #14119
IGNORE_CST402
JMP R3
IGNORE_JMP_IF158
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF137
LD R3 CST404 ; R0 <- cst 13873
BR IGNORE_CST404
CST404 .FILL #13873
IGNORE_CST404
JMP R3
IGNORE_JMP_IF137
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST406 ; R0 <- cst 13874
BR IGNORE_CST406
CST406 .FILL #13874
IGNORE_CST406
JMP R3
CMP_ELSE137
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE137
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF141
LD R3 CST408 ; R0 <- cst 13886
BR IGNORE_CST408
CST408 .FILL #13886
IGNORE_CST408
JMP R3
IGNORE_JMP_IF141
AND R0 R0 #0
ADD R0 R0 #1
LD R3 CST410 ; R0 <- cst 13923
BR IGNORE_CST410
CST410 .FILL #13923
IGNORE_CST410
JMP R3
EIF_ELSE141
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #4
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF140
LD R3 CST412 ; R0 <- cst 13922
BR IGNORE_CST412
CST412 .FILL #13922
IGNORE_CST412
JMP R3
IGNORE_JMP_IF140
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST414 ; R0 <- cst 13923
BR IGNORE_CST414
CST414 .FILL #13923
IGNORE_CST414
JMP R3
CMP_ELSE140
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE140
; R0 <-  e1 == e2
EIF_ENDELSE141
ADD R0 R0 #0
BRnp IGNORE_JMP_IF157
LD R3 CST416 ; R0 <- cst 13935
BR IGNORE_CST416
CST416 .FILL #13935
IGNORE_CST416
JMP R3
IGNORE_JMP_IF157
AND R0 R0 #0
ADD R0 R0 #1
LD R3 CST418 ; R0 <- cst 14115
BR IGNORE_CST418
CST418 .FILL #14115
IGNORE_CST418
JMP R3
EIF_ELSE157
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF144
LD R3 CST420 ; R0 <- cst 13969
BR IGNORE_CST420
CST420 .FILL #13969
IGNORE_CST420
JMP R3
IGNORE_JMP_IF144
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST422 ; R0 <- cst 13970
BR IGNORE_CST422
CST422 .FILL #13970
IGNORE_CST422
JMP R3
CMP_ELSE144
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE144
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF148
LD R3 CST424 ; R0 <- cst 13982
BR IGNORE_CST424
CST424 .FILL #13982
IGNORE_CST424
JMP R3
IGNORE_JMP_IF148
AND R0 R0 #0
ADD R0 R0 #1
LD R3 CST426 ; R0 <- cst 14019
BR IGNORE_CST426
CST426 .FILL #14019
IGNORE_CST426
JMP R3
EIF_ELSE148
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF147
LD R3 CST428 ; R0 <- cst 14018
BR IGNORE_CST428
CST428 .FILL #14018
IGNORE_CST428
JMP R3
IGNORE_JMP_IF147
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST430 ; R0 <- cst 14019
BR IGNORE_CST430
CST430 .FILL #14019
IGNORE_CST430
JMP R3
CMP_ELSE147
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE147
; R0 <-  e1 == e2
EIF_ENDELSE148
ADD R0 R0 #0
BRnp IGNORE_JMP_IF156
LD R3 CST432 ; R0 <- cst 14113
BR IGNORE_CST432
CST432 .FILL #14113
IGNORE_CST432
JMP R3
IGNORE_JMP_IF156
; e1
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST434 ; R0 <- cst 12314
BR IGNORE_CST434
CST434 .FILL #12314
IGNORE_CST434
JSRR R3 ; Divide R1 by R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
; e1
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #-4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #-4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST436 ; R0 <- cst 12314
BR IGNORE_CST436
CST436 .FILL #12314
IGNORE_CST436
JSRR R3 ; Divide R1 by R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF155
LD R3 CST438 ; R0 <- cst 14108
BR IGNORE_CST438
CST438 .FILL #14108
IGNORE_CST438
JMP R3
IGNORE_JMP_IF155
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST440 ; R0 <- cst 14109
BR IGNORE_CST440
CST440 .FILL #14109
IGNORE_CST440
JMP R3
CMP_ELSE155
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE155
; R0 <-  e1 == e2
LD R3 CST442 ; R0 <- cst 14115
BR IGNORE_CST442
CST442 .FILL #14115
IGNORE_CST442
JMP R3
EIF_ELSE156
AND R0 R0 #0
ADD R0 R0 #0
EIF_ENDELSE156
EIF_ENDELSE157
LD R3 CST444 ; R0 <- cst 14121
BR IGNORE_CST444
CST444 .FILL #14121
IGNORE_CST444
JMP R3
EIF_ELSE158
AND R0 R0 #0
ADD R0 R0 #0
EIF_ENDELSE158
ADD R0 R0 #0
BRnp IGNORE_JMP_IF177
LD R3 CST446 ; R0 <- cst 14304
BR IGNORE_CST446
CST446 .FILL #14304
IGNORE_CST446
JMP R3
IGNORE_JMP_IF177
AND R0 R0 #0
ADD R0 R0 #2
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #2

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF161
LD R3 CST448 ; R0 <- cst 14163
BR IGNORE_CST448
CST448 .FILL #14163
IGNORE_CST448
JMP R3
IGNORE_JMP_IF161
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST450 ; R0 <- cst 14164
BR IGNORE_CST450
CST450 .FILL #14164
IGNORE_CST450
JMP R3
CMP_ELSE161
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE161
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF176
LD R3 CST452 ; R0 <- cst 14203
BR IGNORE_CST452
CST452 .FILL #14203
IGNORE_CST452
JMP R3
IGNORE_JMP_IF176
AND R0 R0 #0
ADD R0 R0 #4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
AND R1 R1 #0
ADD R1 R1 #2

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
STR R0 R1 #0 ; R0 <- M[R1]
AND R0 R0 #0
ADD R0 R0 #0
AND R1 R1 #0
ADD R1 R1 #1

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
STR R0 R1 #0 ; R0 <- M[R1]
LD R3 CST454 ; R0 <- cst 14300
BR IGNORE_CST454
CST454 .FILL #14300
IGNORE_CST454
JMP R3
IF_ELSE176
AND R0 R0 #0
ADD R0 R0 #2
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #2

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
AND R0 R0 #0
ADD R0 R0 #4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF170
LD R3 CST456 ; R0 <- cst 14250
BR IGNORE_CST456
CST456 .FILL #14250
IGNORE_CST456
JMP R3
IGNORE_JMP_IF170
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST458 ; R0 <- cst 14251
BR IGNORE_CST458
CST458 .FILL #14251
IGNORE_CST458
JMP R3
CMP_ELSE170
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE170
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF175
LD R3 CST460 ; R0 <- cst 14300
BR IGNORE_CST460
CST460 .FILL #14300
IGNORE_CST460
JMP R3
IGNORE_JMP_IF175
AND R0 R0 #0
ADD R0 R0 #0
AND R1 R1 #0
ADD R1 R1 #1

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
STR R0 R1 #0 ; R0 <- M[R1]
; e1
AND R0 R0 #0
ADD R0 R0 #4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #4

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
AND R0 R0 #0
ADD R0 R0 #2
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST462 ; R0 <- cst 12299
BR IGNORE_CST462
CST462 .FILL #12299
IGNORE_CST462
JSRR R3 ; Multiply R0 and R1
AND R1 R1 #0
ADD R1 R1 #2

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
STR R0 R1 #0 ; R0 <- M[R1]
LD R3 CST464 ; R0 <- cst 14300
BR IGNORE_CST464
CST464 .FILL #14300
IGNORE_CST464
JMP R3
IF_ELSE175
IF_ENDELSE175
IF_ENDELSE176
LD R3 CST466 ; R0 <- cst 14304
BR IGNORE_CST466
CST466 .FILL #14304
IGNORE_CST466
JMP R3
IF_ELSE177
IF_ENDELSE177
AND R0 R0 #0
ADD R0 R0 #3
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #3

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0 ; ++(lvalue)
LD R3 CST468 ; R0 <- cst 13520
BR IGNORE_CST468
CST468 .FILL #13520
IGNORE_CST468
JMP R3
ENDWHILE111
AND R0 R0 #0
ADD R0 R0 #5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #5

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0
ADD R0 R0 #1 ; (lvalue)--
LD R3 CST470 ; R0 <- cst 13471
BR IGNORE_CST470
CST470 .FILL #13471
IGNORE_CST470
JMP R3
ENDWHILE105
AND R0 R0 #0
ADD R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_main
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable input to the stack 
LD R0 CST472 ; R0 <- cst 14963
BR IGNORE_CST472
CST472 .FILL #14963
IGNORE_CST472
AND R1 R1 #0
ADD R1 R1 #1
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
; Call function init_grid
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call init_grid
ADD R6 R6 #-1
LD R3 CST474 ; R0 <- cst 13114
BR IGNORE_CST474
CST474 .FILL #13114
IGNORE_CST474
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove init_grid's args from the stack
; Call function print_grid
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST476 ; R0 <- cst 12747
BR IGNORE_CST476
CST476 .FILL #12747
IGNORE_CST476
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove print_grid's args from the stack
LD R0 CST478 ; R0 <- cst 14948
BR IGNORE_CST478
CST478 .FILL #14948
IGNORE_CST478
PUTS
GETC
AND R1 R1 #0
ADD R1 R1 #0
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
; Call function spawn_sq
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST480 ; R0 <- cst 13260
BR IGNORE_CST480
CST480 .FILL #13260
IGNORE_CST480
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
; Call function spawn_sq
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST482 ; R0 <- cst 13260
BR IGNORE_CST482
CST482 .FILL #13260
IGNORE_CST482
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
; Call function clear
LD R3 CST484 ; R0 <- cst 12432
BR IGNORE_CST484
CST484 .FILL #12432
IGNORE_CST484
JSRR R3
AND R1 R1 #0
ADD R1 R1 #0

ADD R6 R6 R1 ; Remove clear's args from the stack
; Call function print_grid
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST486 ; R0 <- cst 12747
BR IGNORE_CST486
CST486 .FILL #12747
IGNORE_CST486
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove print_grid's args from the stack
STARTWHILE194
GETC
AND R1 R1 #0
ADD R1 R1 #0
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST197 ; R0 <- cst 120
BR IGNORE_CST197
CST197 .FILL #120
IGNORE_CST197
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF198
LD R3 CST488 ; R0 <- cst 14504
BR IGNORE_CST488
CST488 .FILL #14504
IGNORE_CST488
JMP R3
IGNORE_JMP_IF198
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST490 ; R0 <- cst 14505
BR IGNORE_CST490
CST490 .FILL #14505
IGNORE_CST490
JMP R3
CMP_ELSE198
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE198
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF199
LD R3 CST492 ; R0 <- cst 14517
BR IGNORE_CST492
CST492 .FILL #14517
IGNORE_CST492
JMP R3
IGNORE_JMP_IF199
AND R0 R0 #0
ADD R0 R0 #0
LD R3 CST494 ; R0 <- cst 14519
BR IGNORE_CST494
CST494 .FILL #14519
IGNORE_CST494
JMP R3
EIF_ELSE199
AND R0 R0 #0
ADD R0 R0 #1
EIF_ENDELSE199
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE194
LD R3 CST496 ; R0 <- cst 14858
BR IGNORE_CST496
CST496 .FILL #14858
IGNORE_CST496
JMP R3
IGNORE_JMP_WHILE194
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST233 ; R0 <- cst 122
BR IGNORE_CST233
CST233 .FILL #122
IGNORE_CST233
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF234
LD R3 CST498 ; R0 <- cst 14560
BR IGNORE_CST498
CST498 .FILL #14560
IGNORE_CST498
JMP R3
IGNORE_JMP_IF234
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST500 ; R0 <- cst 14561
BR IGNORE_CST500
CST500 .FILL #14561
IGNORE_CST500
JMP R3
CMP_ELSE234
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE234
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF239
LD R3 CST502 ; R0 <- cst 14602
BR IGNORE_CST502
CST502 .FILL #14602
IGNORE_CST502
JMP R3
IGNORE_JMP_IF239
; Call function move_grid
AND R0 R0 #0
ADD R0 R0 #4
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST504 ; R0 <- cst 13449
BR IGNORE_CST504
CST504 .FILL #13449
IGNORE_CST504
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove move_grid's args from the stack
; Call function spawn_sq
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST506 ; R0 <- cst 13260
BR IGNORE_CST506
CST506 .FILL #13260
IGNORE_CST506
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
LD R3 CST508 ; R0 <- cst 14602
BR IGNORE_CST508
CST508 .FILL #14602
IGNORE_CST508
JMP R3
IF_ELSE239
IF_ENDELSE239
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST224 ; R0 <- cst 115
BR IGNORE_CST224
CST224 .FILL #115
IGNORE_CST224
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF225
LD R3 CST510 ; R0 <- cst 14637
BR IGNORE_CST510
CST510 .FILL #14637
IGNORE_CST510
JMP R3
IGNORE_JMP_IF225
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST512 ; R0 <- cst 14638
BR IGNORE_CST512
CST512 .FILL #14638
IGNORE_CST512
JMP R3
CMP_ELSE225
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE225
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF230
LD R3 CST514 ; R0 <- cst 14677
BR IGNORE_CST514
CST514 .FILL #14677
IGNORE_CST514
JMP R3
IGNORE_JMP_IF230
; Call function move_grid
AND R0 R0 #0
ADD R0 R0 #4
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST516 ; R0 <- cst 13449
BR IGNORE_CST516
CST516 .FILL #13449
IGNORE_CST516
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove move_grid's args from the stack
; Call function spawn_sq
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST518 ; R0 <- cst 13260
BR IGNORE_CST518
CST518 .FILL #13260
IGNORE_CST518
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
LD R3 CST520 ; R0 <- cst 14677
BR IGNORE_CST520
CST520 .FILL #14677
IGNORE_CST520
JMP R3
IF_ELSE230
IF_ENDELSE230
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST215 ; R0 <- cst 100
BR IGNORE_CST215
CST215 .FILL #100
IGNORE_CST215
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF216
LD R3 CST522 ; R0 <- cst 14712
BR IGNORE_CST522
CST522 .FILL #14712
IGNORE_CST522
JMP R3
IGNORE_JMP_IF216
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST524 ; R0 <- cst 14713
BR IGNORE_CST524
CST524 .FILL #14713
IGNORE_CST524
JMP R3
CMP_ELSE216
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE216
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF221
LD R3 CST526 ; R0 <- cst 14752
BR IGNORE_CST526
CST526 .FILL #14752
IGNORE_CST526
JMP R3
IGNORE_JMP_IF221
; Call function move_grid
AND R0 R0 #0
ADD R0 R0 #1
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST528 ; R0 <- cst 13449
BR IGNORE_CST528
CST528 .FILL #13449
IGNORE_CST528
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove move_grid's args from the stack
; Call function spawn_sq
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST530 ; R0 <- cst 13260
BR IGNORE_CST530
CST530 .FILL #13260
IGNORE_CST530
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
LD R3 CST532 ; R0 <- cst 14752
BR IGNORE_CST532
CST532 .FILL #14752
IGNORE_CST532
JMP R3
IF_ELSE221
IF_ENDELSE221
AND R0 R0 #0
ADD R0 R0 #0
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #0

NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST206 ; R0 <- cst 113
BR IGNORE_CST206
CST206 .FILL #113
IGNORE_CST206
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF207
LD R3 CST534 ; R0 <- cst 14787
BR IGNORE_CST534
CST534 .FILL #14787
IGNORE_CST534
JMP R3
IGNORE_JMP_IF207
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST536 ; R0 <- cst 14788
BR IGNORE_CST536
CST536 .FILL #14788
IGNORE_CST536
JMP R3
CMP_ELSE207
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE207
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF212
LD R3 CST538 ; R0 <- cst 14829
BR IGNORE_CST538
CST538 .FILL #14829
IGNORE_CST538
JMP R3
IGNORE_JMP_IF212
; Call function move_grid
AND R0 R0 #0
ADD R0 R0 #1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST540 ; R0 <- cst 13449
BR IGNORE_CST540
CST540 .FILL #13449
IGNORE_CST540
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove move_grid's args from the stack
; Call function spawn_sq
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST542 ; R0 <- cst 13260
BR IGNORE_CST542
CST542 .FILL #13260
IGNORE_CST542
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
LD R3 CST544 ; R0 <- cst 14829
BR IGNORE_CST544
CST544 .FILL #14829
IGNORE_CST544
JMP R3
IF_ELSE212
IF_ENDELSE212
; Call function clear
LD R3 CST546 ; R0 <- cst 12432
BR IGNORE_CST546
CST546 .FILL #12432
IGNORE_CST546
JSRR R3
AND R1 R1 #0
ADD R1 R1 #0

ADD R6 R6 R1 ; Remove clear's args from the stack
; Call function print_grid
AND R0 R0 #0
ADD R0 R0 #1
ADD R0 R0 R4
STR R0 R4 #-1
AND R1 R1 #0
ADD R1 R1 #1

ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST548 ; R0 <- cst 12747
BR IGNORE_CST548
CST548 .FILL #12747
IGNORE_CST548
JSRR R3
AND R1 R1 #0
ADD R1 R1 #1

ADD R6 R6 R1 ; Remove print_grid's args from the stack
LD R3 CST550 ; R0 <- cst 14475
BR IGNORE_CST550
CST550 .FILL #14475
IGNORE_CST550
JMP R3
ENDWHILE194
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
STRINGS
STRING1 .STRINGZ "\n\n\n\n\n\n\n\n" ; 8
STRING2 .STRINGZ "----------------------\n" ; 23
STRING3 .STRINGZ "|\n" ; 2
STRING4 .STRINGZ "|                    |\n" ; 23
STRING5 .STRINGZ "----------------------\n|" ; 24
STRING6 .STRINGZ "Enter seed : \n" ; 14
STRING7 .STRINGZ "xxxxxxxxxxxxxxxx" ; 16
STATIC_VAR
V_rnd .BLKW #1
V_grid .BLKW #1

.END
; mem 14980 14981