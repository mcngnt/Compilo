.ORIG x3000
LD R6 CST19
BR IGNORE_CST19
CST19 .FILL #65023
IGNORE_CST19
ADD R5 R6 #0
LD R4 CST20
BR IGNORE_CST20
CST20 .FILL #12612
IGNORE_CST20
ADD R4 R4 #1
LD R3 CST21
BR IGNORE_CST21
CST21 .FILL #12377
IGNORE_CST21
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_main
ADD R6 R6 #-1
LDR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
LDR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable p to the stack 
ADD R6 R6 #-1 ; Add variable start to the stack 
ADD R6 R6 #-1 ; Add variable n to the stack 
LD R0 CST18 ; R0 <- cst 12
BR IGNORE_CST18
CST18 .FILL #12
IGNORE_CST18
STR R0 R5 #-2
LD R0 CST22
BR IGNORE_CST22
CST22 .FILL #12558
IGNORE_CST22
STR R0 R5 #-1
LD R0 CST17
ADD R0 R0 R4
STR R0 R4 #-1
BR IGNORE_CST17
CST17 .FILL #1
IGNORE_CST17
LDR R0 R4 #1
LDR R0 R4 #-1
STR R0 R5 #-1
LD R0 CST16
ADD R0 R0 R4
STR R0 R4 #-1
BR IGNORE_CST16
CST16 .FILL #1
IGNORE_CST16
LDR R0 R4 #1
LDR R0 R4 #-1
STR R0 R5 #-0
LD R0 CST15 ; R0 <- cst 0
BR IGNORE_CST15
CST15 .FILL #0
IGNORE_CST15
LDR R1 R5 #-0
STR R0 R1 #0
LD R0 CST14
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST14
CST14 .FILL #0
IGNORE_CST14
LDR R0 R5 #-0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
LD R0 CST13 ; R0 <- cst 1
BR IGNORE_CST13
CST13 .FILL #1
IGNORE_CST13
LDR R1 R5 #-0
STR R0 R1 #0
STARTWHILE2
LD R0 CST12
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST12
CST12 .FILL #0
IGNORE_CST12
LDR R0 R5 #-0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST11
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST11
CST11 .FILL #1
IGNORE_CST11
LDR R0 R5 #-1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST10
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST10
CST10 .FILL #2
IGNORE_CST10
LDR R0 R5 #-2
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_JMP9
LD R3 CST23
BR IGNORE_CST23
CST23 .FILL #12479
IGNORE_CST23
JMP R3
IGNORE_JMP9
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST24
BR IGNORE_CST24
CST24 .FILL #12480
IGNORE_CST24
JMP R3
CMP_ELSE9
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE9
; R0 <-  e1 > e2
BRz ENDWHILE2
LD R0 CST8
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST8
CST8 .FILL #0
IGNORE_CST8
LDR R0 R5 #-0
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
LD R0 CST7
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST7
CST7 .FILL #0
IGNORE_CST7
LDR R0 R5 #-0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST6 ; R0 <- cst 1
BR IGNORE_CST6
CST6 .FILL #1
IGNORE_CST6
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R4 #-1
LDR R0 R0 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST5
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST5
CST5 .FILL #0
IGNORE_CST5
LDR R0 R5 #-0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST4 ; R0 <- cst 2
BR IGNORE_CST4
CST4 .FILL #2
IGNORE_CST4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R4 #-1
LDR R0 R0 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LDR R1 R5 #-0
STR R0 R1 #0
BR STARTWHILE2
ENDWHILE2
LD R0 CST2
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1
BR IGNORE_CST2
CST2 .FILL #0
IGNORE_CST2
LDR R0 R5 #-0
STR R0 R4 #-1
LDR R0 R0 #0
STR R0 R4 #0
LD R0 CST1 ; R0 <- cst 0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
STRINGS
STRING1 .STRINGZ "Test string to see if string length calculation works"
STATIC_VAR
LVALUE_ADDR .BLKW #1
V_res .BLKW #1
V_mem .BLKW #1
.END
; mem 12612 12615
