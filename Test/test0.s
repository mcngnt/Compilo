.ORIG x3000
LD R6 CST9
BR IGNORE_CST9
CST9 .FILL #65023
IGNORE_CST9
AND R5 R5 #0
ADD R5 R5 R6
LD R4 CST10
BR IGNORE_CST10
CST10 .FILL #12449
IGNORE_CST10
ADD R4 R4 #2
LD R3 CST11
JMP R3 ; Jump to label FUN_USER_main
BR IGNORE_CST11
CST11 .FILL #12378
IGNORE_CST11
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_main
ADD R6 R6 #-1
LDR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
LDR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
AND R5 R5 #0
ADD R5 R5 R6 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable x to the stack 
ADD R6 R6 #-1 ; Add variable y to the stack 
LD R0 CST8 ; R0 <- cst 10
BR IGNORE_CST8
CST8 .FILL #10
IGNORE_CST8
STR R0 R5 #0
LD R0 CST7 ; R0 <- cst 0
BR IGNORE_CST7
CST7 .FILL #0
IGNORE_CST7
STR R0 R5 #-1
STARTWHILE1
LD R0 CST6 ; R0 <- cst 0
BR IGNORE_CST6
CST6 .FILL #0
IGNORE_CST6
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LDR R0 R5 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRnz IGNORE_GOTO13
LD R3 CST12
JMP R3 ; Jump to label CMP_ELSE5
BR IGNORE_CST12
CST12 .FILL #12417
IGNORE_CST12
IGNORE_GOTO13
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST14
JMP R3 ; Jump to label CMP_ENDELSE5
BR IGNORE_CST14
CST14 .FILL #12418
IGNORE_CST14
CMP_ELSE5
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE5
; R0 <-  e1 < e2
BRz ENDWHILE1
LDR R0 R5 #-1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST4 ; R0 <- cst 2
BR IGNORE_CST4
CST4 .FILL #2
IGNORE_CST4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R5 #-1
LDR R0 R5 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST3 ; R0 <- cst 1
BR IGNORE_CST3
CST3 .FILL #1
IGNORE_CST3
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R5 #0
BR STARTWHILE1
ENDWHILE1
LDR R0 R5 #-1
STR R0 R4 #0
LD R0 CST1 ; R0 <- cst 0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LDR R7 R5 #-1 ; Restore R7
LDR R5 R5 #-2 ; Restore R5
STATIC_VAR
V_LVALUE_ISGLOBAL .BLKW #1
V_LVALUE_ADDR .BLKW #1
V_glob .BLKW #1
.END
; IGNORE_CST9 x3003
; FUN_MULT x300d
; MULT_CHANGE_SIGN x3010
; MULT_INIT x3014
; MULT_LOOP x3017
; MULT_STOP x301b
; FUN_DIV x301c
; DIV_A_NEG x3021
; DIV_A_POS x3026
; DIV_AN_BN x3029
; DIV_AN_BP x302c
; DIV_AP_BN x302d
; DIV_AP_BP x3030
; DIV_NEG x3031
; DIV_POS x3034
; DIV_ENDSIGN x3035
; DIV_LOOP x3035
; DIV_END_LOOP x3040
; DIV_END x3045
; FUN_MOD x3047
; MOD_A_NEG x304b
; MOD_ENDSIGN x304d
; MOD_LOOP x304d
; MOD_END_LOOP x3058
; MOD_END x3059
; FUN_USER_main x305a
; IGNORE_CST8 x3066
; IGNORE_CST7 x306a
; STARTWHILE1 x306b
; IGNORE_CST6 x306e
; CMP_ELSE5 x3081
; CMP_ENDELSE5 x3082
; IGNORE_CST4 x3089
; IGNORE_CST3 x3093
; ENDWHILE1 x309a
; IGNORE_CST1 x309f
; STATIC_VAR x30a1
; .END x30a4
; --DEBUG---

