.ORIG x3000
LD R6 CST43
BR IGNORE_CST43
CST43 .FILL #65023
IGNORE_CST43
ADD R5 R6 #0
LD R4 CST44
BR IGNORE_CST44
CST44 .FILL #12716
IGNORE_CST44
ADD R4 R4 #2
LD R3 CST45
JMP R3 ; Jump to label FUN_USER_main
BR IGNORE_CST45
CST45 .FILL #12377
IGNORE_CST45
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_main
ADD R6 R6 #-1
LDR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
LDR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable y to the stack 
ADD R6 R6 #-1 ; Add variable z to the stack 
ADD R6 R6 #-1 ; Add variable p to the stack 
AND R0 R0 #0
STR R0 R5 #-2
LD R0 CST42 ; R0 <- cst 0
BR IGNORE_CST42
CST42 .FILL #0
IGNORE_CST42
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST41 ; R0 <- cst 5
BR IGNORE_CST41
CST41 .FILL #5
IGNORE_CST41
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R4 #0
ADD R6 R6 #-1 ; Add variable w to the stack 
LD R0 CST40 ; R0 <- cst 7
BR IGNORE_CST40
CST40 .FILL #7
IGNORE_CST40
STR R0 R5 #-3
LD R0 CST36 ; R0 <- cst 0
BR IGNORE_CST36
CST36 .FILL #0
IGNORE_CST36
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST34
STR R0 R4 #-1
BR IGNORE_CST34
CST34 .FILL #0
IGNORE_CST34
LD R0 CST35
STR R0 R4 #-2
BR IGNORE_CST35
CST35 .FILL #1
IGNORE_CST35
LDR R0 R4 #0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_GOTO47
LD R3 CST46
JMP R3 ; Jump to label CMP_ELSE33
BR IGNORE_CST46
CST46 .FILL #12439
IGNORE_CST46
IGNORE_GOTO47
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST48
JMP R3 ; Jump to label CMP_ENDELSE33
BR IGNORE_CST48
CST48 .FILL #12440
IGNORE_CST48
CMP_ELSE33
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE33
; R0 <-  e1 > e2
BRnp IGNORE_GOTO50
LD R3 CST49
JMP R3 ; Jump to label IF_ELSE39
BR IGNORE_CST49
CST49 .FILL #12452
IGNORE_CST49
IGNORE_GOTO50
LD R0 CST37 ; R0 <- cst 3
BR IGNORE_CST37
CST37 .FILL #3
IGNORE_CST37
LD R3 CST51
JMP R3 ; Jump to label IF_ENDELSE39
BR IGNORE_CST51
CST51 .FILL #12468
IGNORE_CST51
IF_ELSE39
LD R0 CST39 ; R0 <- cst 100
BR IGNORE_CST39
CST39 .FILL #100
IGNORE_CST39
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST38 ; R0 <- cst 2
BR IGNORE_CST38
CST38 .FILL #2
IGNORE_CST38
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST52
JSRR R3 ; Jump to label FUN_DIV
BR IGNORE_CST52
CST52 .FILL #12315
IGNORE_CST52
IF_ENDELSE39
STR R0 R5 #-0
LD R0 CST30
STR R0 R4 #-1
BR IGNORE_CST30
CST30 .FILL #0
IGNORE_CST30
LD R0 CST31
STR R0 R4 #-2
BR IGNORE_CST31
CST31 .FILL #1
IGNORE_CST31
LDR R0 R4 #0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST28
STR R0 R4 #-1
BR IGNORE_CST28
CST28 .FILL #0
IGNORE_CST28
LD R0 CST29
STR R0 R4 #-2
BR IGNORE_CST29
CST29 .FILL #0
IGNORE_CST29
LDR R0 R5 #-0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST53
JSRR R3 ; Jump to label FUN_MULT
BR IGNORE_CST53
CST53 .FILL #12300
IGNORE_CST53
STR R0 R5 #-1
LD R0 CST6
STR R0 R4 #-1
BR IGNORE_CST6
CST6 .FILL #1
IGNORE_CST6
LD R0 CST7
STR R0 R4 #-2
BR IGNORE_CST7
CST7 .FILL #0
IGNORE_CST7
LDR R0 R5 #-1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST4
STR R0 R4 #-1
BR IGNORE_CST4
CST4 .FILL #0
IGNORE_CST4
LD R0 CST5
STR R0 R4 #-2
BR IGNORE_CST5
CST5 .FILL #0
IGNORE_CST5
LDR R0 R5 #-0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_GOTO55
LD R3 CST54
JMP R3 ; Jump to label CMP_ELSE3
BR IGNORE_CST54
CST54 .FILL #12532
IGNORE_CST54
IGNORE_GOTO55
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST56
JMP R3 ; Jump to label CMP_ENDELSE3
BR IGNORE_CST56
CST56 .FILL #12533
IGNORE_CST56
CMP_ELSE3
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE3
; R0 <-  e1 > e2
BRnp IGNORE_GOTO58
LD R3 CST57
JMP R3 ; Jump to label IF_ELSE27
BR IGNORE_CST57
CST57 .FILL #12610
IGNORE_CST57
IGNORE_GOTO58
STARTWHILE7
LD R0 CST15
STR R0 R4 #-1
BR IGNORE_CST15
CST15 .FILL #0
IGNORE_CST15
LD R0 CST16
STR R0 R4 #-2
BR IGNORE_CST16
CST16 .FILL #0
IGNORE_CST16
LDR R0 R5 #-0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST13
STR R0 R4 #-1
BR IGNORE_CST13
CST13 .FILL #1
IGNORE_CST13
LD R0 CST14
STR R0 R4 #-2
BR IGNORE_CST14
CST14 .FILL #0
IGNORE_CST14
LDR R0 R5 #-1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_GOTO60
LD R3 CST59
JMP R3 ; Jump to label CMP_ELSE12
BR IGNORE_CST59
CST59 .FILL #12574
IGNORE_CST59
IGNORE_GOTO60
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST61
JMP R3 ; Jump to label CMP_ENDELSE12
BR IGNORE_CST61
CST61 .FILL #12575
IGNORE_CST61
CMP_ELSE12
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE12
; R0 <-  e1 > e2
BRz ENDWHILE7
LD R0 CST9
STR R0 R4 #-1
BR IGNORE_CST9
CST9 .FILL #1
IGNORE_CST9
LD R0 CST10
STR R0 R4 #-2
BR IGNORE_CST10
CST10 .FILL #0
IGNORE_CST10
LDR R0 R5 #-1
LDR R0 R4 #-2
BRnp IGNORE_GOTO63
LD R3 CST62
JMP R3 ; Jump to label DEREF_ELSE11
BR IGNORE_CST62
CST62 .FILL #12598
IGNORE_CST62
IGNORE_GOTO63
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST64
JMP R3 ; Jump to label DEREF_ENDELSE11
BR IGNORE_CST64
CST64 .FILL #12603
IGNORE_CST64
DEREF_ELSE11
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE11
ADD R0 R0 #-1
STR R0 R1 #0
BR STARTWHILE7
ENDWHILE7
LD R3 CST65
JMP R3 ; Jump to label IF_ENDELSE27
BR IGNORE_CST65
CST65 .FILL #12710
IGNORE_CST65
IF_ELSE27
LD R0 CST26
STR R0 R4 #-1
BR IGNORE_CST26
CST26 .FILL #0
IGNORE_CST26
LD R0 CST27
STR R0 R4 #-2
BR IGNORE_CST27
CST27 .FILL #0
IGNORE_CST27
LDR R0 R5 #-0
LDR R0 R4 #-1
STR R0 R5 #-2
LD R0 CST23
STR R0 R4 #-1
BR IGNORE_CST23
CST23 .FILL #2
IGNORE_CST23
LD R0 CST24
STR R0 R4 #-2
BR IGNORE_CST24
CST24 .FILL #0
IGNORE_CST24
LDR R0 R5 #-2
LDR R0 R4 #-2
BRnp IGNORE_GOTO67
LD R3 CST66
JMP R3 ; Jump to label DEREF_ELSE25
BR IGNORE_CST66
CST66 .FILL #12643
IGNORE_CST66
IGNORE_GOTO67
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST68
JMP R3 ; Jump to label DEREF_ENDELSE25
BR IGNORE_CST68
CST68 .FILL #12648
IGNORE_CST68
DEREF_ELSE25
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE25
ADD R0 R0 #1
STR R0 R1 #0
LD R0 CST19
STR R0 R4 #-1
BR IGNORE_CST19
CST19 .FILL #2
IGNORE_CST19
LD R0 CST20
STR R0 R4 #-2
BR IGNORE_CST20
CST20 .FILL #0
IGNORE_CST20
LDR R0 R5 #-2
STR R0 R4 #-1
LDR R0 R4 #-2
BRnp IGNORE_GOTO70
LD R3 CST69
JMP R3 ; Jump to label DEREF_ELSE21
BR IGNORE_CST69
CST69 .FILL #12673
IGNORE_CST69
IGNORE_GOTO70
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST71
JMP R3 ; Jump to label DEREF_ENDELSE21
BR IGNORE_CST71
CST71 .FILL #12678
IGNORE_CST71
DEREF_ELSE21
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE21
LDR R0 R4 #-2
BRnp IGNORE_GOTO73
LD R3 CST72
JMP R3 ; Jump to label DEREF_ELSE22
BR IGNORE_CST72
CST72 .FILL #12691
IGNORE_CST72
IGNORE_GOTO73
LDR R0 R4 #-1
ADD R1 R0 R4
LDR R0 R1 #0
LD R3 CST74
JMP R3 ; Jump to label DEREF_ENDELSE22
BR IGNORE_CST74
CST74 .FILL #12696
IGNORE_CST74
DEREF_ELSE22
LDR R0 R4 #-1
ADD R1 R0 #0
NOT R1 R1
ADD R1 R1 R5
LDR R0 R1 #0
DEREF_ENDELSE22
ADD R0 R0 #-1
STR R0 R1 #0
STR R0 R4 #0
LD R0 CST18 ; R0 <- cst 0
BR IGNORE_CST18
CST18 .FILL #0
IGNORE_CST18
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
LD R0 CST17 ; R0 <- cst 666
BR IGNORE_CST17
CST17 .FILL #666
IGNORE_CST17
NOT R0 R0
STR R0 R4 #0
IF_ENDELSE27
LD R0 CST1 ; R0 <- cst 0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
STATIC_VAR
LVALUE_ISGLOBAL .BLKW #1
LVALUE_ADDR .BLKW #1
V_x .BLKW #1
.END
; IGNORE_CST43 x3003
; FUN_MULT x300c
; MULT_CHANGE_SIGN x300f
; MULT_INIT x3013
; MULT_LOOP x3016
; MULT_STOP x301a
; FUN_DIV x301b
; DIV_A_NEG x3020
; DIV_A_POS x3025
; DIV_AN_BN x3028
; DIV_AN_BP x302b
; DIV_AP_BN x302c
; DIV_AP_BP x302f
; DIV_NEG x3030
; DIV_POS x3033
; DIV_ENDSIGN x3034
; DIV_LOOP x3034
; DIV_END_LOOP x303f
; DIV_END x3044
; FUN_MOD x3046
; MOD_A_NEG x304a
; MOD_ENDSIGN x304c
; MOD_LOOP x304c
; MOD_END_LOOP x3057
; MOD_END x3058
; FUN_USER_main x3059
; IGNORE_CST42 x3067
; IGNORE_CST41 x306c
; IGNORE_CST40 x3078
; IGNORE_CST36 x307c
; IGNORE_CST34 x3082
; IGNORE_CST35 x3086
; CMP_ELSE33 x3097
; CMP_ENDELSE33 x3098
; IGNORE_CST37 x30a0
; IF_ELSE39 x30a4
; IGNORE_CST39 x30a7
; IGNORE_CST38 x30ae
; IF_ENDELSE39 x30b4
; IGNORE_CST30 x30b9
; IGNORE_CST31 x30bd
; IGNORE_CST28 x30c4
; IGNORE_CST29 x30c8
; IGNORE_CST6 x30d4
; IGNORE_CST7 x30d8
; IGNORE_CST4 x30df
; IGNORE_CST5 x30e3
; CMP_ELSE3 x30f4
; CMP_ENDELSE3 x30f5
; STARTWHILE7 x30fa
; IGNORE_CST15 x30fe
; IGNORE_CST16 x3102
; IGNORE_CST13 x3109
; IGNORE_CST14 x310d
; CMP_ELSE12 x311e
; CMP_ENDELSE12 x311f
; IGNORE_CST9 x3124
; IGNORE_CST10 x3128
; DEREF_ELSE11 x3136
; DEREF_ENDELSE11 x313b
; ENDWHILE7 x313e
; IF_ELSE27 x3142
; IGNORE_CST26 x3146
; IGNORE_CST27 x314a
; IGNORE_CST23 x3151
; IGNORE_CST24 x3155
; DEREF_ELSE25 x3163
; DEREF_ENDELSE25 x3168
; IGNORE_CST19 x316e
; IGNORE_CST20 x3172
; DEREF_ELSE21 x3181
; DEREF_ENDELSE21 x3186
; DEREF_ELSE22 x3193
; DEREF_ENDELSE22 x3198
; IGNORE_CST18 x319e
; IGNORE_CST17 x31a4
; IF_ENDELSE27 x31a6
; IGNORE_CST1 x31a9
; STATIC_VAR x31ac
; .END x31af
; --DEBUG---

