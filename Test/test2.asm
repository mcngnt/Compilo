.ORIG x3000
LD R6 CST48 ; Init R6 value to the start of the stack
BR IGNORE_CST48
CST48 .FILL #65023
IGNORE_CST48
ADD R5 R6 #0
LD R4 CST49 ; R4 <- address of label STATIC_VAR
BR IGNORE_CST49
CST49 .FILL #12773
IGNORE_CST49
ADD R4 R4 #1
LD R3 CST50 ; R3 <- address of label FUN_USER_main
BR IGNORE_CST50
CST50 .FILL #12377
IGNORE_CST50
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_main
ADD R6 R6 #-1
LDR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
LDR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable p to the stack 
ADD R6 R6 #-1 ; Add variable z to the stack 
ADD R6 R6 #-1 ; Add variable y to the stack 
AND R0 R0 #0
LD R1 CST47
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST47
CST47 .FILL #0
IGNORE_CST47
LD R0 CST45 ; R0 <- cst 0
BR IGNORE_CST45
CST45 .FILL #0
IGNORE_CST45
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST44 ; R0 <- cst 5
BR IGNORE_CST44
CST44 .FILL #5
IGNORE_CST44
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
LD R1 CST46
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST46
CST46 .FILL #0
IGNORE_CST46
ADD R6 R6 #-1 ; Add variable w to the stack 
LD R0 CST42 ; R0 <- cst 7
BR IGNORE_CST42
CST42 .FILL #7
IGNORE_CST42
LD R1 CST43
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST43
CST43 .FILL #3
IGNORE_CST43
LD R0 CST36 ; R0 <- cst 0
BR IGNORE_CST36
CST36 .FILL #0
IGNORE_CST36
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST34
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST34
CST34 .FILL #0
IGNORE_CST34
LD R1 CST35
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST35
CST35 .FILL #0
IGNORE_CST35
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_JMP33
LD R3 CST51 ; R3 <- address of label CMP_ELSE33
BR IGNORE_CST51
CST51 .FILL #12457
IGNORE_CST51
JMP R3
IGNORE_JMP33
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST52 ; R3 <- address of label CMP_ENDELSE33
BR IGNORE_CST52
CST52 .FILL #12458
IGNORE_CST52
JMP R3
CMP_ELSE33
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE33
; R0 <-  e1 > e2
BRnp IGNORE_JMP40
LD R3 CST53 ; R3 <- address of label IF_ELSE40
BR IGNORE_CST53
CST53 .FILL #12470
IGNORE_CST53
JMP R3
IGNORE_JMP40
LD R0 CST37 ; R0 <- cst 3
BR IGNORE_CST37
CST37 .FILL #3
IGNORE_CST37
LD R3 CST54 ; R3 <- address of label IF_ENDELSE40
BR IGNORE_CST54
CST54 .FILL #12486
IGNORE_CST54
JMP R3
IF_ELSE40
LD R0 CST39 ; R0 <- cst 100
BR IGNORE_CST39
CST39 .FILL #100
IGNORE_CST39
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST38 ; R0 <- cst 2
BR IGNORE_CST38
CST38 .FILL #2
IGNORE_CST38
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST55 ; R3 <- address of label FUN_DIV
BR IGNORE_CST55
CST55 .FILL #12315
IGNORE_CST55
JSRR R3 ; Divide R1 by R0
IF_ENDELSE40
LD R1 CST41
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST41
CST41 .FILL #2
IGNORE_CST41
LD R0 CST30
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST30
CST30 .FILL #0
IGNORE_CST30
LD R1 CST31
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST31
CST31 .FILL #0
IGNORE_CST31
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST28
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST28
CST28 .FILL #2
IGNORE_CST28
LD R1 CST29
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST29
CST29 .FILL #2
IGNORE_CST29
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST56 ; R3 <- address of label FUN_MULT
BR IGNORE_CST56
CST56 .FILL #12300
IGNORE_CST56
JSRR R3 ; Multiply R0 and R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST27 ; R0 <- cst 9
BR IGNORE_CST27
CST27 .FILL #9
IGNORE_CST27
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST57 ; R3 <- address of label FUN_MOD
BR IGNORE_CST57
CST57 .FILL #12358
IGNORE_CST57
JSRR R3 ; Compute R1 % R0
LD R1 CST32
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST32
CST32 .FILL #1
IGNORE_CST32
LD R0 CST6
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST6
CST6 .FILL #1
IGNORE_CST6
LD R1 CST7
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST7
CST7 .FILL #1
IGNORE_CST7
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST4
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST4
CST4 .FILL #2
IGNORE_CST4
LD R1 CST5
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST5
CST5 .FILL #2
IGNORE_CST5
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_JMP3
LD R3 CST58 ; R3 <- address of label CMP_ELSE3
BR IGNORE_CST58
CST58 .FILL #12593
IGNORE_CST58
JMP R3
IGNORE_JMP3
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST59 ; R3 <- address of label CMP_ENDELSE3
BR IGNORE_CST59
CST59 .FILL #12594
IGNORE_CST59
JMP R3
CMP_ELSE3
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE3
; R0 <-  e1 > e2
BRnp IGNORE_JMP26
LD R3 CST60 ; R3 <- address of label IF_ELSE26
BR IGNORE_CST60
CST60 .FILL #12683
IGNORE_CST60
JMP R3
IGNORE_JMP26
STARTWHILE9
LD R0 CST16
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST16
CST16 .FILL #2
IGNORE_CST16
LD R1 CST17
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST17
CST17 .FILL #2
IGNORE_CST17
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST14
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST14
CST14 .FILL #1
IGNORE_CST14
LD R1 CST15
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST15
CST15 .FILL #1
IGNORE_CST15
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
BRn IGNORE_JMP13
LD R3 CST61 ; R3 <- address of label CMP_ELSE13
BR IGNORE_CST61
CST61 .FILL #12647
IGNORE_CST61
JMP R3
IGNORE_JMP13
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST62 ; R3 <- address of label CMP_ENDELSE13
BR IGNORE_CST62
CST62 .FILL #12648
IGNORE_CST62
JMP R3
CMP_ELSE13
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE13
; R0 <-  e1 > e2
BRz ENDWHILE9
LD R0 CST11
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST11
CST11 .FILL #1
IGNORE_CST11
LD R1 CST12
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST12
CST12 .FILL #1
IGNORE_CST12
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0 ; --(lvalue)
BR STARTWHILE9
ENDWHILE9
LD R0 CST8 ; R0 <- cst 333
BR IGNORE_CST8
CST8 .FILL #333
IGNORE_CST8
LD R1 CST9
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST9
CST9 .FILL #2
IGNORE_CST9
LD R3 CST63 ; R3 <- address of label IF_ENDELSE26
BR IGNORE_CST63
CST63 .FILL #12751
IGNORE_CST63
JMP R3
IF_ELSE26
LD R0 CST23
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST23
CST23 .FILL #2
IGNORE_CST23
LD R1 CST24
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST24
CST24 .FILL #2
IGNORE_CST24
LDR R0 R4 #-1 ; Get address of the last lvalue
LD R1 CST25
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST25
CST25 .FILL #0
IGNORE_CST25
LD R0 CST21
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST21
CST21 .FILL #0
IGNORE_CST21
LD R1 CST22
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST22
CST22 .FILL #0
IGNORE_CST22
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0 ; ++(lvalue)
LD R0 CST18
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST18
CST18 .FILL #0
IGNORE_CST18
LD R1 CST19
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST19
CST19 .FILL #0
IGNORE_CST19
STR R0 R4 #-1
LDR R0 R0 #0 ; Deref the last lvalue
LDR R1 R4 #-1
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0 ; --(lvalue)
LD R1 CST20
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST20
CST20 .FILL #0
IGNORE_CST20
IF_ENDELSE26
LEA R0 STRING1
STRING1 .STRINGZ -hello
PUTS
LD R0 CST1
ADD R0 R0 R4
STR R0 R4 #-1 ; Change lvalue
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
LD R1 CST2
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST2
CST2 .FILL #0
IGNORE_CST2
LDR R7 R5 #1 ; Restore R7
LDR R5 R5 #2 ; Restore R5
RET
STATIC_VAR
LVALUE_ADDR .BLKW #1
V_x .BLKW #1

.END
; mem 12773 12774
