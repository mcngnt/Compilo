.ORIG x3000
LD R6 CST235 ; Init R6 value to the start of the stack
BR IGNORE_CST235
CST235 .FILL #65023
IGNORE_CST235
ADD R5 R6 #0
LD R4 CST236 ; R4 <- address of label STATIC_VAR
BR IGNORE_CST236
CST236 .FILL #14733
IGNORE_CST236
LD R3 CST237 ; R3 <- address of label FUN_USER_main
BR IGNORE_CST237
CST237 .FILL #14131
IGNORE_CST237
JMP R3
FUN_MULT
ADD R0 R0 #0
BRn MULT_CHANGE_SIGN
BR MULT_INIT
MULT_CHANGE_SIGN
NOT R0 R0
ADD R0 R0 #1
NOT R1 R1
ADD R1 R1 #1
MULT_INIT
AND R2 R2 #0
ADD R2 R2 R0
AND R0 R0 #0
MULT_LOOP
ADD R0 R0 R1
ADD R2 R2 #-1
BRz MULT_STOP
BR MULT_LOOP
MULT_STOP
RET
FUN_DIV
AND R2 R2 #0 ; Q
LD R2 DIV_ISNEG ; Set is_neg to 0
ADD R1 R1 #0
BRn DIV_A_NEG
BR DIV_A_POS
DIV_A_NEG
NOT R1 R1 ; Change A sign when negative
ADD R1 R1 #1
ADD R0 R0 #0
BRn DIV_AN_BN
BR DIV_AN_BP
DIV_A_POS
ADD R0 R0 #0
BRn DIV_AP_BN
BR DIV_AP_BP
DIV_AN_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_POS
DIV_AN_BP
BR DIV_NEG
DIV_AP_BN
NOT R0 R0
ADD R0 R0 #1
BR DIV_NEG
DIV_AP_BP
BR DIV_POS
DIV_NEG
ADD R3 R2 #1
ST R3 DIV_ISNEG ; IS_NEG <- 1
BR DIV_ENDSIGN
DIV_POS
BR DIV_ENDSIGN
DIV_ENDSIGN
; Compute the sign of the result in DIV_ISNEG
DIV_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp DIV_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR DIV_LOOP
DIV_END_LOOP
ADD R0 R2 #0
LD R3 DIV_ISNEG
BRz DIV_END
NOT R0 R0
ADD R0 R0 #1
DIV_END
RET
DIV_ISNEG .BLKW #1
FUN_MOD
AND R2 R2 #0 ; Q
ADD R1 R1 #0
BRn MOD_A_NEG
BR MOD_ENDSIGN
MOD_A_NEG
ADD R1 R1 R0
BRn MOD_A_NEG
MOD_ENDSIGN
; Compute the sign of the result in MOD_ISNEG
MOD_LOOP
NOT R3 R1
ADD R3 R3 #1
ADD R3 R3 R0 ; R3 <- R0 - R1 = B - R
BRp MOD_END_LOOP
AND R3 R3 #0
ADD R3 R3 R0
NOT R3 R3
ADD R3 R3 #1 ; R3 <- -B
ADD R1 R1 R3 ; R <- R - B
ADD R2 R2 #1
BR MOD_LOOP
MOD_END_LOOP
ADD R0 R1 #0
MOD_END
RET
FUN_USER_gen_rnd
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
; e1
; e1
; e1
LD R1 CST1
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST1
CST1 .FILL #0
IGNORE_CST1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST2 ; R0 <- cst 9769
BR IGNORE_CST2
CST2 .FILL #9769
IGNORE_CST2
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST238 ; R3 <- address of label FUN_MULT
BR IGNORE_CST238
CST238 .FILL #12299
IGNORE_CST238
JSRR R3 ; Multiply R0 and R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST3 ; R0 <- cst 431
BR IGNORE_CST3
CST3 .FILL #431
IGNORE_CST3
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST4 ; R0 <- cst 32000
BR IGNORE_CST4
CST4 .FILL #32000
IGNORE_CST4
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST239 ; R3 <- address of label FUN_MOD
BR IGNORE_CST239
CST239 .FILL #12357
IGNORE_CST239
JSRR R3 ; Compute R1 % R0
LD R1 CST5
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST5
CST5 .FILL #0
IGNORE_CST5
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_clear
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R0 CST240 ; R0 <- address of label STRING1
BR IGNORE_CST240
CST240 .FILL #14616
IGNORE_CST240
PUTS
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_print_int
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable k to the stack 
LD R1 CST16
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST16
CST16 .FILL #-5
IGNORE_CST16
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST17 ; R0 <- cst 9
BR IGNORE_CST17
CST17 .FILL #9
IGNORE_CST17
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRnz IGNORE_JMP_IF18
LD R3 CST241 ; R3 <- address of label CMP_ELSE18
BR IGNORE_CST241
CST241 .FILL #12486
IGNORE_CST241
JMP R3
IGNORE_JMP_IF18
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST242 ; R3 <- address of label CMP_ENDELSE18
BR IGNORE_CST242
CST242 .FILL #12487
IGNORE_CST242
JMP R3
CMP_ELSE18
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE18
; R0 <-  e1 < e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF32
LD R3 CST243 ; R3 <- address of label IF_ELSE32
BR IGNORE_CST243
CST243 .FILL #12615
IGNORE_CST243
JMP R3
IGNORE_JMP_IF32
LD R1 CST20
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST20
CST20 .FILL #-5
IGNORE_CST20
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST21 ; R0 <- cst 0
BR IGNORE_CST21
CST21 .FILL #0
IGNORE_CST21
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF22
LD R3 CST244 ; R3 <- address of label CMP_ELSE22
BR IGNORE_CST244
CST244 .FILL #12523
IGNORE_CST244
JMP R3
IGNORE_JMP_IF22
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST245 ; R3 <- address of label CMP_ENDELSE22
BR IGNORE_CST245
CST245 .FILL #12524
IGNORE_CST245
JMP R3
CMP_ELSE22
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE22
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF27
LD R3 CST246 ; R3 <- address of label EIF_ELSE27
BR IGNORE_CST246
CST246 .FILL #12565
IGNORE_CST246
JMP R3
IGNORE_JMP_IF27
LD R1 CST23
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST23
CST23 .FILL #-4
IGNORE_CST23
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST24 ; R0 <- cst 0
BR IGNORE_CST24
CST24 .FILL #0
IGNORE_CST24
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF25
LD R3 CST247 ; R3 <- address of label CMP_ELSE25
BR IGNORE_CST247
CST247 .FILL #12560
IGNORE_CST247
JMP R3
IGNORE_JMP_IF25
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST248 ; R3 <- address of label CMP_ENDELSE25
BR IGNORE_CST248
CST248 .FILL #12561
IGNORE_CST248
JMP R3
CMP_ELSE25
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE25
; R0 <-  e1 == e2
LD R3 CST249 ; R3 <- address of label EIF_ENDELSE27
BR IGNORE_CST249
CST249 .FILL #12568
IGNORE_CST249
JMP R3
EIF_ELSE27
LD R0 CST26 ; R0 <- cst 0
BR IGNORE_CST26
CST26 .FILL #0
IGNORE_CST26
EIF_ENDELSE27
ADD R0 R0 #0
BRnp IGNORE_JMP_IF31
LD R3 CST250 ; R3 <- address of label IF_ELSE31
BR IGNORE_CST250
CST250 .FILL #12582
IGNORE_CST250
JMP R3
IGNORE_JMP_IF31
LD R0 CST28 ; R0 <- cst 32
BR IGNORE_CST28
CST28 .FILL #32
IGNORE_CST28
OUT
LD R3 CST251 ; R3 <- address of label IF_ENDELSE31
BR IGNORE_CST251
CST251 .FILL #12599
IGNORE_CST251
JMP R3
IF_ELSE31
; e1
LD R0 CST29 ; R0 <- cst 48
BR IGNORE_CST29
CST29 .FILL #48
IGNORE_CST29
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST30
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST30
CST30 .FILL #-5
IGNORE_CST30
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
OUT
IF_ENDELSE31
LD R1 CST19
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST19
CST19 .FILL #-4
IGNORE_CST19
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
LD R3 CST252 ; R3 <- address of label IF_ENDELSE32
BR IGNORE_CST252
CST252 .FILL #12615
IGNORE_CST252
JMP R3
IF_ELSE32
IF_ENDELSE32
; Call function print_int
; e1
LD R1 CST10
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST10
CST10 .FILL #-5
IGNORE_CST10
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST11 ; R0 <- cst 10
BR IGNORE_CST11
CST11 .FILL #10
IGNORE_CST11
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST253 ; R3 <- address of label FUN_DIV
BR IGNORE_CST253
CST253 .FILL #12314
IGNORE_CST253
JSRR R3 ; Divide R1 by R0
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
; e1
LD R1 CST12
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST12
CST12 .FILL #-4
IGNORE_CST12
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST13 ; R0 <- cst 1
BR IGNORE_CST13
CST13 .FILL #1
IGNORE_CST13
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
LD R3 CST254 ; R3 <- address of label FUN_USER_print_int
BR IGNORE_CST254
CST254 .FILL #12447
IGNORE_CST254
JSRR R3
LD R1 CST14
ADD R6 R6 R1 ; Remove print_int's args from the stack
BR IGNORE_CST14
CST14 .FILL #2
IGNORE_CST14
LD R1 CST15
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST15
CST15 .FILL #0
IGNORE_CST15
; e1
LD R0 CST7 ; R0 <- cst 48
BR IGNORE_CST7
CST7 .FILL #48
IGNORE_CST7
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; e1
LD R1 CST8
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST8
CST8 .FILL #-5
IGNORE_CST8
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST9 ; R0 <- cst 10
BR IGNORE_CST9
CST9 .FILL #10
IGNORE_CST9
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST255 ; R3 <- address of label FUN_MOD
BR IGNORE_CST255
CST255 .FILL #12357
IGNORE_CST255
JSRR R3 ; Compute R1 % R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
OUT
LD R1 CST6
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST6
CST6 .FILL #0
IGNORE_CST6
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_print_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable k to the stack 
LD R0 CST256 ; R0 <- address of label STRING5
BR IGNORE_CST256
CST256 .FILL #14676
IGNORE_CST256
PUTS
STARTWHILE32
LD R1 CST34
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST34
CST34 .FILL #-4
IGNORE_CST34
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
LD R1 CST35
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST35
CST35 .FILL #1
IGNORE_CST35
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST36 ; R0 <- cst 16
BR IGNORE_CST36
CST36 .FILL #16
IGNORE_CST36
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF37
LD R3 CST257 ; R3 <- address of label CMP_ELSE37
BR IGNORE_CST257
CST257 .FILL #12763
IGNORE_CST257
JMP R3
IGNORE_JMP_IF37
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST258 ; R3 <- address of label CMP_ENDELSE37
BR IGNORE_CST258
CST258 .FILL #12764
IGNORE_CST258
JMP R3
CMP_ELSE37
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE37
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE32
LD R3 CST259 ; R3 <- address of label ENDWHILE32
BR IGNORE_CST259
CST259 .FILL #13024
IGNORE_CST259
JMP R3
IGNORE_JMP_WHILE32
LD R0 CST51 ; R0 <- cst 0
BR IGNORE_CST51
CST51 .FILL #0
IGNORE_CST51
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
LD R1 CST52
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST52
CST52 .FILL #-4
IGNORE_CST52
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST53
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST53
CST53 .FILL #1
IGNORE_CST53
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF54
LD R3 CST260 ; R3 <- address of label CMP_ELSE54
BR IGNORE_CST260
CST260 .FILL #12813
IGNORE_CST260
JMP R3
IGNORE_JMP_IF54
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST261 ; R3 <- address of label CMP_ENDELSE54
BR IGNORE_CST261
CST261 .FILL #12814
IGNORE_CST261
JMP R3
CMP_ELSE54
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE54
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF61
LD R3 CST262 ; R3 <- address of label EIF_ELSE61
BR IGNORE_CST262
CST262 .FILL #12879
IGNORE_CST262
JMP R3
IGNORE_JMP_IF61
; e1
; e1
LD R1 CST55
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST55
CST55 .FILL #-4
IGNORE_CST55
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST56
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST56
CST56 .FILL #1
IGNORE_CST56
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST57 ; R0 <- cst 4
BR IGNORE_CST57
CST57 .FILL #4
IGNORE_CST57
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST263 ; R3 <- address of label FUN_MOD
BR IGNORE_CST263
CST263 .FILL #12357
IGNORE_CST263
JSRR R3 ; Compute R1 % R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST58 ; R0 <- cst 0
BR IGNORE_CST58
CST58 .FILL #0
IGNORE_CST58
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF59
LD R3 CST264 ; R3 <- address of label CMP_ELSE59
BR IGNORE_CST264
CST264 .FILL #12874
IGNORE_CST264
JMP R3
IGNORE_JMP_IF59
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST265 ; R3 <- address of label CMP_ENDELSE59
BR IGNORE_CST265
CST265 .FILL #12875
IGNORE_CST265
JMP R3
CMP_ELSE59
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE59
; R0 <-  e1 == e2
LD R3 CST266 ; R3 <- address of label EIF_ENDELSE61
BR IGNORE_CST266
CST266 .FILL #12882
IGNORE_CST266
JMP R3
EIF_ELSE61
LD R0 CST60 ; R0 <- cst 0
BR IGNORE_CST60
CST60 .FILL #0
IGNORE_CST60
EIF_ENDELSE61
ADD R0 R0 #0
BRnp IGNORE_JMP_IF65
LD R3 CST267 ; R3 <- address of label IF_ELSE65
BR IGNORE_CST267
CST267 .FILL #12908
IGNORE_CST267
JMP R3
IGNORE_JMP_IF65
LD R0 CST64 ; R0 <- cst 124
BR IGNORE_CST64
CST64 .FILL #124
IGNORE_CST64
OUT
LD R0 CST63 ; R0 <- cst 10
BR IGNORE_CST63
CST63 .FILL #10
IGNORE_CST63
OUT
LD R0 CST268 ; R0 <- address of label STRING4
BR IGNORE_CST268
CST268 .FILL #14652
IGNORE_CST268
PUTS
LD R0 CST62 ; R0 <- cst 124
BR IGNORE_CST62
CST62 .FILL #124
IGNORE_CST62
OUT
LD R3 CST269 ; R3 <- address of label IF_ENDELSE65
BR IGNORE_CST269
CST269 .FILL #12908
IGNORE_CST269
JMP R3
IF_ELSE65
IF_ENDELSE65
LD R0 CST50 ; R0 <- cst 32
BR IGNORE_CST50
CST50 .FILL #32
IGNORE_CST50
OUT
; Call function print_int
LD R1 CST46
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST46
CST46 .FILL #-4
IGNORE_CST46
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
LD R0 CST47 ; R0 <- cst 0
BR IGNORE_CST47
CST47 .FILL #0
IGNORE_CST47
STR R0 R6 #0 ; Adding arg on the stack to call print_int
ADD R6 R6 #-1
LD R3 CST270 ; R3 <- address of label FUN_USER_print_int
BR IGNORE_CST270
CST270 .FILL #12447
IGNORE_CST270
JSRR R3
LD R1 CST48
ADD R6 R6 R1 ; Remove print_int's args from the stack
BR IGNORE_CST48
CST48 .FILL #2
IGNORE_CST48
LD R1 CST49
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST49
CST49 .FILL #0
IGNORE_CST49
STARTWHILE38
LD R0 CST40 ; R0 <- cst 0
BR IGNORE_CST40
CST40 .FILL #0
IGNORE_CST40
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
LD R0 CST41 ; R0 <- cst 3
BR IGNORE_CST41
CST41 .FILL #3
IGNORE_CST41
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST42
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST42
CST42 .FILL #0
IGNORE_CST42
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; R0 <- R1 - R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF43
LD R3 CST271 ; R3 <- address of label CMP_ELSE43
BR IGNORE_CST271
CST271 .FILL #12983
IGNORE_CST271
JMP R3
IGNORE_JMP_IF43
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST272 ; R3 <- address of label CMP_ENDELSE43
BR IGNORE_CST272
CST272 .FILL #12984
IGNORE_CST272
JMP R3
CMP_ELSE43
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE43
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE38
LD R3 CST273 ; R3 <- address of label ENDWHILE38
BR IGNORE_CST273
CST273 .FILL #13009
IGNORE_CST273
JMP R3
IGNORE_JMP_WHILE38
LD R0 CST45 ; R0 <- cst 32
BR IGNORE_CST45
CST45 .FILL #32
IGNORE_CST45
OUT
LD R0 CST44
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
BR IGNORE_CST44
CST44 .FILL #0
IGNORE_CST44
ADD R1 R0 #0
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST274 ; R3 <- address of label STARTWHILE38
BR IGNORE_CST274
CST274 .FILL #12943
IGNORE_CST274
JMP R3
ENDWHILE38
LD R0 CST38
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
BR IGNORE_CST38
CST38 .FILL #-4
IGNORE_CST38
ADD R1 R0 #0
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST275 ; R3 <- address of label STARTWHILE32
BR IGNORE_CST275
CST275 .FILL #12722
IGNORE_CST275
JMP R3
ENDWHILE32
LD R0 CST276 ; R0 <- address of label STRING3
BR IGNORE_CST276
CST276 .FILL #14649
IGNORE_CST276
PUTS
LD R0 CST277 ; R0 <- address of label STRING2
BR IGNORE_CST277
CST277 .FILL #14625
IGNORE_CST277
PUTS
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_init_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable i to the stack 
LD R0 CST74 ; R0 <- cst 0
BR IGNORE_CST74
CST74 .FILL #0
IGNORE_CST74
LD R1 CST75
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST75
CST75 .FILL #0
IGNORE_CST75
STARTWHILE65
LD R1 CST67
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST67
CST67 .FILL #0
IGNORE_CST67
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST68 ; R0 <- cst 16
BR IGNORE_CST68
CST68 .FILL #16
IGNORE_CST68
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF69
LD R3 CST278 ; R3 <- address of label CMP_ELSE69
BR IGNORE_CST278
CST278 .FILL #13086
IGNORE_CST278
JMP R3
IGNORE_JMP_IF69
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST279 ; R3 <- address of label CMP_ENDELSE69
BR IGNORE_CST279
CST279 .FILL #13087
IGNORE_CST279
JMP R3
CMP_ELSE69
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE69
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE65
LD R3 CST280 ; R3 <- address of label ENDWHILE65
BR IGNORE_CST280
CST280 .FILL #13130
IGNORE_CST280
JMP R3
IGNORE_JMP_WHILE65
LD R0 CST72 ; R0 <- cst 0
BR IGNORE_CST72
CST72 .FILL #0
IGNORE_CST72
LD R1 CST73
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST73
CST73 .FILL #-4
IGNORE_CST73
STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST71
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
BR IGNORE_CST71
CST71 .FILL #-4
IGNORE_CST71
ADD R1 R0 #0
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R0 CST70
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
BR IGNORE_CST70
CST70 .FILL #0
IGNORE_CST70
ADD R1 R0 #0
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0
ADD R0 R0 #-1 ; (lvalue)++
LD R3 CST281 ; R3 <- address of label STARTWHILE65
BR IGNORE_CST281
CST281 .FILL #13056
IGNORE_CST281
JMP R3
ENDWHILE65
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_put_sq
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
LD R1 CST76
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST76
CST76 .FILL #-4
IGNORE_CST76
LD R1 CST77
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST77
CST77 .FILL #-5
IGNORE_CST77
STR R0 R1 #0 ; R0 <- M[R1]
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_spawn_sq
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable q to the stack 
; e1
LD R1 CST91
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST91
CST91 .FILL #-4
IGNORE_CST91
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; e1
LD R1 CST92
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST92
CST92 .FILL #0
IGNORE_CST92
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST93 ; R0 <- cst 16
BR IGNORE_CST93
CST93 .FILL #16
IGNORE_CST93
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST282 ; R3 <- address of label FUN_MOD
BR IGNORE_CST282
CST282 .FILL #12357
IGNORE_CST282
JSRR R3 ; Compute R1 % R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST94
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST94
CST94 .FILL #0
IGNORE_CST94
STARTWHILE81
LD R0 CST83 ; R0 <- cst 0
BR IGNORE_CST83
CST83 .FILL #0
IGNORE_CST83
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R1 CST84
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST84
CST84 .FILL #0
IGNORE_CST84
LDR R0 R0 #0 ; Deref the last lvalue
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF85
LD R3 CST283 ; R3 <- address of label CMP_ELSE85
BR IGNORE_CST283
CST283 .FILL #13241
IGNORE_CST283
JMP R3
IGNORE_JMP_IF85
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST284 ; R3 <- address of label CMP_ENDELSE85
BR IGNORE_CST284
CST284 .FILL #13242
IGNORE_CST284
JMP R3
CMP_ELSE85
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE85
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE81
LD R3 CST285 ; R3 <- address of label ENDWHILE81
BR IGNORE_CST285
CST285 .FILL #13297
IGNORE_CST285
JMP R3
IGNORE_JMP_WHILE81
; Call function gen_rnd
LD R3 CST286 ; R3 <- address of label FUN_USER_gen_rnd
BR IGNORE_CST286
CST286 .FILL #12376
IGNORE_CST286
JSRR R3
LD R1 CST90
ADD R6 R6 R1 ; Remove gen_rnd's args from the stack
BR IGNORE_CST90
CST90 .FILL #0
IGNORE_CST90
; e1
LD R1 CST86
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST86
CST86 .FILL #-4
IGNORE_CST86
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
; e1
LD R1 CST87
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST87
CST87 .FILL #0
IGNORE_CST87
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST88 ; R0 <- cst 16
BR IGNORE_CST88
CST88 .FILL #16
IGNORE_CST88
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST287 ; R3 <- address of label FUN_MOD
BR IGNORE_CST287
CST287 .FILL #12357
IGNORE_CST287
JSRR R3 ; Compute R1 % R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST89
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST89
CST89 .FILL #0
IGNORE_CST89
LD R3 CST288 ; R3 <- address of label STARTWHILE81
BR IGNORE_CST288
CST288 .FILL #13210
IGNORE_CST288
JMP R3
ENDWHILE81
; Call function put_sq
LD R1 CST79
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST79
CST79 .FILL #0
IGNORE_CST79
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
LD R0 CST80 ; R0 <- cst 2
BR IGNORE_CST80
CST80 .FILL #2
IGNORE_CST80
STR R0 R6 #0 ; Adding arg on the stack to call put_sq
ADD R6 R6 #-1
LD R3 CST289 ; R3 <- address of label FUN_USER_put_sq
BR IGNORE_CST289
CST289 .FILL #13135
IGNORE_CST289
JSRR R3
LD R1 CST81
ADD R6 R6 R1 ; Remove put_sq's args from the stack
BR IGNORE_CST81
CST81 .FILL #2
IGNORE_CST81
; Call function gen_rnd
LD R3 CST290 ; R3 <- address of label FUN_USER_gen_rnd
BR IGNORE_CST290
CST290 .FILL #12376
IGNORE_CST290
JSRR R3
LD R1 CST78
ADD R6 R6 R1 ; Remove gen_rnd's args from the stack
BR IGNORE_CST78
CST78 .FILL #0
IGNORE_CST78
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_move_grid
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable b to the stack 
ADD R6 R6 #-1 ; Add variable q to the stack 
ADD R6 R6 #-1 ; Add variable p to the stack 
ADD R6 R6 #-1 ; Add variable i to the stack 
ADD R6 R6 #-1 ; Add variable a to the stack 
ADD R6 R6 #-1 ; Add variable nb to the stack 
LD R0 CST178 ; R0 <- cst 8
BR IGNORE_CST178
CST178 .FILL #8
IGNORE_CST178
LD R1 CST179
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST179
CST179 .FILL #5
IGNORE_CST179
STARTWHILE95
LD R0 CST97 ; R0 <- cst 0
BR IGNORE_CST97
CST97 .FILL #0
IGNORE_CST97
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R1 CST98
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST98
CST98 .FILL #5
IGNORE_CST98
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF99
LD R3 CST291 ; R3 <- address of label CMP_ELSE99
BR IGNORE_CST291
CST291 .FILL #13387
IGNORE_CST291
JMP R3
IGNORE_JMP_IF99
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST292 ; R3 <- address of label CMP_ENDELSE99
BR IGNORE_CST292
CST292 .FILL #13388
IGNORE_CST292
JMP R3
CMP_ELSE99
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE99
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE95
LD R3 CST293 ; R3 <- address of label ENDWHILE95
BR IGNORE_CST293
CST293 .FILL #14124
IGNORE_CST293
JMP R3
IGNORE_JMP_WHILE95
LD R0 CST176 ; R0 <- cst 0
BR IGNORE_CST176
CST176 .FILL #0
IGNORE_CST176
LD R1 CST177
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST177
CST177 .FILL #3
IGNORE_CST177
STARTWHILE100
LD R1 CST102
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST102
CST102 .FILL #3
IGNORE_CST102
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST103 ; R0 <- cst 16
BR IGNORE_CST103
CST103 .FILL #16
IGNORE_CST103
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF104
LD R3 CST294 ; R3 <- address of label CMP_ELSE104
BR IGNORE_CST294
CST294 .FILL #13434
IGNORE_CST294
JMP R3
IGNORE_JMP_IF104
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST295 ; R3 <- address of label CMP_ENDELSE104
BR IGNORE_CST295
CST295 .FILL #13435
IGNORE_CST295
JMP R3
CMP_ELSE104
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE104
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE100
LD R3 CST296 ; R3 <- address of label ENDWHILE100
BR IGNORE_CST296
CST296 .FILL #14109
IGNORE_CST296
JMP R3
IGNORE_JMP_WHILE100
; e1
LD R1 CST173
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST173
CST173 .FILL #1
IGNORE_CST173
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST174
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST174
CST174 .FILL #3
IGNORE_CST174
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST175
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST175
CST175 .FILL #1
IGNORE_CST175
; e1
; e1
LD R1 CST169
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST169
CST169 .FILL #1
IGNORE_CST169
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST170
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST170
CST170 .FILL #3
IGNORE_CST170
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST171
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST171
CST171 .FILL #-4
IGNORE_CST171
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
LD R1 CST172
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST172
CST172 .FILL #2
IGNORE_CST172
LD R1 CST167
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST167
CST167 .FILL #1
IGNORE_CST167
LDR R0 R0 #0 ; Deref the last lvalue
LD R1 CST168
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST168
CST168 .FILL #4
IGNORE_CST168
LD R0 CST106 ; R0 <- cst 0
BR IGNORE_CST106
CST106 .FILL #0
IGNORE_CST106
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R1 CST107
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST107
CST107 .FILL #4
IGNORE_CST107
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF108
LD R3 CST297 ; R3 <- address of label CMP_ELSE108
BR IGNORE_CST297
CST297 .FILL #13552
IGNORE_CST297
JMP R3
IGNORE_JMP_IF108
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST298 ; R3 <- address of label CMP_ENDELSE108
BR IGNORE_CST298
CST298 .FILL #13553
IGNORE_CST298
JMP R3
CMP_ELSE108
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE108
; R0 <-  e1 > e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF114
LD R3 CST299 ; R3 <- address of label EIF_ELSE114
BR IGNORE_CST299
CST299 .FILL #13607
IGNORE_CST299
JMP R3
IGNORE_JMP_IF114
LD R0 CST109 ; R0 <- cst 0
BR IGNORE_CST109
CST109 .FILL #0
IGNORE_CST109
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
LD R1 CST110
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST110
CST110 .FILL #3
IGNORE_CST110
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST111
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST111
CST111 .FILL #-4
IGNORE_CST111
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRnz IGNORE_JMP_IF112
LD R3 CST300 ; R3 <- address of label CMP_ELSE112
BR IGNORE_CST300
CST300 .FILL #13602
IGNORE_CST300
JMP R3
IGNORE_JMP_IF112
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST301 ; R3 <- address of label CMP_ENDELSE112
BR IGNORE_CST301
CST301 .FILL #13603
IGNORE_CST301
JMP R3
CMP_ELSE112
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE112
; R0 <-  e1 < e2
LD R3 CST302 ; R3 <- address of label EIF_ENDELSE114
BR IGNORE_CST302
CST302 .FILL #13610
IGNORE_CST302
JMP R3
EIF_ELSE114
LD R0 CST113 ; R0 <- cst 0
BR IGNORE_CST113
CST113 .FILL #0
IGNORE_CST113
EIF_ENDELSE114
ADD R0 R0 #0
BRnp IGNORE_JMP_IF120
LD R3 CST303 ; R3 <- address of label EIF_ELSE120
BR IGNORE_CST303
CST303 .FILL #13664
IGNORE_CST303
JMP R3
IGNORE_JMP_IF120
; e1
LD R1 CST115
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST115
CST115 .FILL #3
IGNORE_CST115
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST116
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST116
CST116 .FILL #-4
IGNORE_CST116
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST117 ; R0 <- cst 16
BR IGNORE_CST117
CST117 .FILL #16
IGNORE_CST117
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRn IGNORE_JMP_IF118
LD R3 CST304 ; R3 <- address of label CMP_ELSE118
BR IGNORE_CST304
CST304 .FILL #13659
IGNORE_CST304
JMP R3
IGNORE_JMP_IF118
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST305 ; R3 <- address of label CMP_ENDELSE118
BR IGNORE_CST305
CST305 .FILL #13660
IGNORE_CST305
JMP R3
CMP_ELSE118
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE118
; R0 <-  e1 > e2
LD R3 CST306 ; R3 <- address of label EIF_ENDELSE120
BR IGNORE_CST306
CST306 .FILL #13667
IGNORE_CST306
JMP R3
EIF_ELSE120
LD R0 CST119 ; R0 <- cst 0
BR IGNORE_CST119
CST119 .FILL #0
IGNORE_CST119
EIF_ENDELSE120
ADD R0 R0 #0
BRnp IGNORE_JMP_IF148
LD R3 CST307 ; R3 <- address of label EIF_ELSE148
BR IGNORE_CST307
CST307 .FILL #13928
IGNORE_CST307
JMP R3
IGNORE_JMP_IF148
LD R1 CST121
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST121
CST121 .FILL #-4
IGNORE_CST121
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST122 ; R0 <- cst 4
BR IGNORE_CST122
CST122 .FILL #4
IGNORE_CST122
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF123
LD R3 CST308 ; R3 <- address of label CMP_ELSE123
BR IGNORE_CST308
CST308 .FILL #13703
IGNORE_CST308
JMP R3
IGNORE_JMP_IF123
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST309 ; R3 <- address of label CMP_ENDELSE123
BR IGNORE_CST309
CST309 .FILL #13704
IGNORE_CST309
JMP R3
CMP_ELSE123
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE123
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF128
LD R3 CST310 ; R3 <- address of label EIF_ELSE128
BR IGNORE_CST310
CST310 .FILL #13717
IGNORE_CST310
JMP R3
IGNORE_JMP_IF128
LD R0 CST124 ; R0 <- cst 1
BR IGNORE_CST124
CST124 .FILL #1
IGNORE_CST124
LD R3 CST311 ; R3 <- address of label EIF_ENDELSE128
BR IGNORE_CST311
CST311 .FILL #13750
IGNORE_CST311
JMP R3
EIF_ELSE128
LD R1 CST125
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST125
CST125 .FILL #-4
IGNORE_CST125
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST126 ; R0 <- cst 4
BR IGNORE_CST126
CST126 .FILL #4
IGNORE_CST126
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF127
LD R3 CST312 ; R3 <- address of label CMP_ELSE127
BR IGNORE_CST312
CST312 .FILL #13749
IGNORE_CST312
JMP R3
IGNORE_JMP_IF127
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST313 ; R3 <- address of label CMP_ENDELSE127
BR IGNORE_CST313
CST313 .FILL #13750
IGNORE_CST313
JMP R3
CMP_ELSE127
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE127
; R0 <-  e1 == e2
EIF_ENDELSE128
ADD R0 R0 #0
BRnp IGNORE_JMP_IF146
LD R3 CST314 ; R3 <- address of label EIF_ELSE146
BR IGNORE_CST314
CST314 .FILL #13763
IGNORE_CST314
JMP R3
IGNORE_JMP_IF146
LD R0 CST129 ; R0 <- cst 1
BR IGNORE_CST129
CST129 .FILL #1
IGNORE_CST129
LD R3 CST315 ; R3 <- address of label EIF_ENDELSE146
BR IGNORE_CST315
CST315 .FILL #13924
IGNORE_CST315
JMP R3
EIF_ELSE146
LD R1 CST130
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST130
CST130 .FILL #-4
IGNORE_CST130
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST131 ; R0 <- cst 1
BR IGNORE_CST131
CST131 .FILL #1
IGNORE_CST131
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF132
LD R3 CST316 ; R3 <- address of label CMP_ELSE132
BR IGNORE_CST316
CST316 .FILL #13793
IGNORE_CST316
JMP R3
IGNORE_JMP_IF132
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST317 ; R3 <- address of label CMP_ENDELSE132
BR IGNORE_CST317
CST317 .FILL #13794
IGNORE_CST317
JMP R3
CMP_ELSE132
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE132
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF137
LD R3 CST318 ; R3 <- address of label EIF_ELSE137
BR IGNORE_CST318
CST318 .FILL #13807
IGNORE_CST318
JMP R3
IGNORE_JMP_IF137
LD R0 CST133 ; R0 <- cst 1
BR IGNORE_CST133
CST133 .FILL #1
IGNORE_CST133
LD R3 CST319 ; R3 <- address of label EIF_ENDELSE137
BR IGNORE_CST319
CST319 .FILL #13840
IGNORE_CST319
JMP R3
EIF_ELSE137
LD R1 CST134
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST134
CST134 .FILL #-4
IGNORE_CST134
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST135 ; R0 <- cst 1
BR IGNORE_CST135
CST135 .FILL #1
IGNORE_CST135
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF136
LD R3 CST320 ; R3 <- address of label CMP_ELSE136
BR IGNORE_CST320
CST320 .FILL #13839
IGNORE_CST320
JMP R3
IGNORE_JMP_IF136
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST321 ; R3 <- address of label CMP_ENDELSE136
BR IGNORE_CST321
CST321 .FILL #13840
IGNORE_CST321
JMP R3
CMP_ELSE136
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE136
; R0 <-  e1 == e2
EIF_ENDELSE137
ADD R0 R0 #0
BRnp IGNORE_JMP_IF145
LD R3 CST322 ; R3 <- address of label EIF_ELSE145
BR IGNORE_CST322
CST322 .FILL #13921
IGNORE_CST322
JMP R3
IGNORE_JMP_IF145
; e1
LD R1 CST138
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST138
CST138 .FILL #3
IGNORE_CST138
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST139 ; R0 <- cst 4
BR IGNORE_CST139
CST139 .FILL #4
IGNORE_CST139
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST323 ; R3 <- address of label FUN_DIV
BR IGNORE_CST323
CST323 .FILL #12314
IGNORE_CST323
JSRR R3 ; Divide R1 by R0
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e1
; e1
LD R1 CST140
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST140
CST140 .FILL #3
IGNORE_CST140
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R1 CST141
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST141
CST141 .FILL #-4
IGNORE_CST141
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
ADD R0 R0 R1 ; R0 <- R0 + R1
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST142 ; R0 <- cst 4
BR IGNORE_CST142
CST142 .FILL #4
IGNORE_CST142
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST324 ; R3 <- address of label FUN_DIV
BR IGNORE_CST324
CST324 .FILL #12314
IGNORE_CST324
JSRR R3 ; Divide R1 by R0
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF143
LD R3 CST325 ; R3 <- address of label CMP_ELSE143
BR IGNORE_CST325
CST325 .FILL #13916
IGNORE_CST325
JMP R3
IGNORE_JMP_IF143
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST326 ; R3 <- address of label CMP_ENDELSE143
BR IGNORE_CST326
CST326 .FILL #13917
IGNORE_CST326
JMP R3
CMP_ELSE143
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE143
; R0 <-  e1 == e2
LD R3 CST327 ; R3 <- address of label EIF_ENDELSE145
BR IGNORE_CST327
CST327 .FILL #13924
IGNORE_CST327
JMP R3
EIF_ELSE145
LD R0 CST144 ; R0 <- cst 0
BR IGNORE_CST144
CST144 .FILL #0
IGNORE_CST144
EIF_ENDELSE145
EIF_ENDELSE146
LD R3 CST328 ; R3 <- address of label EIF_ENDELSE148
BR IGNORE_CST328
CST328 .FILL #13931
IGNORE_CST328
JMP R3
EIF_ELSE148
LD R0 CST147 ; R0 <- cst 0
BR IGNORE_CST147
CST147 .FILL #0
IGNORE_CST147
EIF_ENDELSE148
ADD R0 R0 #0
BRnp IGNORE_JMP_IF166
LD R3 CST329 ; R3 <- address of label IF_ELSE166
BR IGNORE_CST329
CST329 .FILL #14095
IGNORE_CST329
JMP R3
IGNORE_JMP_IF166
LD R1 CST149
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST149
CST149 .FILL #2
IGNORE_CST149
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST150 ; R0 <- cst 0
BR IGNORE_CST150
CST150 .FILL #0
IGNORE_CST150
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF151
LD R3 CST330 ; R3 <- address of label CMP_ELSE151
BR IGNORE_CST330
CST330 .FILL #13968
IGNORE_CST330
JMP R3
IGNORE_JMP_IF151
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST331 ; R3 <- address of label CMP_ENDELSE151
BR IGNORE_CST331
CST331 .FILL #13969
IGNORE_CST331
JMP R3
CMP_ELSE151
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE151
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF165
LD R3 CST332 ; R3 <- address of label IF_ELSE165
BR IGNORE_CST332
CST332 .FILL #14006
IGNORE_CST332
JMP R3
IGNORE_JMP_IF165
LD R1 CST154
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST154
CST154 .FILL #4
IGNORE_CST154
LD R1 CST155
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST155
CST155 .FILL #2
IGNORE_CST155
STR R0 R1 #0 ; R0 <- M[R1]
LD R0 CST152 ; R0 <- cst 0
BR IGNORE_CST152
CST152 .FILL #0
IGNORE_CST152
LD R1 CST153
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST153
CST153 .FILL #1
IGNORE_CST153
STR R0 R1 #0 ; R0 <- M[R1]
LD R3 CST333 ; R3 <- address of label IF_ENDELSE165
BR IGNORE_CST333
CST333 .FILL #14091
IGNORE_CST333
JMP R3
IF_ELSE165
LD R1 CST156
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST156
CST156 .FILL #2
IGNORE_CST156
LDR R0 R0 #0 ; Deref the last lvalue
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R1 CST157
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST157
CST157 .FILL #4
IGNORE_CST157
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF158
LD R3 CST334 ; R3 <- address of label CMP_ELSE158
BR IGNORE_CST334
CST334 .FILL #14042
IGNORE_CST334
JMP R3
IGNORE_JMP_IF158
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST335 ; R3 <- address of label CMP_ENDELSE158
BR IGNORE_CST335
CST335 .FILL #14043
IGNORE_CST335
JMP R3
CMP_ELSE158
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE158
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF164
LD R3 CST336 ; R3 <- address of label IF_ELSE164
BR IGNORE_CST336
CST336 .FILL #14091
IGNORE_CST336
JMP R3
IGNORE_JMP_IF164
LD R0 CST162 ; R0 <- cst 0
BR IGNORE_CST162
CST162 .FILL #0
IGNORE_CST162
LD R1 CST163
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST163
CST163 .FILL #1
IGNORE_CST163
STR R0 R1 #0 ; R0 <- M[R1]
; e1
LD R1 CST159
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST159
CST159 .FILL #4
IGNORE_CST159
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
; e2
LD R0 CST160 ; R0 <- cst 2
BR IGNORE_CST160
CST160 .FILL #2
IGNORE_CST160
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ; Retrieve upmost result on the stack in R1
LD R3 CST337 ; R3 <- address of label FUN_MULT
BR IGNORE_CST337
CST337 .FILL #12299
IGNORE_CST337
JSRR R3 ; Multiply R0 and R1
LD R1 CST161
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
BR IGNORE_CST161
CST161 .FILL #2
IGNORE_CST161
STR R0 R1 #0 ; R0 <- M[R1]
LD R3 CST338 ; R3 <- address of label IF_ENDELSE164
BR IGNORE_CST338
CST338 .FILL #14091
IGNORE_CST338
JMP R3
IF_ELSE164
IF_ENDELSE164
IF_ENDELSE165
LD R3 CST339 ; R3 <- address of label IF_ENDELSE166
BR IGNORE_CST339
CST339 .FILL #14095
IGNORE_CST339
JMP R3
IF_ELSE166
IF_ENDELSE166
LD R0 CST105
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
BR IGNORE_CST105
CST105 .FILL #3
IGNORE_CST105
ADD R1 R0 #0
LDR R0 R1 #0
ADD R0 R0 #1
STR R0 R1 #0 ; ++(lvalue)
LD R3 CST340 ; R3 <- address of label STARTWHILE100
BR IGNORE_CST340
CST340 .FILL #13404
IGNORE_CST340
JMP R3
ENDWHILE100
LD R0 CST100
NOT R0 R0
ADD R0 R0 #1
ADD R0 R0 R5
BR IGNORE_CST100
CST100 .FILL #5
IGNORE_CST100
ADD R1 R0 #0
LDR R0 R1 #0
ADD R0 R0 #-1
STR R0 R1 #0
ADD R0 R0 #1 ; (lvalue)--
LD R3 CST341 ; R3 <- address of label STARTWHILE95
BR IGNORE_CST341
CST341 .FILL #13357
IGNORE_CST341
JMP R3
ENDWHILE95
LD R0 CST95 ; R0 <- cst 0
BR IGNORE_CST95
CST95 .FILL #0
IGNORE_CST95
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
FUN_USER_main
STR R5 R6 #0 ; Store R5 on the stack
ADD R6 R6 #-1
ADD R1 R6 #1
STR R1 R6 #0 ; Store R6 on the stack
ADD R6 R6 #-1
STR R7 R6 #0 ; Store R7 on the stack
ADD R6 R6 #-1
ADD R5 R6 #0 ; R5 <- R6
ADD R6 R6 #-1 ; Add variable input to the stack 
LD R0 CST342 ; R0 <- address of label STRING7
BR IGNORE_CST342
CST342 .FILL #14716
IGNORE_CST342
LD R1 CST234
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST234
CST234 .FILL #1
IGNORE_CST234
; Call function init_grid
LD R1 CST232
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST232
CST232 .FILL #1
IGNORE_CST232
STR R0 R6 #0 ; Adding arg on the stack to call init_grid
ADD R6 R6 #-1
LD R3 CST343 ; R3 <- address of label FUN_USER_init_grid
BR IGNORE_CST343
CST343 .FILL #13037
IGNORE_CST343
JSRR R3
LD R1 CST233
ADD R6 R6 R1 ; Remove init_grid's args from the stack
BR IGNORE_CST233
CST233 .FILL #1
IGNORE_CST233
; Call function print_grid
LD R1 CST230
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST230
CST230 .FILL #1
IGNORE_CST230
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST344 ; R3 <- address of label FUN_USER_print_grid
BR IGNORE_CST344
CST344 .FILL #12709
IGNORE_CST344
JSRR R3
LD R1 CST231
ADD R6 R6 R1 ; Remove print_grid's args from the stack
BR IGNORE_CST231
CST231 .FILL #1
IGNORE_CST231
LD R0 CST345 ; R0 <- address of label STRING6
BR IGNORE_CST345
CST345 .FILL #14701
IGNORE_CST345
PUTS
GETC
LD R1 CST229
ADD R1 R4 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST229
CST229 .FILL #0
IGNORE_CST229
; Call function spawn_sq
LD R1 CST227
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST227
CST227 .FILL #1
IGNORE_CST227
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST346 ; R3 <- address of label FUN_USER_spawn_sq
BR IGNORE_CST346
CST346 .FILL #13164
IGNORE_CST346
JSRR R3
LD R1 CST228
ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
BR IGNORE_CST228
CST228 .FILL #1
IGNORE_CST228
; Call function spawn_sq
LD R1 CST225
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST225
CST225 .FILL #1
IGNORE_CST225
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST347 ; R3 <- address of label FUN_USER_spawn_sq
BR IGNORE_CST347
CST347 .FILL #13164
IGNORE_CST347
JSRR R3
LD R1 CST226
ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
BR IGNORE_CST226
CST226 .FILL #1
IGNORE_CST226
; Call function clear
LD R3 CST348 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST348
CST348 .FILL #12430
IGNORE_CST348
JSRR R3
LD R1 CST224
ADD R6 R6 R1 ; Remove clear's args from the stack
BR IGNORE_CST224
CST224 .FILL #0
IGNORE_CST224
; Call function print_grid
LD R1 CST222
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST222
CST222 .FILL #1
IGNORE_CST222
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST349 ; R3 <- address of label FUN_USER_print_grid
BR IGNORE_CST349
CST349 .FILL #12709
IGNORE_CST349
JSRR R3
LD R1 CST223
ADD R6 R6 R1 ; Remove print_grid's args from the stack
BR IGNORE_CST223
CST223 .FILL #1
IGNORE_CST223
STARTWHILE179
GETC
LD R1 CST181
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
STR R0 R1 #0 ; Change variable content to R0
BR IGNORE_CST181
CST181 .FILL #0
IGNORE_CST181
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST182 ; R0 <- cst 120
BR IGNORE_CST182
CST182 .FILL #120
IGNORE_CST182
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF183
LD R3 CST350 ; R3 <- address of label CMP_ELSE183
BR IGNORE_CST350
CST350 .FILL #14276
IGNORE_CST350
JMP R3
IGNORE_JMP_IF183
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST351 ; R3 <- address of label CMP_ENDELSE183
BR IGNORE_CST351
CST351 .FILL #14277
IGNORE_CST351
JMP R3
CMP_ELSE183
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE183
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF186
LD R3 CST352 ; R3 <- address of label EIF_ELSE186
BR IGNORE_CST352
CST352 .FILL #14290
IGNORE_CST352
JMP R3
IGNORE_JMP_IF186
LD R0 CST184 ; R0 <- cst 0
BR IGNORE_CST184
CST184 .FILL #0
IGNORE_CST184
LD R3 CST353 ; R3 <- address of label EIF_ENDELSE186
BR IGNORE_CST353
CST353 .FILL #14293
IGNORE_CST353
JMP R3
EIF_ELSE186
LD R0 CST185 ; R0 <- cst 1
BR IGNORE_CST185
CST185 .FILL #1
IGNORE_CST185
EIF_ENDELSE186
ADD R0 R0 #0
BRnp IGNORE_JMP_WHILE179
LD R3 CST354 ; R3 <- address of label ENDWHILE179
BR IGNORE_CST354
CST354 .FILL #14611
IGNORE_CST354
JMP R3
IGNORE_JMP_WHILE179
LD R1 CST214
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST214
CST214 .FILL #0
IGNORE_CST214
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST215 ; R0 <- cst 122
BR IGNORE_CST215
CST215 .FILL #122
IGNORE_CST215
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF216
LD R3 CST355 ; R3 <- address of label CMP_ELSE216
BR IGNORE_CST355
CST355 .FILL #14329
IGNORE_CST355
JMP R3
IGNORE_JMP_IF216
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST356 ; R3 <- address of label CMP_ENDELSE216
BR IGNORE_CST356
CST356 .FILL #14330
IGNORE_CST356
JMP R3
CMP_ELSE216
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE216
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF221
LD R3 CST357 ; R3 <- address of label IF_ELSE221
BR IGNORE_CST357
CST357 .FILL #14371
IGNORE_CST357
JMP R3
IGNORE_JMP_IF221
; Call function move_grid
LD R0 CST219 ; R0 <- cst 4
BR IGNORE_CST219
CST219 .FILL #4
IGNORE_CST219
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST358 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST358
CST358 .FILL #13333
IGNORE_CST358
JSRR R3
LD R1 CST220
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST220
CST220 .FILL #1
IGNORE_CST220
; Call function spawn_sq
LD R1 CST217
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST217
CST217 .FILL #1
IGNORE_CST217
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST359 ; R3 <- address of label FUN_USER_spawn_sq
BR IGNORE_CST359
CST359 .FILL #13164
IGNORE_CST359
JSRR R3
LD R1 CST218
ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
BR IGNORE_CST218
CST218 .FILL #1
IGNORE_CST218
LD R3 CST360 ; R3 <- address of label IF_ENDELSE221
BR IGNORE_CST360
CST360 .FILL #14371
IGNORE_CST360
JMP R3
IF_ELSE221
IF_ENDELSE221
LD R1 CST206
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST206
CST206 .FILL #0
IGNORE_CST206
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST207 ; R0 <- cst 115
BR IGNORE_CST207
CST207 .FILL #115
IGNORE_CST207
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF208
LD R3 CST361 ; R3 <- address of label CMP_ELSE208
BR IGNORE_CST361
CST361 .FILL #14401
IGNORE_CST361
JMP R3
IGNORE_JMP_IF208
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST362 ; R3 <- address of label CMP_ENDELSE208
BR IGNORE_CST362
CST362 .FILL #14402
IGNORE_CST362
JMP R3
CMP_ELSE208
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE208
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF213
LD R3 CST363 ; R3 <- address of label IF_ELSE213
BR IGNORE_CST363
CST363 .FILL #14441
IGNORE_CST363
JMP R3
IGNORE_JMP_IF213
; Call function move_grid
LD R0 CST211 ; R0 <- cst 4
BR IGNORE_CST211
CST211 .FILL #4
IGNORE_CST211
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST364 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST364
CST364 .FILL #13333
IGNORE_CST364
JSRR R3
LD R1 CST212
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST212
CST212 .FILL #1
IGNORE_CST212
; Call function spawn_sq
LD R1 CST209
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST209
CST209 .FILL #1
IGNORE_CST209
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST365 ; R3 <- address of label FUN_USER_spawn_sq
BR IGNORE_CST365
CST365 .FILL #13164
IGNORE_CST365
JSRR R3
LD R1 CST210
ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
BR IGNORE_CST210
CST210 .FILL #1
IGNORE_CST210
LD R3 CST366 ; R3 <- address of label IF_ENDELSE213
BR IGNORE_CST366
CST366 .FILL #14441
IGNORE_CST366
JMP R3
IF_ELSE213
IF_ENDELSE213
LD R1 CST198
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST198
CST198 .FILL #0
IGNORE_CST198
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST199 ; R0 <- cst 100
BR IGNORE_CST199
CST199 .FILL #100
IGNORE_CST199
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF200
LD R3 CST367 ; R3 <- address of label CMP_ELSE200
BR IGNORE_CST367
CST367 .FILL #14471
IGNORE_CST367
JMP R3
IGNORE_JMP_IF200
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST368 ; R3 <- address of label CMP_ENDELSE200
BR IGNORE_CST368
CST368 .FILL #14472
IGNORE_CST368
JMP R3
CMP_ELSE200
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE200
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF205
LD R3 CST369 ; R3 <- address of label IF_ELSE205
BR IGNORE_CST369
CST369 .FILL #14511
IGNORE_CST369
JMP R3
IGNORE_JMP_IF205
; Call function move_grid
LD R0 CST203 ; R0 <- cst 1
BR IGNORE_CST203
CST203 .FILL #1
IGNORE_CST203
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST370 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST370
CST370 .FILL #13333
IGNORE_CST370
JSRR R3
LD R1 CST204
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST204
CST204 .FILL #1
IGNORE_CST204
; Call function spawn_sq
LD R1 CST201
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST201
CST201 .FILL #1
IGNORE_CST201
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST371 ; R3 <- address of label FUN_USER_spawn_sq
BR IGNORE_CST371
CST371 .FILL #13164
IGNORE_CST371
JSRR R3
LD R1 CST202
ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
BR IGNORE_CST202
CST202 .FILL #1
IGNORE_CST202
LD R3 CST372 ; R3 <- address of label IF_ENDELSE205
BR IGNORE_CST372
CST372 .FILL #14511
IGNORE_CST372
JMP R3
IF_ELSE205
IF_ENDELSE205
LD R1 CST190
NOT R1 R1
ADD R1 R1 #1
ADD R1 R5 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST190
CST190 .FILL #0
IGNORE_CST190
STR R0 R6 #0 ; Store R0 on the stack
ADD R6 R6 #-1 ; Increase the stack
LD R0 CST191 ; R0 <- cst 113
BR IGNORE_CST191
CST191 .FILL #113
IGNORE_CST191
ADD R6 R6 #1 ; Decrease the stack
LDR R1 R6 #0 ;  Retrieve upmost result on the stack in R1
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
ADD R0 R0 R1 ; Compute R1 - R0 for comparison
ADD R0 R0 #0
BRz IGNORE_JMP_IF192
LD R3 CST373 ; R3 <- address of label CMP_ELSE192
BR IGNORE_CST373
CST373 .FILL #14541
IGNORE_CST373
JMP R3
IGNORE_JMP_IF192
AND R0 R0 #0
ADD R0 R0 #1 ; If comparison true, set R0 to 1
LD R3 CST374 ; R3 <- address of label CMP_ENDELSE192
BR IGNORE_CST374
CST374 .FILL #14542
IGNORE_CST374
JMP R3
CMP_ELSE192
AND R0 R0 #0 ; If comparison false, set R0 to 0
CMP_ENDELSE192
; R0 <-  e1 == e2
ADD R0 R0 #0
BRnp IGNORE_JMP_IF197
LD R3 CST375 ; R3 <- address of label IF_ELSE197
BR IGNORE_CST375
CST375 .FILL #14583
IGNORE_CST375
JMP R3
IGNORE_JMP_IF197
; Call function move_grid
LD R0 CST195 ; R0 <- cst 1
BR IGNORE_CST195
CST195 .FILL #1
IGNORE_CST195
NOT R0 R0
ADD R0 R0 #1 ;  R0 <- -R0
STR R0 R6 #0 ; Adding arg on the stack to call move_grid
ADD R6 R6 #-1
LD R3 CST376 ; R3 <- address of label FUN_USER_move_grid
BR IGNORE_CST376
CST376 .FILL #13333
IGNORE_CST376
JSRR R3
LD R1 CST196
ADD R6 R6 R1 ; Remove move_grid's args from the stack
BR IGNORE_CST196
CST196 .FILL #1
IGNORE_CST196
; Call function spawn_sq
LD R1 CST193
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST193
CST193 .FILL #1
IGNORE_CST193
STR R0 R6 #0 ; Adding arg on the stack to call spawn_sq
ADD R6 R6 #-1
LD R3 CST377 ; R3 <- address of label FUN_USER_spawn_sq
BR IGNORE_CST377
CST377 .FILL #13164
IGNORE_CST377
JSRR R3
LD R1 CST194
ADD R6 R6 R1 ; Remove spawn_sq's args from the stack
BR IGNORE_CST194
CST194 .FILL #1
IGNORE_CST194
LD R3 CST378 ; R3 <- address of label IF_ENDELSE197
BR IGNORE_CST378
CST378 .FILL #14583
IGNORE_CST378
JMP R3
IF_ELSE197
IF_ENDELSE197
; Call function clear
LD R3 CST379 ; R3 <- address of label FUN_USER_clear
BR IGNORE_CST379
CST379 .FILL #12430
IGNORE_CST379
JSRR R3
LD R1 CST189
ADD R6 R6 R1 ; Remove clear's args from the stack
BR IGNORE_CST189
CST189 .FILL #0
IGNORE_CST189
; Call function print_grid
LD R1 CST187
ADD R1 R4 R1
LDR R1 R1 #0 ; Put variable content in R0
ADD R0 R1 #0
BR IGNORE_CST187
CST187 .FILL #1
IGNORE_CST187
STR R0 R6 #0 ; Adding arg on the stack to call print_grid
ADD R6 R6 #-1
LD R3 CST380 ; R3 <- address of label FUN_USER_print_grid
BR IGNORE_CST380
CST380 .FILL #12709
IGNORE_CST380
JSRR R3
LD R1 CST188
ADD R6 R6 R1 ; Remove print_grid's args from the stack
BR IGNORE_CST188
CST188 .FILL #1
IGNORE_CST188
LD R3 CST381 ; R3 <- address of label STARTWHILE179
BR IGNORE_CST381
CST381 .FILL #14246
IGNORE_CST381
JMP R3
ENDWHILE179
AND R0 R0 #0
LDR R7 R5 #1 ; Restore R7
LDR R6 R5 #2 ; Restore R6
LDR R5 R5 #3 ; Restore R5
RET
STRINGS
STRING1 .STRINGZ "\n\n\n\n\n\n\n\n" ; 8
STRING2 .STRINGZ "----------------------\n" ; 23
STRING3 .STRINGZ "|\n" ; 2
STRING4 .STRINGZ "|                    |\n" ; 23
STRING5 .STRINGZ "----------------------\n|" ; 24
STRING6 .STRINGZ "Enter seed : \n" ; 14
STRING7 .STRINGZ "xxxxxxxxxxxxxxxx" ; 16
STATIC_VAR
V_rnd .BLKW #1
V_grid .BLKW #1

.END
; mem 14733 14734
